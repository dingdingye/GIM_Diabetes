// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_matmul_8ul_1ul_8ul_Pipeline_VITIS_LOOP_81_1_VITIS_LOOP_82_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0_read,
        A_0_read_8,
        A_0_read_9,
        A_0_read_10,
        A_0_read_11,
        A_0_read_12,
        A_0_read_13,
        A_0_read_14,
        agg_result_address0,
        agg_result_ce0,
        agg_result_we0,
        agg_result_d0,
        agg_result_address1,
        agg_result_ce1,
        agg_result_q1,
        B_0_address0,
        B_0_ce0,
        B_0_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] A_0_read;
input  [63:0] A_0_read_8;
input  [63:0] A_0_read_9;
input  [63:0] A_0_read_10;
input  [63:0] A_0_read_11;
input  [63:0] A_0_read_12;
input  [63:0] A_0_read_13;
input  [63:0] A_0_read_14;
output  [5:0] agg_result_address0;
output   agg_result_ce0;
output   agg_result_we0;
output  [63:0] agg_result_d0;
output  [5:0] agg_result_address1;
output   agg_result_ce1;
input  [63:0] agg_result_q1;
output  [2:0] B_0_address0;
output   B_0_ce0;
input  [63:0] B_0_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln81_fu_193_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln81_fu_223_p3;
reg   [3:0] select_ln81_reg_386;
wire   [2:0] trunc_ln56_fu_239_p1;
reg   [2:0] trunc_ln56_reg_391;
wire   [63:0] tmp_fu_276_p19;
wire   [5:0] add_ln56_fu_311_p2;
reg   [5:0] add_ln56_reg_407;
reg   [5:0] add_ln56_reg_407_pp0_iter2_reg;
reg   [5:0] add_ln56_reg_407_pp0_iter3_reg;
reg   [5:0] add_ln56_reg_407_pp0_iter4_reg;
reg   [5:0] agg_result_addr_reg_417;
reg   [5:0] agg_result_addr_reg_417_pp0_iter6_reg;
reg   [5:0] agg_result_addr_reg_417_pp0_iter7_reg;
reg   [5:0] agg_result_addr_reg_417_pp0_iter8_reg;
reg   [5:0] agg_result_addr_reg_417_pp0_iter9_reg;
reg   [5:0] agg_result_addr_reg_417_pp0_iter10_reg;
reg   [5:0] agg_result_addr_reg_417_pp0_iter11_reg;
wire   [63:0] grp_fu_170_p2;
reg   [63:0] mul_reg_423;
reg   [63:0] agg_result_load_reg_428;
wire   [63:0] grp_fu_166_p2;
reg   [63:0] add_reg_433;
wire   [63:0] zext_ln82_fu_243_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln56_1_fu_317_p1;
reg   [3:0] j_1_fu_76;
wire   [3:0] j_fu_248_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_1_load;
reg   [3:0] i_03_fu_80;
wire   [3:0] select_ln81_1_fu_231_p3;
reg   [3:0] ap_sig_allocacmp_i_03_load;
reg   [6:0] indvar_flatten_fu_84;
wire   [6:0] add_ln81_fu_199_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
reg    B_0_ce0_local;
reg    agg_result_ce1_local;
reg    agg_result_we0_local;
reg    agg_result_ce0_local;
wire   [0:0] icmp_ln82_fu_217_p2;
wire   [3:0] i_fu_211_p2;
wire   [63:0] tmp_fu_276_p17;
wire   [5:0] tmp_1_fu_269_p3;
wire   [5:0] zext_ln56_fu_308_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [2:0] tmp_fu_276_p1;
wire   [2:0] tmp_fu_276_p3;
wire   [2:0] tmp_fu_276_p5;
wire   [2:0] tmp_fu_276_p7;
wire  signed [2:0] tmp_fu_276_p9;
wire  signed [2:0] tmp_fu_276_p11;
wire  signed [2:0] tmp_fu_276_p13;
wire  signed [2:0] tmp_fu_276_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 j_1_fu_76 = 4'd0;
#0 i_03_fu_80 = 4'd0;
#0 indvar_flatten_fu_84 = 7'd0;
#0 ap_done_reg = 1'b0;
end

accelerator_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U3492(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(agg_result_load_reg_428),
    .din1(mul_reg_423),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

accelerator_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U3493(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_fu_276_p19),
    .din1(B_0_q0),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U3494(
    .din0(A_0_read),
    .din1(A_0_read_8),
    .din2(A_0_read_9),
    .din3(A_0_read_10),
    .din4(A_0_read_11),
    .din5(A_0_read_12),
    .din6(A_0_read_13),
    .din7(A_0_read_14),
    .def(tmp_fu_276_p17),
    .sel(trunc_ln56_reg_391),
    .dout(tmp_fu_276_p19)
);

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_03_fu_80 <= select_ln81_1_fu_231_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_03_fu_80 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_84 <= add_ln81_fu_199_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_1_fu_76 <= j_fu_248_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_1_fu_76 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln56_reg_407 <= add_ln56_fu_311_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln81_reg_386 <= select_ln81_fu_223_p3;
        trunc_ln56_reg_391 <= trunc_ln56_fu_239_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln56_reg_407_pp0_iter2_reg <= add_ln56_reg_407;
        add_ln56_reg_407_pp0_iter3_reg <= add_ln56_reg_407_pp0_iter2_reg;
        add_ln56_reg_407_pp0_iter4_reg <= add_ln56_reg_407_pp0_iter3_reg;
        add_reg_433 <= grp_fu_166_p2;
        agg_result_addr_reg_417 <= zext_ln56_1_fu_317_p1;
        agg_result_addr_reg_417_pp0_iter10_reg <= agg_result_addr_reg_417_pp0_iter9_reg;
        agg_result_addr_reg_417_pp0_iter11_reg <= agg_result_addr_reg_417_pp0_iter10_reg;
        agg_result_addr_reg_417_pp0_iter6_reg <= agg_result_addr_reg_417;
        agg_result_addr_reg_417_pp0_iter7_reg <= agg_result_addr_reg_417_pp0_iter6_reg;
        agg_result_addr_reg_417_pp0_iter8_reg <= agg_result_addr_reg_417_pp0_iter7_reg;
        agg_result_addr_reg_417_pp0_iter9_reg <= agg_result_addr_reg_417_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        mul_reg_423 <= grp_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        agg_result_load_reg_428 <= agg_result_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_0_ce0_local = 1'b1;
    end else begin
        B_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        agg_result_ce0_local = 1'b1;
    end else begin
        agg_result_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        agg_result_ce1_local = 1'b1;
    end else begin
        agg_result_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        agg_result_we0_local = 1'b1;
    end else begin
        agg_result_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln81_fu_193_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_03_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_03_load = i_03_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_1_load = j_1_fu_76;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_0_address0 = zext_ln82_fu_243_p1;

assign B_0_ce0 = B_0_ce0_local;

assign add_ln56_fu_311_p2 = (tmp_1_fu_269_p3 + zext_ln56_fu_308_p1);

assign add_ln81_fu_199_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign agg_result_address0 = agg_result_addr_reg_417_pp0_iter11_reg;

assign agg_result_address1 = zext_ln56_1_fu_317_p1;

assign agg_result_ce0 = agg_result_ce0_local;

assign agg_result_ce1 = agg_result_ce1_local;

assign agg_result_d0 = add_reg_433;

assign agg_result_we0 = agg_result_we0_local;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_fu_211_p2 = (ap_sig_allocacmp_i_03_load + 4'd1);

assign icmp_ln81_fu_193_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_217_p2 = ((ap_sig_allocacmp_j_1_load == 4'd8) ? 1'b1 : 1'b0);

assign j_fu_248_p2 = (select_ln81_fu_223_p3 + 4'd1);

assign select_ln81_1_fu_231_p3 = ((icmp_ln82_fu_217_p2[0:0] == 1'b1) ? i_fu_211_p2 : ap_sig_allocacmp_i_03_load);

assign select_ln81_fu_223_p3 = ((icmp_ln82_fu_217_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_1_load);

assign tmp_1_fu_269_p3 = {{trunc_ln56_reg_391}, {3'd0}};

assign tmp_fu_276_p17 = 'bx;

assign trunc_ln56_fu_239_p1 = select_ln81_1_fu_231_p3[2:0];

assign zext_ln56_1_fu_317_p1 = add_ln56_reg_407_pp0_iter4_reg;

assign zext_ln56_fu_308_p1 = select_ln81_reg_386;

assign zext_ln82_fu_243_p1 = select_ln81_fu_223_p3;

endmodule //accelerator_matmul_8ul_1ul_8ul_Pipeline_VITIS_LOOP_81_1_VITIS_LOOP_82_2
