// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_backProp_64_8_8_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_41_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_l_plus1_T_77_address0,
        w_l_plus1_T_77_ce0,
        w_l_plus1_T_77_we0,
        w_l_plus1_T_77_d0,
        w_l_plus1_T_76_address0,
        w_l_plus1_T_76_ce0,
        w_l_plus1_T_76_we0,
        w_l_plus1_T_76_d0,
        w_l_plus1_T_75_address0,
        w_l_plus1_T_75_ce0,
        w_l_plus1_T_75_we0,
        w_l_plus1_T_75_d0,
        w_l_plus1_T_74_address0,
        w_l_plus1_T_74_ce0,
        w_l_plus1_T_74_we0,
        w_l_plus1_T_74_d0,
        w_l_plus1_T_73_address0,
        w_l_plus1_T_73_ce0,
        w_l_plus1_T_73_we0,
        w_l_plus1_T_73_d0,
        w_l_plus1_T_72_address0,
        w_l_plus1_T_72_ce0,
        w_l_plus1_T_72_we0,
        w_l_plus1_T_72_d0,
        w_l_plus1_T_71_address0,
        w_l_plus1_T_71_ce0,
        w_l_plus1_T_71_we0,
        w_l_plus1_T_71_d0,
        w_l_plus1_T_address0,
        w_l_plus1_T_ce0,
        w_l_plus1_T_we0,
        w_l_plus1_T_d0,
        w_l_plus1_val
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] w_l_plus1_T_77_address0;
output   w_l_plus1_T_77_ce0;
output   w_l_plus1_T_77_we0;
output  [63:0] w_l_plus1_T_77_d0;
output  [2:0] w_l_plus1_T_76_address0;
output   w_l_plus1_T_76_ce0;
output   w_l_plus1_T_76_we0;
output  [63:0] w_l_plus1_T_76_d0;
output  [2:0] w_l_plus1_T_75_address0;
output   w_l_plus1_T_75_ce0;
output   w_l_plus1_T_75_we0;
output  [63:0] w_l_plus1_T_75_d0;
output  [2:0] w_l_plus1_T_74_address0;
output   w_l_plus1_T_74_ce0;
output   w_l_plus1_T_74_we0;
output  [63:0] w_l_plus1_T_74_d0;
output  [2:0] w_l_plus1_T_73_address0;
output   w_l_plus1_T_73_ce0;
output   w_l_plus1_T_73_we0;
output  [63:0] w_l_plus1_T_73_d0;
output  [2:0] w_l_plus1_T_72_address0;
output   w_l_plus1_T_72_ce0;
output   w_l_plus1_T_72_we0;
output  [63:0] w_l_plus1_T_72_d0;
output  [2:0] w_l_plus1_T_71_address0;
output   w_l_plus1_T_71_ce0;
output   w_l_plus1_T_71_we0;
output  [63:0] w_l_plus1_T_71_d0;
output  [2:0] w_l_plus1_T_address0;
output   w_l_plus1_T_ce0;
output   w_l_plus1_T_we0;
output  [63:0] w_l_plus1_T_d0;
input  [4095:0] w_l_plus1_val;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln40_fu_210_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln41_fu_260_p1;
reg   [3:0] j_5_fu_70;
wire   [3:0] j_fu_312_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_5_load;
reg   [3:0] i_28_fu_74;
wire   [3:0] select_ln40_1_fu_248_p3;
reg   [3:0] ap_sig_allocacmp_i_28_load;
reg   [6:0] indvar_flatten_fu_78;
wire   [6:0] add_ln40_fu_216_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
reg    w_l_plus1_T_76_we0_local;
wire   [2:0] trunc_ln40_fu_256_p1;
wire   [63:0] bitcast_ln42_fu_300_p1;
reg    w_l_plus1_T_76_ce0_local;
reg    w_l_plus1_T_75_we0_local;
reg    w_l_plus1_T_75_ce0_local;
reg    w_l_plus1_T_74_we0_local;
reg    w_l_plus1_T_74_ce0_local;
reg    w_l_plus1_T_73_we0_local;
reg    w_l_plus1_T_73_ce0_local;
reg    w_l_plus1_T_72_we0_local;
reg    w_l_plus1_T_72_ce0_local;
reg    w_l_plus1_T_71_we0_local;
reg    w_l_plus1_T_71_ce0_local;
reg    w_l_plus1_T_we0_local;
reg    w_l_plus1_T_ce0_local;
reg    w_l_plus1_T_77_we0_local;
reg    w_l_plus1_T_77_ce0_local;
wire   [0:0] icmp_ln41_fu_234_p2;
wire   [3:0] i_fu_228_p2;
wire   [3:0] select_ln40_fu_240_p3;
wire   [2:0] trunc_ln56_fu_272_p1;
wire   [11:0] add_ln_fu_276_p4;
wire   [4095:0] zext_ln42_fu_286_p1;
wire   [4095:0] lshr_ln42_fu_290_p2;
wire   [63:0] trunc_ln42_fu_296_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 j_5_fu_70 = 4'd0;
#0 i_28_fu_74 = 4'd0;
#0 indvar_flatten_fu_78 = 7'd0;
#0 ap_done_reg = 1'b0;
end

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln40_fu_210_p2 == 1'd0)) begin
            i_28_fu_74 <= select_ln40_1_fu_248_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_28_fu_74 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln40_fu_210_p2 == 1'd0)) begin
            indvar_flatten_fu_78 <= add_ln40_fu_216_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_78 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln40_fu_210_p2 == 1'd0)) begin
            j_5_fu_70 <= j_fu_312_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_5_fu_70 <= 4'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_210_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_28_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_28_load = i_28_fu_74;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_78;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_5_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_5_load = j_5_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_l_plus1_T_71_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_71_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_210_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_256_p1 == 3'd1))) begin
        w_l_plus1_T_71_we0_local = 1'b1;
    end else begin
        w_l_plus1_T_71_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_l_plus1_T_72_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_72_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_210_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_256_p1 == 3'd2))) begin
        w_l_plus1_T_72_we0_local = 1'b1;
    end else begin
        w_l_plus1_T_72_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_l_plus1_T_73_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_73_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_210_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_256_p1 == 3'd3))) begin
        w_l_plus1_T_73_we0_local = 1'b1;
    end else begin
        w_l_plus1_T_73_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_l_plus1_T_74_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_74_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_210_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_256_p1 == 3'd4))) begin
        w_l_plus1_T_74_we0_local = 1'b1;
    end else begin
        w_l_plus1_T_74_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_l_plus1_T_75_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_75_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_210_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_256_p1 == 3'd5))) begin
        w_l_plus1_T_75_we0_local = 1'b1;
    end else begin
        w_l_plus1_T_75_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_l_plus1_T_76_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_76_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_210_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_256_p1 == 3'd6))) begin
        w_l_plus1_T_76_we0_local = 1'b1;
    end else begin
        w_l_plus1_T_76_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_l_plus1_T_77_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_77_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_210_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_256_p1 == 3'd7))) begin
        w_l_plus1_T_77_we0_local = 1'b1;
    end else begin
        w_l_plus1_T_77_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_l_plus1_T_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_210_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln40_fu_256_p1 == 3'd0))) begin
        w_l_plus1_T_we0_local = 1'b1;
    end else begin
        w_l_plus1_T_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_fu_216_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln_fu_276_p4 = {{{trunc_ln40_fu_256_p1}, {trunc_ln56_fu_272_p1}}, {6'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bitcast_ln42_fu_300_p1 = trunc_ln42_fu_296_p1;

assign i_fu_228_p2 = (ap_sig_allocacmp_i_28_load + 4'd1);

assign icmp_ln40_fu_210_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_234_p2 = ((ap_sig_allocacmp_j_5_load == 4'd8) ? 1'b1 : 1'b0);

assign j_fu_312_p2 = (select_ln40_fu_240_p3 + 4'd1);

assign lshr_ln42_fu_290_p2 = w_l_plus1_val >> zext_ln42_fu_286_p1;

assign select_ln40_1_fu_248_p3 = ((icmp_ln41_fu_234_p2[0:0] == 1'b1) ? i_fu_228_p2 : ap_sig_allocacmp_i_28_load);

assign select_ln40_fu_240_p3 = ((icmp_ln41_fu_234_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_5_load);

assign trunc_ln40_fu_256_p1 = select_ln40_1_fu_248_p3[2:0];

assign trunc_ln42_fu_296_p1 = lshr_ln42_fu_290_p2[63:0];

assign trunc_ln56_fu_272_p1 = select_ln40_fu_240_p3[2:0];

assign w_l_plus1_T_71_address0 = zext_ln41_fu_260_p1;

assign w_l_plus1_T_71_ce0 = w_l_plus1_T_71_ce0_local;

assign w_l_plus1_T_71_d0 = bitcast_ln42_fu_300_p1;

assign w_l_plus1_T_71_we0 = w_l_plus1_T_71_we0_local;

assign w_l_plus1_T_72_address0 = zext_ln41_fu_260_p1;

assign w_l_plus1_T_72_ce0 = w_l_plus1_T_72_ce0_local;

assign w_l_plus1_T_72_d0 = bitcast_ln42_fu_300_p1;

assign w_l_plus1_T_72_we0 = w_l_plus1_T_72_we0_local;

assign w_l_plus1_T_73_address0 = zext_ln41_fu_260_p1;

assign w_l_plus1_T_73_ce0 = w_l_plus1_T_73_ce0_local;

assign w_l_plus1_T_73_d0 = bitcast_ln42_fu_300_p1;

assign w_l_plus1_T_73_we0 = w_l_plus1_T_73_we0_local;

assign w_l_plus1_T_74_address0 = zext_ln41_fu_260_p1;

assign w_l_plus1_T_74_ce0 = w_l_plus1_T_74_ce0_local;

assign w_l_plus1_T_74_d0 = bitcast_ln42_fu_300_p1;

assign w_l_plus1_T_74_we0 = w_l_plus1_T_74_we0_local;

assign w_l_plus1_T_75_address0 = zext_ln41_fu_260_p1;

assign w_l_plus1_T_75_ce0 = w_l_plus1_T_75_ce0_local;

assign w_l_plus1_T_75_d0 = bitcast_ln42_fu_300_p1;

assign w_l_plus1_T_75_we0 = w_l_plus1_T_75_we0_local;

assign w_l_plus1_T_76_address0 = zext_ln41_fu_260_p1;

assign w_l_plus1_T_76_ce0 = w_l_plus1_T_76_ce0_local;

assign w_l_plus1_T_76_d0 = bitcast_ln42_fu_300_p1;

assign w_l_plus1_T_76_we0 = w_l_plus1_T_76_we0_local;

assign w_l_plus1_T_77_address0 = zext_ln41_fu_260_p1;

assign w_l_plus1_T_77_ce0 = w_l_plus1_T_77_ce0_local;

assign w_l_plus1_T_77_d0 = bitcast_ln42_fu_300_p1;

assign w_l_plus1_T_77_we0 = w_l_plus1_T_77_we0_local;

assign w_l_plus1_T_address0 = zext_ln41_fu_260_p1;

assign w_l_plus1_T_ce0 = w_l_plus1_T_ce0_local;

assign w_l_plus1_T_d0 = bitcast_ln42_fu_300_p1;

assign w_l_plus1_T_we0 = w_l_plus1_T_we0_local;

assign zext_ln41_fu_260_p1 = select_ln40_fu_240_p3;

assign zext_ln42_fu_286_p1 = add_ln_fu_276_p4;

endmodule //accelerator_backProp_64_8_8_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_41_2
