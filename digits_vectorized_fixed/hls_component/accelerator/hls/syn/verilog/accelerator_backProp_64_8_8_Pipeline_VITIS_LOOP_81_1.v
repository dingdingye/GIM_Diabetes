// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_backProp_64_8_8_Pipeline_VITIS_LOOP_81_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_l_plus1_T_address0,
        w_l_plus1_T_ce0,
        w_l_plus1_T_q0,
        p_read,
        w_l_plus1_T_71_address0,
        w_l_plus1_T_71_ce0,
        w_l_plus1_T_71_q0,
        p_read1,
        w_l_plus1_T_72_address0,
        w_l_plus1_T_72_ce0,
        w_l_plus1_T_72_q0,
        p_read2,
        w_l_plus1_T_73_address0,
        w_l_plus1_T_73_ce0,
        w_l_plus1_T_73_q0,
        p_read3,
        w_l_plus1_T_74_address0,
        w_l_plus1_T_74_ce0,
        w_l_plus1_T_74_q0,
        p_read4,
        w_l_plus1_T_75_address0,
        w_l_plus1_T_75_ce0,
        w_l_plus1_T_75_q0,
        p_read5,
        w_l_plus1_T_76_address0,
        w_l_plus1_T_76_ce0,
        w_l_plus1_T_76_q0,
        p_read6,
        w_l_plus1_T_77_address0,
        w_l_plus1_T_77_ce0,
        w_l_plus1_T_77_q0,
        p_read7,
        add_i_715_out,
        add_i_715_out_ap_vld,
        add_i_713_out,
        add_i_713_out_ap_vld,
        add_i_711_out,
        add_i_711_out_ap_vld,
        add_i_79_out,
        add_i_79_out_ap_vld,
        add_i_77_out,
        add_i_77_out_ap_vld,
        add_i_75_out,
        add_i_75_out_ap_vld,
        add_i_73_out,
        add_i_73_out_ap_vld,
        add_i_71_out,
        add_i_71_out_ap_vld,
        mux_case_7_out,
        mux_case_7_out_ap_vld,
        mux_case_6_out,
        mux_case_6_out_ap_vld,
        mux_case_5_out,
        mux_case_5_out_ap_vld,
        mux_case_4_out,
        mux_case_4_out_ap_vld,
        mux_case_3_out,
        mux_case_3_out_ap_vld,
        mux_case_2_out,
        mux_case_2_out_ap_vld,
        mux_case_1_out,
        mux_case_1_out_ap_vld,
        mux_case_0_out,
        mux_case_0_out_ap_vld,
        grp_fu_1902_p_din0,
        grp_fu_1902_p_din1,
        grp_fu_1902_p_opcode,
        grp_fu_1902_p_dout0,
        grp_fu_1902_p_ce,
        grp_fu_1906_p_din0,
        grp_fu_1906_p_din1,
        grp_fu_1906_p_dout0,
        grp_fu_1906_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 40'd1;
parameter    ap_ST_fsm_pp0_stage1 = 40'd2;
parameter    ap_ST_fsm_pp0_stage2 = 40'd4;
parameter    ap_ST_fsm_pp0_stage3 = 40'd8;
parameter    ap_ST_fsm_pp0_stage4 = 40'd16;
parameter    ap_ST_fsm_pp0_stage5 = 40'd32;
parameter    ap_ST_fsm_pp0_stage6 = 40'd64;
parameter    ap_ST_fsm_pp0_stage7 = 40'd128;
parameter    ap_ST_fsm_pp0_stage8 = 40'd256;
parameter    ap_ST_fsm_pp0_stage9 = 40'd512;
parameter    ap_ST_fsm_pp0_stage10 = 40'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 40'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 40'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 40'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 40'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 40'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 40'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 40'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 40'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 40'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 40'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 40'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 40'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 40'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 40'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 40'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 40'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 40'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 40'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 40'd536870912;
parameter    ap_ST_fsm_pp0_stage30 = 40'd1073741824;
parameter    ap_ST_fsm_pp0_stage31 = 40'd2147483648;
parameter    ap_ST_fsm_pp0_stage32 = 40'd4294967296;
parameter    ap_ST_fsm_pp0_stage33 = 40'd8589934592;
parameter    ap_ST_fsm_pp0_stage34 = 40'd17179869184;
parameter    ap_ST_fsm_pp0_stage35 = 40'd34359738368;
parameter    ap_ST_fsm_pp0_stage36 = 40'd68719476736;
parameter    ap_ST_fsm_pp0_stage37 = 40'd137438953472;
parameter    ap_ST_fsm_pp0_stage38 = 40'd274877906944;
parameter    ap_ST_fsm_pp0_stage39 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] w_l_plus1_T_address0;
output   w_l_plus1_T_ce0;
input  [63:0] w_l_plus1_T_q0;
input  [63:0] p_read;
output  [2:0] w_l_plus1_T_71_address0;
output   w_l_plus1_T_71_ce0;
input  [63:0] w_l_plus1_T_71_q0;
input  [63:0] p_read1;
output  [2:0] w_l_plus1_T_72_address0;
output   w_l_plus1_T_72_ce0;
input  [63:0] w_l_plus1_T_72_q0;
input  [63:0] p_read2;
output  [2:0] w_l_plus1_T_73_address0;
output   w_l_plus1_T_73_ce0;
input  [63:0] w_l_plus1_T_73_q0;
input  [63:0] p_read3;
output  [2:0] w_l_plus1_T_74_address0;
output   w_l_plus1_T_74_ce0;
input  [63:0] w_l_plus1_T_74_q0;
input  [63:0] p_read4;
output  [2:0] w_l_plus1_T_75_address0;
output   w_l_plus1_T_75_ce0;
input  [63:0] w_l_plus1_T_75_q0;
input  [63:0] p_read5;
output  [2:0] w_l_plus1_T_76_address0;
output   w_l_plus1_T_76_ce0;
input  [63:0] w_l_plus1_T_76_q0;
input  [63:0] p_read6;
output  [2:0] w_l_plus1_T_77_address0;
output   w_l_plus1_T_77_ce0;
input  [63:0] w_l_plus1_T_77_q0;
input  [63:0] p_read7;
output  [63:0] add_i_715_out;
output   add_i_715_out_ap_vld;
output  [63:0] add_i_713_out;
output   add_i_713_out_ap_vld;
output  [63:0] add_i_711_out;
output   add_i_711_out_ap_vld;
output  [63:0] add_i_79_out;
output   add_i_79_out_ap_vld;
output  [63:0] add_i_77_out;
output   add_i_77_out_ap_vld;
output  [63:0] add_i_75_out;
output   add_i_75_out_ap_vld;
output  [63:0] add_i_73_out;
output   add_i_73_out_ap_vld;
output  [63:0] add_i_71_out;
output   add_i_71_out_ap_vld;
output  [63:0] mux_case_7_out;
output   mux_case_7_out_ap_vld;
output  [63:0] mux_case_6_out;
output   mux_case_6_out_ap_vld;
output  [63:0] mux_case_5_out;
output   mux_case_5_out_ap_vld;
output  [63:0] mux_case_4_out;
output   mux_case_4_out_ap_vld;
output  [63:0] mux_case_3_out;
output   mux_case_3_out_ap_vld;
output  [63:0] mux_case_2_out;
output   mux_case_2_out_ap_vld;
output  [63:0] mux_case_1_out;
output   mux_case_1_out_ap_vld;
output  [63:0] mux_case_0_out;
output   mux_case_0_out_ap_vld;
output  [63:0] grp_fu_1902_p_din0;
output  [63:0] grp_fu_1902_p_din1;
output  [0:0] grp_fu_1902_p_opcode;
input  [63:0] grp_fu_1902_p_dout0;
output   grp_fu_1902_p_ce;
output  [63:0] grp_fu_1906_p_din0;
output  [63:0] grp_fu_1906_p_din1;
input  [63:0] grp_fu_1906_p_dout0;
output   grp_fu_1906_p_ce;

reg ap_idle;
reg add_i_715_out_ap_vld;
reg add_i_713_out_ap_vld;
reg add_i_711_out_ap_vld;
reg add_i_79_out_ap_vld;
reg add_i_77_out_ap_vld;
reg add_i_75_out_ap_vld;
reg add_i_73_out_ap_vld;
reg add_i_71_out_ap_vld;
reg mux_case_7_out_ap_vld;
reg mux_case_6_out_ap_vld;
reg mux_case_5_out_ap_vld;
reg mux_case_4_out_ap_vld;
reg mux_case_3_out_ap_vld;
reg mux_case_2_out_ap_vld;
reg mux_case_1_out_ap_vld;
reg mux_case_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_subdone;
reg   [0:0] icmp_ln81_reg_967;
reg    ap_condition_exit_pp0_iter0_stage7;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage39;
wire    ap_block_pp0_stage39_subdone;
reg   [63:0] reg_457;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11_11001;
reg   [63:0] reg_462;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_pp0_stage16_11001;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_pp0_stage21_11001;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_block_pp0_stage26_11001;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_pp0_stage31_11001;
wire    ap_CS_fsm_pp0_stage36;
wire    ap_block_pp0_stage36_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_reg_961;
wire   [0:0] icmp_ln81_fu_555_p2;
reg   [63:0] w_l_plus1_T_71_load_reg_1016;
reg   [63:0] w_l_plus1_T_72_load_reg_1021;
reg   [63:0] w_l_plus1_T_73_load_reg_1026;
reg   [63:0] w_l_plus1_T_74_load_reg_1031;
reg   [63:0] w_l_plus1_T_75_load_reg_1036;
reg   [63:0] w_l_plus1_T_76_load_reg_1041;
reg   [63:0] w_l_plus1_T_77_load_reg_1046;
wire   [3:0] i_28_fu_573_p2;
reg   [3:0] i_28_reg_1051;
wire    ap_block_pp0_stage7_11001;
wire   [2:0] trunc_ln81_fu_602_p1;
reg   [2:0] trunc_ln81_reg_1056;
wire   [63:0] tmp_fu_605_p19;
reg   [63:0] mul_i_1_reg_1065;
reg   [63:0] mul_i_2_reg_1070;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_11001;
reg   [63:0] mul_i_3_reg_1075;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9_11001;
reg   [63:0] mul_i_4_reg_1080;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_11001;
reg   [63:0] mul_i_6_reg_1085;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12_11001;
reg   [63:0] mul_i_7_reg_1090;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage6_subdone;
wire   [63:0] zext_ln81_fu_561_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_27_fu_116;
wire    ap_block_pp0_stage39_11001;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
reg   [63:0] mux_case_0_fu_120;
wire    ap_block_pp0_stage7;
reg   [63:0] mux_case_1_fu_124;
reg   [63:0] mux_case_2_fu_128;
reg   [63:0] mux_case_3_fu_132;
reg   [63:0] mux_case_4_fu_136;
reg   [63:0] mux_case_5_fu_140;
reg   [63:0] mux_case_6_fu_144;
reg   [63:0] mux_case_7_fu_148;
reg   [63:0] add_i_71_fu_152;
reg   [63:0] add_i_73_fu_156;
reg   [63:0] add_i_75_fu_160;
reg   [63:0] add_i_77_fu_164;
reg   [63:0] add_i_79_fu_168;
reg   [63:0] add_i_711_fu_172;
reg   [63:0] add_i_713_fu_176;
reg   [63:0] add_i_715_fu_180;
wire    ap_block_pp0_stage7_01001;
reg    w_l_plus1_T_ce0_local;
reg    w_l_plus1_T_71_ce0_local;
reg    w_l_plus1_T_72_ce0_local;
reg    w_l_plus1_T_73_ce0_local;
reg    w_l_plus1_T_74_ce0_local;
reg    w_l_plus1_T_75_ce0_local;
reg    w_l_plus1_T_76_ce0_local;
reg    w_l_plus1_T_77_ce0_local;
reg   [63:0] grp_fu_448_p0;
reg   [63:0] grp_fu_448_p1;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_pp0_stage17;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_pp0_stage22;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_pp0_stage27;
wire    ap_CS_fsm_pp0_stage32;
wire    ap_block_pp0_stage32;
wire    ap_CS_fsm_pp0_stage37;
wire    ap_block_pp0_stage37;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [63:0] grp_fu_452_p0;
reg   [63:0] grp_fu_452_p1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage8;
wire   [63:0] tmp_fu_605_p17;
wire   [2:0] tmp_fu_605_p18;
wire    ap_block_pp0_stage7_00001;
wire    ap_block_pp0_stage12_00001;
wire    ap_block_pp0_stage17_00001;
wire    ap_block_pp0_stage22_00001;
wire    ap_block_pp0_stage27_00001;
wire    ap_block_pp0_stage32_00001;
wire    ap_block_pp0_stage37_00001;
wire    ap_block_pp0_stage2_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [39:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_pp0_stage35_subdone;
wire    ap_block_pp0_stage36_subdone;
wire    ap_block_pp0_stage37_subdone;
wire    ap_block_pp0_stage38_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [2:0] tmp_fu_605_p1;
wire   [2:0] tmp_fu_605_p3;
wire   [2:0] tmp_fu_605_p5;
wire   [2:0] tmp_fu_605_p7;
wire  signed [2:0] tmp_fu_605_p9;
wire  signed [2:0] tmp_fu_605_p11;
wire  signed [2:0] tmp_fu_605_p13;
wire  signed [2:0] tmp_fu_605_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_27_fu_116 = 4'd0;
#0 mux_case_0_fu_120 = 64'd0;
#0 mux_case_1_fu_124 = 64'd0;
#0 mux_case_2_fu_128 = 64'd0;
#0 mux_case_3_fu_132 = 64'd0;
#0 mux_case_4_fu_136 = 64'd0;
#0 mux_case_5_fu_140 = 64'd0;
#0 mux_case_6_fu_144 = 64'd0;
#0 mux_case_7_fu_148 = 64'd0;
#0 add_i_71_fu_152 = 64'd0;
#0 add_i_73_fu_156 = 64'd0;
#0 add_i_75_fu_160 = 64'd0;
#0 add_i_77_fu_164 = 64'd0;
#0 add_i_79_fu_168 = 64'd0;
#0 add_i_711_fu_172 = 64'd0;
#0 add_i_713_fu_176 = 64'd0;
#0 add_i_715_fu_180 = 64'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U1225(
    .din0(mux_case_0_fu_120),
    .din1(mux_case_1_fu_124),
    .din2(mux_case_2_fu_128),
    .din3(mux_case_3_fu_132),
    .din4(mux_case_4_fu_136),
    .din5(mux_case_5_fu_140),
    .din6(mux_case_6_fu_144),
    .din7(mux_case_7_fu_148),
    .def(tmp_fu_605_p17),
    .sel(tmp_fu_605_p18),
    .dout(tmp_fu_605_p19)
);

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage7),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage7)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage6_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage39_subdone) & (1'b1 == ap_CS_fsm_pp0_stage39))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_711_fu_172 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_i_711_fu_172 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_713_fu_176 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd0) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_i_713_fu_176 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_715_fu_180 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd7) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_i_715_fu_180 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_71_fu_152 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_i_71_fu_152 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_73_fu_156 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd5) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_i_73_fu_156 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_75_fu_160 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd4) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_i_75_fu_160 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_77_fu_164 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd3) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_i_77_fu_164 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_79_fu_168 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd2) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_i_79_fu_168 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_27_fu_116 <= 4'd0;
    end else if (((icmp_ln81_reg_967 == 1'd0) & (1'b0 == ap_block_pp0_stage39_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage39))) begin
        i_27_fu_116 <= i_28_reg_1051;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_0_fu_120 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd0) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mux_case_0_fu_120 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_1_fu_124 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mux_case_1_fu_124 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_2_fu_128 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd2) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mux_case_2_fu_128 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_3_fu_132 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd3) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mux_case_3_fu_132 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_4_fu_136 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd4) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mux_case_4_fu_136 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_5_fu_140 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd5) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mux_case_5_fu_140 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_6_fu_144 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mux_case_6_fu_144 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_7_fu_148 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1056 == 3'd7) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mux_case_7_fu_148 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        i_28_reg_1051 <= i_28_fu_573_p2;
        trunc_ln81_reg_1056 <= trunc_ln81_fu_602_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_961 <= ap_sig_allocacmp_i;
        icmp_ln81_reg_967 <= icmp_ln81_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mul_i_1_reg_1065 <= grp_fu_1906_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        mul_i_2_reg_1070 <= grp_fu_1906_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        mul_i_3_reg_1075 <= grp_fu_1906_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        mul_i_4_reg_1080 <= grp_fu_1906_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        mul_i_6_reg_1085 <= grp_fu_1906_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        mul_i_7_reg_1090 <= grp_fu_1906_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        reg_457 <= grp_fu_1906_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage36_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36)) | ((1'b0 == ap_block_pp0_stage31_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage26_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26)) | ((1'b0 == ap_block_pp0_stage21_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage16_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
        reg_462 <= grp_fu_1902_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        w_l_plus1_T_71_load_reg_1016 <= w_l_plus1_T_71_q0;
        w_l_plus1_T_72_load_reg_1021 <= w_l_plus1_T_72_q0;
        w_l_plus1_T_73_load_reg_1026 <= w_l_plus1_T_73_q0;
        w_l_plus1_T_74_load_reg_1031 <= w_l_plus1_T_74_q0;
        w_l_plus1_T_75_load_reg_1036 <= w_l_plus1_T_75_q0;
        w_l_plus1_T_76_load_reg_1041 <= w_l_plus1_T_76_q0;
        w_l_plus1_T_77_load_reg_1046 <= w_l_plus1_T_77_q0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_i_711_out_ap_vld = 1'b1;
    end else begin
        add_i_711_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_i_713_out_ap_vld = 1'b1;
    end else begin
        add_i_713_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_i_715_out_ap_vld = 1'b1;
    end else begin
        add_i_715_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_i_71_out_ap_vld = 1'b1;
    end else begin
        add_i_71_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_i_73_out_ap_vld = 1'b1;
    end else begin
        add_i_73_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_i_75_out_ap_vld = 1'b1;
    end else begin
        add_i_75_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_i_77_out_ap_vld = 1'b1;
    end else begin
        add_i_77_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_i_79_out_ap_vld = 1'b1;
    end else begin
        add_i_79_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_condition_exit_pp0_iter0_stage7 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage39_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage39))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_27_fu_116;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage37) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37)) | ((1'b0 == ap_block_pp0_stage32) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b0 == ap_block_pp0_stage27) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27)) | ((1'b0 == ap_block_pp0_stage22) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22)) | ((1'b0 == ap_block_pp0_stage17) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        grp_fu_448_p0 = reg_462;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_448_p0 = tmp_fu_605_p19;
    end else begin
        grp_fu_448_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_448_p1 = mul_i_7_reg_1090;
    end else if (((1'b0 == ap_block_pp0_stage37) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37))) begin
        grp_fu_448_p1 = mul_i_6_reg_1085;
    end else if (((1'b0 == ap_block_pp0_stage27) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27))) begin
        grp_fu_448_p1 = mul_i_4_reg_1080;
    end else if (((1'b0 == ap_block_pp0_stage22) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22))) begin
        grp_fu_448_p1 = mul_i_3_reg_1075;
    end else if (((1'b0 == ap_block_pp0_stage17) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17))) begin
        grp_fu_448_p1 = mul_i_2_reg_1070;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        grp_fu_448_p1 = mul_i_1_reg_1065;
    end else if ((((1'b0 == ap_block_pp0_stage32) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        grp_fu_448_p1 = reg_457;
    end else begin
        grp_fu_448_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            grp_fu_452_p0 = w_l_plus1_T_77_load_reg_1046;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            grp_fu_452_p0 = w_l_plus1_T_76_load_reg_1041;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_452_p0 = w_l_plus1_T_75_load_reg_1036;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_452_p0 = w_l_plus1_T_74_load_reg_1031;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_452_p0 = w_l_plus1_T_73_load_reg_1026;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_452_p0 = w_l_plus1_T_72_load_reg_1021;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_452_p0 = w_l_plus1_T_71_load_reg_1016;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_452_p0 = w_l_plus1_T_q0;
        end else begin
            grp_fu_452_p0 = 'bx;
        end
    end else begin
        grp_fu_452_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            grp_fu_452_p1 = p_read7;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            grp_fu_452_p1 = p_read6;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_452_p1 = p_read5;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_452_p1 = p_read4;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_452_p1 = p_read3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_452_p1 = p_read2;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_452_p1 = p_read1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_452_p1 = p_read;
        end else begin
            grp_fu_452_p1 = 'bx;
        end
    end else begin
        grp_fu_452_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mux_case_0_out_ap_vld = 1'b1;
    end else begin
        mux_case_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mux_case_1_out_ap_vld = 1'b1;
    end else begin
        mux_case_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mux_case_2_out_ap_vld = 1'b1;
    end else begin
        mux_case_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mux_case_3_out_ap_vld = 1'b1;
    end else begin
        mux_case_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mux_case_4_out_ap_vld = 1'b1;
    end else begin
        mux_case_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mux_case_5_out_ap_vld = 1'b1;
    end else begin
        mux_case_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mux_case_6_out_ap_vld = 1'b1;
    end else begin
        mux_case_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_967 == 1'd1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mux_case_7_out_ap_vld = 1'b1;
    end else begin
        mux_case_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_l_plus1_T_71_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_71_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_l_plus1_T_72_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_72_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_l_plus1_T_73_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_73_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_l_plus1_T_74_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_74_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_l_plus1_T_75_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_75_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_l_plus1_T_76_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_76_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_l_plus1_T_77_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_77_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_l_plus1_T_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage7)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((1'b0 == ap_block_pp0_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((1'b0 == ap_block_pp0_stage38_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((1'b0 == ap_block_pp0_stage39_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i_711_out = add_i_711_fu_172;

assign add_i_713_out = add_i_713_fu_176;

assign add_i_715_out = add_i_715_fu_180;

assign add_i_71_out = add_i_71_fu_152;

assign add_i_73_out = add_i_73_fu_156;

assign add_i_75_out = add_i_75_fu_160;

assign add_i_77_out = add_i_77_fu_164;

assign add_i_79_out = add_i_79_fu_168;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage32 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage36 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage37 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage39 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage7;

assign ap_ready = ap_ready_sig;

assign grp_fu_1902_p_ce = 1'b1;

assign grp_fu_1902_p_din0 = grp_fu_448_p0;

assign grp_fu_1902_p_din1 = grp_fu_448_p1;

assign grp_fu_1902_p_opcode = 2'd0;

assign grp_fu_1906_p_ce = 1'b1;

assign grp_fu_1906_p_din0 = grp_fu_452_p0;

assign grp_fu_1906_p_din1 = grp_fu_452_p1;

assign i_28_fu_573_p2 = (i_reg_961 + 4'd1);

assign icmp_ln81_fu_555_p2 = ((ap_sig_allocacmp_i == 4'd8) ? 1'b1 : 1'b0);

assign mux_case_0_out = mux_case_0_fu_120;

assign mux_case_1_out = mux_case_1_fu_124;

assign mux_case_2_out = mux_case_2_fu_128;

assign mux_case_3_out = mux_case_3_fu_132;

assign mux_case_4_out = mux_case_4_fu_136;

assign mux_case_5_out = mux_case_5_fu_140;

assign mux_case_6_out = mux_case_6_fu_144;

assign mux_case_7_out = mux_case_7_fu_148;

assign tmp_fu_605_p17 = 'bx;

assign tmp_fu_605_p18 = i_reg_961[2:0];

assign trunc_ln81_fu_602_p1 = i_reg_961[2:0];

assign w_l_plus1_T_71_address0 = zext_ln81_fu_561_p1;

assign w_l_plus1_T_71_ce0 = w_l_plus1_T_71_ce0_local;

assign w_l_plus1_T_72_address0 = zext_ln81_fu_561_p1;

assign w_l_plus1_T_72_ce0 = w_l_plus1_T_72_ce0_local;

assign w_l_plus1_T_73_address0 = zext_ln81_fu_561_p1;

assign w_l_plus1_T_73_ce0 = w_l_plus1_T_73_ce0_local;

assign w_l_plus1_T_74_address0 = zext_ln81_fu_561_p1;

assign w_l_plus1_T_74_ce0 = w_l_plus1_T_74_ce0_local;

assign w_l_plus1_T_75_address0 = zext_ln81_fu_561_p1;

assign w_l_plus1_T_75_ce0 = w_l_plus1_T_75_ce0_local;

assign w_l_plus1_T_76_address0 = zext_ln81_fu_561_p1;

assign w_l_plus1_T_76_ce0 = w_l_plus1_T_76_ce0_local;

assign w_l_plus1_T_77_address0 = zext_ln81_fu_561_p1;

assign w_l_plus1_T_77_ce0 = w_l_plus1_T_77_ce0_local;

assign w_l_plus1_T_address0 = zext_ln81_fu_561_p1;

assign w_l_plus1_T_ce0 = w_l_plus1_T_ce0_local;

assign zext_ln81_fu_561_p1 = ap_sig_allocacmp_i;

endmodule //accelerator_backProp_64_8_8_Pipeline_VITIS_LOOP_81_1
