// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_accelerator_Pipeline_VITIS_LOOP_67_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        result_l3_0_address0,
        result_l3_0_ce0,
        result_l3_0_q0,
        y_true_load,
        final_error_0_19_out,
        final_error_0_19_out_ap_vld,
        final_error_0_18_out,
        final_error_0_18_out_ap_vld,
        final_error_0_17_out,
        final_error_0_17_out_ap_vld,
        final_error_0_16_out,
        final_error_0_16_out_ap_vld,
        final_error_0_15_out,
        final_error_0_15_out_ap_vld,
        final_error_0_14_out,
        final_error_0_14_out_ap_vld,
        final_error_0_13_out,
        final_error_0_13_out_ap_vld,
        final_error_0_12_out,
        final_error_0_12_out_ap_vld,
        final_error_0_11_out,
        final_error_0_11_out_ap_vld,
        final_error_0_10_out,
        final_error_0_10_out_ap_vld,
        grp_fu_8485_p_din0,
        grp_fu_8485_p_din1,
        grp_fu_8485_p_opcode,
        grp_fu_8485_p_dout0,
        grp_fu_8485_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] result_l3_0_address0;
output   result_l3_0_ce0;
input  [63:0] result_l3_0_q0;
input  [639:0] y_true_load;
output  [63:0] final_error_0_19_out;
output   final_error_0_19_out_ap_vld;
output  [63:0] final_error_0_18_out;
output   final_error_0_18_out_ap_vld;
output  [63:0] final_error_0_17_out;
output   final_error_0_17_out_ap_vld;
output  [63:0] final_error_0_16_out;
output   final_error_0_16_out_ap_vld;
output  [63:0] final_error_0_15_out;
output   final_error_0_15_out_ap_vld;
output  [63:0] final_error_0_14_out;
output   final_error_0_14_out_ap_vld;
output  [63:0] final_error_0_13_out;
output   final_error_0_13_out_ap_vld;
output  [63:0] final_error_0_12_out;
output   final_error_0_12_out_ap_vld;
output  [63:0] final_error_0_11_out;
output   final_error_0_11_out_ap_vld;
output  [63:0] final_error_0_10_out;
output   final_error_0_10_out_ap_vld;
output  [63:0] grp_fu_8485_p_din0;
output  [63:0] grp_fu_8485_p_din1;
output  [0:0] grp_fu_8485_p_opcode;
input  [63:0] grp_fu_8485_p_dout0;
output   grp_fu_8485_p_ce;

reg ap_idle;
reg final_error_0_19_out_ap_vld;
reg final_error_0_18_out_ap_vld;
reg final_error_0_17_out_ap_vld;
reg final_error_0_16_out_ap_vld;
reg final_error_0_15_out_ap_vld;
reg final_error_0_14_out_ap_vld;
reg final_error_0_13_out_ap_vld;
reg final_error_0_12_out_ap_vld;
reg final_error_0_11_out_ap_vld;
reg final_error_0_10_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln67_fu_270_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_reg_485;
reg   [3:0] i_reg_485_pp0_iter1_reg;
reg   [3:0] i_reg_485_pp0_iter2_reg;
reg   [3:0] i_reg_485_pp0_iter3_reg;
reg   [3:0] i_reg_485_pp0_iter4_reg;
reg   [0:0] icmp_ln67_reg_489;
reg   [0:0] icmp_ln67_reg_489_pp0_iter1_reg;
reg   [0:0] icmp_ln67_reg_489_pp0_iter2_reg;
reg   [0:0] icmp_ln67_reg_489_pp0_iter3_reg;
wire   [63:0] trunc_ln69_fu_305_p1;
reg   [63:0] trunc_ln69_reg_498;
wire   [63:0] bitcast_ln69_fu_314_p1;
wire   [63:0] zext_ln67_fu_282_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_42_fu_74;
wire   [3:0] i_37_fu_276_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
reg   [63:0] final_error_0_10_fu_78;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [63:0] final_error_0_11_fu_82;
reg   [63:0] final_error_0_12_fu_86;
reg   [63:0] final_error_0_13_fu_90;
reg   [63:0] final_error_0_14_fu_94;
reg   [63:0] final_error_0_15_fu_98;
reg   [63:0] final_error_0_16_fu_102;
reg   [63:0] final_error_0_17_fu_106;
reg   [63:0] final_error_0_18_fu_110;
reg   [63:0] final_error_0_19_fu_114;
wire    ap_block_pp0_stage0_01001;
reg    result_l3_0_ce0_local;
wire   [9:0] shl_ln_fu_287_p3;
wire   [639:0] zext_ln69_fu_295_p1;
wire   [639:0] lshr_ln69_fu_299_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_403;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 i_42_fu_74 = 4'd0;
#0 final_error_0_10_fu_78 = 64'd0;
#0 final_error_0_11_fu_82 = 64'd0;
#0 final_error_0_12_fu_86 = 64'd0;
#0 final_error_0_13_fu_90 = 64'd0;
#0 final_error_0_14_fu_94 = 64'd0;
#0 final_error_0_15_fu_98 = 64'd0;
#0 final_error_0_16_fu_102 = 64'd0;
#0 final_error_0_17_fu_106 = 64'd0;
#0 final_error_0_18_fu_110 = 64'd0;
#0 final_error_0_19_fu_114 = 64'd0;
#0 ap_done_reg = 1'b0;
end

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            final_error_0_10_fu_78 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_485_pp0_iter4_reg == 4'd8))) begin
            final_error_0_10_fu_78 <= grp_fu_8485_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            final_error_0_11_fu_82 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_485_pp0_iter4_reg == 4'd7))) begin
            final_error_0_11_fu_82 <= grp_fu_8485_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            final_error_0_12_fu_86 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_485_pp0_iter4_reg == 4'd6))) begin
            final_error_0_12_fu_86 <= grp_fu_8485_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            final_error_0_13_fu_90 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_485_pp0_iter4_reg == 4'd5))) begin
            final_error_0_13_fu_90 <= grp_fu_8485_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            final_error_0_14_fu_94 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_485_pp0_iter4_reg == 4'd4))) begin
            final_error_0_14_fu_94 <= grp_fu_8485_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            final_error_0_15_fu_98 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_485_pp0_iter4_reg == 4'd3))) begin
            final_error_0_15_fu_98 <= grp_fu_8485_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            final_error_0_16_fu_102 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_485_pp0_iter4_reg == 4'd2))) begin
            final_error_0_16_fu_102 <= grp_fu_8485_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            final_error_0_17_fu_106 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_485_pp0_iter4_reg == 4'd1))) begin
            final_error_0_17_fu_106 <= grp_fu_8485_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            final_error_0_18_fu_110 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_485_pp0_iter4_reg == 4'd0))) begin
            final_error_0_18_fu_110 <= grp_fu_8485_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            final_error_0_19_fu_114 <= 64'd0;
        end else if ((1'b1 == ap_condition_403)) begin
            final_error_0_19_fu_114 <= grp_fu_8485_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln67_fu_270_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_42_fu_74 <= i_37_fu_276_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_42_fu_74 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_reg_485 <= ap_sig_allocacmp_i;
        i_reg_485_pp0_iter1_reg <= i_reg_485;
        icmp_ln67_reg_489 <= icmp_ln67_fu_270_p2;
        icmp_ln67_reg_489_pp0_iter1_reg <= icmp_ln67_reg_489;
        trunc_ln69_reg_498 <= trunc_ln69_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        i_reg_485_pp0_iter2_reg <= i_reg_485_pp0_iter1_reg;
        i_reg_485_pp0_iter3_reg <= i_reg_485_pp0_iter2_reg;
        i_reg_485_pp0_iter4_reg <= i_reg_485_pp0_iter3_reg;
        icmp_ln67_reg_489_pp0_iter2_reg <= icmp_ln67_reg_489_pp0_iter1_reg;
        icmp_ln67_reg_489_pp0_iter3_reg <= icmp_ln67_reg_489_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((icmp_ln67_fu_270_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_42_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln67_reg_489_pp0_iter3_reg == 1'd1))) begin
        final_error_0_10_out_ap_vld = 1'b1;
    end else begin
        final_error_0_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln67_reg_489_pp0_iter3_reg == 1'd1))) begin
        final_error_0_11_out_ap_vld = 1'b1;
    end else begin
        final_error_0_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln67_reg_489_pp0_iter3_reg == 1'd1))) begin
        final_error_0_12_out_ap_vld = 1'b1;
    end else begin
        final_error_0_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln67_reg_489_pp0_iter3_reg == 1'd1))) begin
        final_error_0_13_out_ap_vld = 1'b1;
    end else begin
        final_error_0_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln67_reg_489_pp0_iter3_reg == 1'd1))) begin
        final_error_0_14_out_ap_vld = 1'b1;
    end else begin
        final_error_0_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln67_reg_489_pp0_iter3_reg == 1'd1))) begin
        final_error_0_15_out_ap_vld = 1'b1;
    end else begin
        final_error_0_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln67_reg_489_pp0_iter3_reg == 1'd1))) begin
        final_error_0_16_out_ap_vld = 1'b1;
    end else begin
        final_error_0_16_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln67_reg_489_pp0_iter3_reg == 1'd1))) begin
        final_error_0_17_out_ap_vld = 1'b1;
    end else begin
        final_error_0_17_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln67_reg_489_pp0_iter3_reg == 1'd1))) begin
        final_error_0_18_out_ap_vld = 1'b1;
    end else begin
        final_error_0_18_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln67_reg_489_pp0_iter3_reg == 1'd1))) begin
        final_error_0_19_out_ap_vld = 1'b1;
    end else begin
        final_error_0_19_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        result_l3_0_ce0_local = 1'b1;
    end else begin
        result_l3_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_403 = (~(i_reg_485_pp0_iter4_reg == 4'd0) & ~(i_reg_485_pp0_iter4_reg == 4'd1) & ~(i_reg_485_pp0_iter4_reg == 4'd2) & ~(i_reg_485_pp0_iter4_reg == 4'd3) & ~(i_reg_485_pp0_iter4_reg == 4'd4) & ~(i_reg_485_pp0_iter4_reg == 4'd5) & ~(i_reg_485_pp0_iter4_reg == 4'd6) & ~(i_reg_485_pp0_iter4_reg == 4'd7) & ~(i_reg_485_pp0_iter4_reg == 4'd8) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bitcast_ln69_fu_314_p1 = trunc_ln69_reg_498;

assign final_error_0_10_out = final_error_0_10_fu_78;

assign final_error_0_11_out = final_error_0_11_fu_82;

assign final_error_0_12_out = final_error_0_12_fu_86;

assign final_error_0_13_out = final_error_0_13_fu_90;

assign final_error_0_14_out = final_error_0_14_fu_94;

assign final_error_0_15_out = final_error_0_15_fu_98;

assign final_error_0_16_out = final_error_0_16_fu_102;

assign final_error_0_17_out = final_error_0_17_fu_106;

assign final_error_0_18_out = final_error_0_18_fu_110;

assign final_error_0_19_out = final_error_0_19_fu_114;

assign grp_fu_8485_p_ce = 1'b1;

assign grp_fu_8485_p_din0 = result_l3_0_q0;

assign grp_fu_8485_p_din1 = bitcast_ln69_fu_314_p1;

assign grp_fu_8485_p_opcode = 2'd1;

assign i_37_fu_276_p2 = (ap_sig_allocacmp_i + 4'd1);

assign icmp_ln67_fu_270_p2 = ((ap_sig_allocacmp_i == 4'd10) ? 1'b1 : 1'b0);

assign lshr_ln69_fu_299_p2 = y_true_load >> zext_ln69_fu_295_p1;

assign result_l3_0_address0 = zext_ln67_fu_282_p1;

assign result_l3_0_ce0 = result_l3_0_ce0_local;

assign shl_ln_fu_287_p3 = {{ap_sig_allocacmp_i}, {6'd0}};

assign trunc_ln69_fu_305_p1 = lshr_ln69_fu_299_p2[63:0];

assign zext_ln67_fu_282_p1 = ap_sig_allocacmp_i;

assign zext_ln69_fu_295_p1 = shl_ln_fu_287_p3;

endmodule //accelerator_accelerator_Pipeline_VITIS_LOOP_67_3
