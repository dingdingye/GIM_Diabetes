-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_backProp_8_8_10_Pipeline_VITIS_LOOP_81_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_0_ce0 : OUT STD_LOGIC;
    C_0_we0 : OUT STD_LOGIC;
    C_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_0_ce1 : OUT STD_LOGIC;
    C_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    weights_val : IN STD_LOGIC_VECTOR (4095 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2572_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2572_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2572_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2572_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2572_p_ce : OUT STD_LOGIC;
    grp_fu_2564_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2564_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2564_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2564_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2564_p_ce : OUT STD_LOGIC;
    grp_fu_2576_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2576_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2576_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2576_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2576_p_ce : OUT STD_LOGIC;
    grp_fu_2580_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2580_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2580_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2580_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2580_p_ce : OUT STD_LOGIC;
    grp_fu_2584_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2584_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2584_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2584_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2584_p_ce : OUT STD_LOGIC;
    grp_fu_2588_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2588_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2588_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2588_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2588_p_ce : OUT STD_LOGIC;
    grp_fu_2592_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2592_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2592_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2592_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2592_p_ce : OUT STD_LOGIC;
    grp_fu_2596_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2596_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2596_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2596_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2596_p_ce : OUT STD_LOGIC;
    grp_fu_2568_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2568_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2568_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2568_p_ce : OUT STD_LOGIC;
    grp_fu_2600_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2600_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2600_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2600_p_ce : OUT STD_LOGIC;
    grp_fu_2604_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2604_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2604_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2604_p_ce : OUT STD_LOGIC;
    grp_fu_2608_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2608_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2608_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2608_p_ce : OUT STD_LOGIC;
    grp_fu_2612_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2612_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2612_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2612_p_ce : OUT STD_LOGIC;
    grp_fu_2616_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2616_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2616_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2616_p_ce : OUT STD_LOGIC;
    grp_fu_2620_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2620_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2620_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2620_p_ce : OUT STD_LOGIC;
    grp_fu_2624_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2624_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2624_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2624_p_ce : OUT STD_LOGIC );
end;


architecture behav of accelerator_backProp_8_8_10_Pipeline_VITIS_LOOP_81_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_40 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv9_C0 : STD_LOGIC_VECTOR (8 downto 0) := "011000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv9_1C0 : STD_LOGIC_VECTOR (8 downto 0) := "111000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln81_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal C_0_addr_reg_498 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter31_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter32_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter33_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter34_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter35_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter36_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter37_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter38_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter39_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter40_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter41_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter42_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter43_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter44_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal C_0_addr_reg_498_pp0_iter45_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_233_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_504_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln84_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_reg_515 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln84_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_8_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_8_reg_525 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i1_reg_530 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln84_141_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_9_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_9_reg_545 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i1_reg_550 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_1_reg_555 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln84_142_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_10_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_10_reg_565 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i29_1_reg_570 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_2_reg_575 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln84_143_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_11_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_11_reg_585 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i29_2_reg_590 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_3_reg_595 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln84_144_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_12_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_12_reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i29_3_reg_610 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_4_reg_615 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln84_145_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_13_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_13_reg_625 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_14_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln84_14_reg_630 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i29_4_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_5_reg_640 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln84_146_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln84_147_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i29_5_reg_655 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_6_reg_660 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_7_reg_665 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_7_reg_665_pp0_iter37_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_7_reg_665_pp0_iter38_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_7_reg_665_pp0_iter39_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_7_reg_665_pp0_iter40_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i28_7_reg_665_pp0_iter41_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i29_6_reg_670 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln81_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_68 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_20_fu_222_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_19 : STD_LOGIC_VECTOR (3 downto 0);
    signal C_0_ce1_local : STD_LOGIC;
    signal C_0_we0_local : STD_LOGIC;
    signal C_0_ce0_local : STD_LOGIC;
    signal tmp_s_fu_237_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln84_fu_245_p1 : STD_LOGIC_VECTOR (4095 downto 0);
    signal lshr_ln84_fu_249_p2 : STD_LOGIC_VECTOR (4095 downto 0);
    signal or_ln_fu_268_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln84_8_fu_275_p1 : STD_LOGIC_VECTOR (4095 downto 0);
    signal lshr_ln84_8_fu_279_p2 : STD_LOGIC_VECTOR (4095 downto 0);
    signal or_ln56_7_fu_292_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln84_9_fu_299_p1 : STD_LOGIC_VECTOR (4095 downto 0);
    signal lshr_ln84_9_fu_303_p2 : STD_LOGIC_VECTOR (4095 downto 0);
    signal or_ln56_8_fu_316_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln84_10_fu_323_p1 : STD_LOGIC_VECTOR (4095 downto 0);
    signal lshr_ln84_10_fu_327_p2 : STD_LOGIC_VECTOR (4095 downto 0);
    signal or_ln56_9_fu_340_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln84_11_fu_347_p1 : STD_LOGIC_VECTOR (4095 downto 0);
    signal lshr_ln84_11_fu_351_p2 : STD_LOGIC_VECTOR (4095 downto 0);
    signal or_ln56_s_fu_364_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln84_12_fu_371_p1 : STD_LOGIC_VECTOR (4095 downto 0);
    signal lshr_ln84_12_fu_375_p2 : STD_LOGIC_VECTOR (4095 downto 0);
    signal or_ln56_1_fu_388_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln84_13_fu_395_p1 : STD_LOGIC_VECTOR (4095 downto 0);
    signal lshr_ln84_13_fu_399_p2 : STD_LOGIC_VECTOR (4095 downto 0);
    signal or_ln56_2_fu_408_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln84_14_fu_415_p1 : STD_LOGIC_VECTOR (4095 downto 0);
    signal lshr_ln84_14_fu_419_p2 : STD_LOGIC_VECTOR (4095 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component accelerator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter45_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln81_fu_216_p2 = ap_const_lv1_0))) then 
                    i_fu_68 <= i_20_fu_222_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_68 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                C_0_addr_reg_498 <= zext_ln81_fu_228_p1(3 - 1 downto 0);
                C_0_addr_reg_498_pp0_iter1_reg <= C_0_addr_reg_498;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_504 <= empty_fu_233_p1;
                empty_reg_504_pp0_iter1_reg <= empty_reg_504;
                trunc_ln84_reg_515 <= trunc_ln84_fu_255_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                C_0_addr_reg_498_pp0_iter10_reg <= C_0_addr_reg_498_pp0_iter9_reg;
                C_0_addr_reg_498_pp0_iter11_reg <= C_0_addr_reg_498_pp0_iter10_reg;
                C_0_addr_reg_498_pp0_iter12_reg <= C_0_addr_reg_498_pp0_iter11_reg;
                C_0_addr_reg_498_pp0_iter13_reg <= C_0_addr_reg_498_pp0_iter12_reg;
                C_0_addr_reg_498_pp0_iter14_reg <= C_0_addr_reg_498_pp0_iter13_reg;
                C_0_addr_reg_498_pp0_iter15_reg <= C_0_addr_reg_498_pp0_iter14_reg;
                C_0_addr_reg_498_pp0_iter16_reg <= C_0_addr_reg_498_pp0_iter15_reg;
                C_0_addr_reg_498_pp0_iter17_reg <= C_0_addr_reg_498_pp0_iter16_reg;
                C_0_addr_reg_498_pp0_iter18_reg <= C_0_addr_reg_498_pp0_iter17_reg;
                C_0_addr_reg_498_pp0_iter19_reg <= C_0_addr_reg_498_pp0_iter18_reg;
                C_0_addr_reg_498_pp0_iter20_reg <= C_0_addr_reg_498_pp0_iter19_reg;
                C_0_addr_reg_498_pp0_iter21_reg <= C_0_addr_reg_498_pp0_iter20_reg;
                C_0_addr_reg_498_pp0_iter22_reg <= C_0_addr_reg_498_pp0_iter21_reg;
                C_0_addr_reg_498_pp0_iter23_reg <= C_0_addr_reg_498_pp0_iter22_reg;
                C_0_addr_reg_498_pp0_iter24_reg <= C_0_addr_reg_498_pp0_iter23_reg;
                C_0_addr_reg_498_pp0_iter25_reg <= C_0_addr_reg_498_pp0_iter24_reg;
                C_0_addr_reg_498_pp0_iter26_reg <= C_0_addr_reg_498_pp0_iter25_reg;
                C_0_addr_reg_498_pp0_iter27_reg <= C_0_addr_reg_498_pp0_iter26_reg;
                C_0_addr_reg_498_pp0_iter28_reg <= C_0_addr_reg_498_pp0_iter27_reg;
                C_0_addr_reg_498_pp0_iter29_reg <= C_0_addr_reg_498_pp0_iter28_reg;
                C_0_addr_reg_498_pp0_iter2_reg <= C_0_addr_reg_498_pp0_iter1_reg;
                C_0_addr_reg_498_pp0_iter30_reg <= C_0_addr_reg_498_pp0_iter29_reg;
                C_0_addr_reg_498_pp0_iter31_reg <= C_0_addr_reg_498_pp0_iter30_reg;
                C_0_addr_reg_498_pp0_iter32_reg <= C_0_addr_reg_498_pp0_iter31_reg;
                C_0_addr_reg_498_pp0_iter33_reg <= C_0_addr_reg_498_pp0_iter32_reg;
                C_0_addr_reg_498_pp0_iter34_reg <= C_0_addr_reg_498_pp0_iter33_reg;
                C_0_addr_reg_498_pp0_iter35_reg <= C_0_addr_reg_498_pp0_iter34_reg;
                C_0_addr_reg_498_pp0_iter36_reg <= C_0_addr_reg_498_pp0_iter35_reg;
                C_0_addr_reg_498_pp0_iter37_reg <= C_0_addr_reg_498_pp0_iter36_reg;
                C_0_addr_reg_498_pp0_iter38_reg <= C_0_addr_reg_498_pp0_iter37_reg;
                C_0_addr_reg_498_pp0_iter39_reg <= C_0_addr_reg_498_pp0_iter38_reg;
                C_0_addr_reg_498_pp0_iter3_reg <= C_0_addr_reg_498_pp0_iter2_reg;
                C_0_addr_reg_498_pp0_iter40_reg <= C_0_addr_reg_498_pp0_iter39_reg;
                C_0_addr_reg_498_pp0_iter41_reg <= C_0_addr_reg_498_pp0_iter40_reg;
                C_0_addr_reg_498_pp0_iter42_reg <= C_0_addr_reg_498_pp0_iter41_reg;
                C_0_addr_reg_498_pp0_iter43_reg <= C_0_addr_reg_498_pp0_iter42_reg;
                C_0_addr_reg_498_pp0_iter44_reg <= C_0_addr_reg_498_pp0_iter43_reg;
                C_0_addr_reg_498_pp0_iter45_reg <= C_0_addr_reg_498_pp0_iter44_reg;
                C_0_addr_reg_498_pp0_iter4_reg <= C_0_addr_reg_498_pp0_iter3_reg;
                C_0_addr_reg_498_pp0_iter5_reg <= C_0_addr_reg_498_pp0_iter4_reg;
                C_0_addr_reg_498_pp0_iter6_reg <= C_0_addr_reg_498_pp0_iter5_reg;
                C_0_addr_reg_498_pp0_iter7_reg <= C_0_addr_reg_498_pp0_iter6_reg;
                C_0_addr_reg_498_pp0_iter8_reg <= C_0_addr_reg_498_pp0_iter7_reg;
                C_0_addr_reg_498_pp0_iter9_reg <= C_0_addr_reg_498_pp0_iter8_reg;
                add_i1_reg_550 <= grp_fu_2572_p_dout0;
                add_i29_1_reg_570 <= grp_fu_2564_p_dout0;
                add_i29_2_reg_590 <= grp_fu_2576_p_dout0;
                add_i29_3_reg_610 <= grp_fu_2580_p_dout0;
                add_i29_4_reg_635 <= grp_fu_2584_p_dout0;
                add_i29_5_reg_655 <= grp_fu_2588_p_dout0;
                add_i29_6_reg_670 <= grp_fu_2592_p_dout0;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_reg_504_pp0_iter10_reg <= empty_reg_504_pp0_iter9_reg;
                empty_reg_504_pp0_iter11_reg <= empty_reg_504_pp0_iter10_reg;
                empty_reg_504_pp0_iter12_reg <= empty_reg_504_pp0_iter11_reg;
                empty_reg_504_pp0_iter13_reg <= empty_reg_504_pp0_iter12_reg;
                empty_reg_504_pp0_iter14_reg <= empty_reg_504_pp0_iter13_reg;
                empty_reg_504_pp0_iter15_reg <= empty_reg_504_pp0_iter14_reg;
                empty_reg_504_pp0_iter16_reg <= empty_reg_504_pp0_iter15_reg;
                empty_reg_504_pp0_iter17_reg <= empty_reg_504_pp0_iter16_reg;
                empty_reg_504_pp0_iter18_reg <= empty_reg_504_pp0_iter17_reg;
                empty_reg_504_pp0_iter19_reg <= empty_reg_504_pp0_iter18_reg;
                empty_reg_504_pp0_iter20_reg <= empty_reg_504_pp0_iter19_reg;
                empty_reg_504_pp0_iter21_reg <= empty_reg_504_pp0_iter20_reg;
                empty_reg_504_pp0_iter22_reg <= empty_reg_504_pp0_iter21_reg;
                empty_reg_504_pp0_iter23_reg <= empty_reg_504_pp0_iter22_reg;
                empty_reg_504_pp0_iter24_reg <= empty_reg_504_pp0_iter23_reg;
                empty_reg_504_pp0_iter25_reg <= empty_reg_504_pp0_iter24_reg;
                empty_reg_504_pp0_iter26_reg <= empty_reg_504_pp0_iter25_reg;
                empty_reg_504_pp0_iter27_reg <= empty_reg_504_pp0_iter26_reg;
                empty_reg_504_pp0_iter28_reg <= empty_reg_504_pp0_iter27_reg;
                empty_reg_504_pp0_iter29_reg <= empty_reg_504_pp0_iter28_reg;
                empty_reg_504_pp0_iter2_reg <= empty_reg_504_pp0_iter1_reg;
                empty_reg_504_pp0_iter3_reg <= empty_reg_504_pp0_iter2_reg;
                empty_reg_504_pp0_iter4_reg <= empty_reg_504_pp0_iter3_reg;
                empty_reg_504_pp0_iter5_reg <= empty_reg_504_pp0_iter4_reg;
                empty_reg_504_pp0_iter6_reg <= empty_reg_504_pp0_iter5_reg;
                empty_reg_504_pp0_iter7_reg <= empty_reg_504_pp0_iter6_reg;
                empty_reg_504_pp0_iter8_reg <= empty_reg_504_pp0_iter7_reg;
                empty_reg_504_pp0_iter9_reg <= empty_reg_504_pp0_iter8_reg;
                mul_i1_reg_530 <= grp_fu_2568_p_dout0;
                mul_i28_1_reg_555 <= grp_fu_2600_p_dout0;
                mul_i28_2_reg_575 <= grp_fu_2604_p_dout0;
                mul_i28_3_reg_595 <= grp_fu_2608_p_dout0;
                mul_i28_4_reg_615 <= grp_fu_2612_p_dout0;
                mul_i28_5_reg_640 <= grp_fu_2616_p_dout0;
                mul_i28_6_reg_660 <= grp_fu_2620_p_dout0;
                mul_i28_7_reg_665 <= grp_fu_2624_p_dout0;
                mul_i28_7_reg_665_pp0_iter37_reg <= mul_i28_7_reg_665;
                mul_i28_7_reg_665_pp0_iter38_reg <= mul_i28_7_reg_665_pp0_iter37_reg;
                mul_i28_7_reg_665_pp0_iter39_reg <= mul_i28_7_reg_665_pp0_iter38_reg;
                mul_i28_7_reg_665_pp0_iter40_reg <= mul_i28_7_reg_665_pp0_iter39_reg;
                mul_i28_7_reg_665_pp0_iter41_reg <= mul_i28_7_reg_665_pp0_iter40_reg;
                trunc_ln84_10_reg_565 <= trunc_ln84_10_fu_332_p1;
                trunc_ln84_11_reg_585 <= trunc_ln84_11_fu_356_p1;
                trunc_ln84_12_reg_605 <= trunc_ln84_12_fu_380_p1;
                trunc_ln84_13_reg_625 <= trunc_ln84_13_fu_404_p1;
                trunc_ln84_14_reg_630 <= trunc_ln84_14_fu_424_p1;
                trunc_ln84_8_reg_525 <= trunc_ln84_8_fu_284_p1;
                trunc_ln84_9_reg_545 <= trunc_ln84_9_fu_308_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    C_0_address0 <= C_0_addr_reg_498_pp0_iter45_reg;
    C_0_address1 <= C_0_addr_reg_498_pp0_iter5_reg;
    C_0_ce0 <= C_0_ce0_local;

    C_0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter46, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1))) then 
            C_0_ce0_local <= ap_const_logic_1;
        else 
            C_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    C_0_ce1 <= C_0_ce1_local;

    C_0_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            C_0_ce1_local <= ap_const_logic_1;
        else 
            C_0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    C_0_d0 <= grp_fu_2596_p_dout0;
    C_0_we0 <= C_0_we0_local;

    C_0_we0_local_assign_proc : process(ap_enable_reg_pp0_iter46, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1))) then 
            C_0_we0_local <= ap_const_logic_1;
        else 
            C_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln81_fu_216_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln81_fu_216_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter45_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter45_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_19_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_68, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_19 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_19 <= i_fu_68;
        end if; 
    end process;

    bitcast_ln84_141_fu_288_p1 <= trunc_ln84_8_reg_525;
    bitcast_ln84_142_fu_312_p1 <= trunc_ln84_9_reg_545;
    bitcast_ln84_143_fu_336_p1 <= trunc_ln84_10_reg_565;
    bitcast_ln84_144_fu_360_p1 <= trunc_ln84_11_reg_585;
    bitcast_ln84_145_fu_384_p1 <= trunc_ln84_12_reg_605;
    bitcast_ln84_146_fu_428_p1 <= trunc_ln84_13_reg_625;
    bitcast_ln84_147_fu_432_p1 <= trunc_ln84_14_reg_630;
    bitcast_ln84_fu_264_p1 <= trunc_ln84_reg_515;
    empty_fu_233_p1 <= ap_sig_allocacmp_i_19(3 - 1 downto 0);
    grp_fu_2564_p_ce <= ap_const_logic_1;
    grp_fu_2564_p_din0 <= add_i1_reg_550;
    grp_fu_2564_p_din1 <= mul_i28_1_reg_555;
    grp_fu_2564_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_2568_p_ce <= ap_const_logic_1;
    grp_fu_2568_p_din0 <= bitcast_ln84_fu_264_p1;
    grp_fu_2568_p_din1 <= p_read10;
    grp_fu_2572_p_ce <= ap_const_logic_1;
    grp_fu_2572_p_din0 <= C_0_q1;
    grp_fu_2572_p_din1 <= mul_i1_reg_530;
    grp_fu_2572_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_2576_p_ce <= ap_const_logic_1;
    grp_fu_2576_p_din0 <= add_i29_1_reg_570;
    grp_fu_2576_p_din1 <= mul_i28_2_reg_575;
    grp_fu_2576_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_2580_p_ce <= ap_const_logic_1;
    grp_fu_2580_p_din0 <= add_i29_2_reg_590;
    grp_fu_2580_p_din1 <= mul_i28_3_reg_595;
    grp_fu_2580_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_2584_p_ce <= ap_const_logic_1;
    grp_fu_2584_p_din0 <= add_i29_3_reg_610;
    grp_fu_2584_p_din1 <= mul_i28_4_reg_615;
    grp_fu_2584_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_2588_p_ce <= ap_const_logic_1;
    grp_fu_2588_p_din0 <= add_i29_4_reg_635;
    grp_fu_2588_p_din1 <= mul_i28_5_reg_640;
    grp_fu_2588_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_2592_p_ce <= ap_const_logic_1;
    grp_fu_2592_p_din0 <= add_i29_5_reg_655;
    grp_fu_2592_p_din1 <= mul_i28_6_reg_660;
    grp_fu_2592_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_2596_p_ce <= ap_const_logic_1;
    grp_fu_2596_p_din0 <= add_i29_6_reg_670;
    grp_fu_2596_p_din1 <= mul_i28_7_reg_665_pp0_iter41_reg;
    grp_fu_2596_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_2600_p_ce <= ap_const_logic_1;
    grp_fu_2600_p_din0 <= bitcast_ln84_141_fu_288_p1;
    grp_fu_2600_p_din1 <= p_read11;
    grp_fu_2604_p_ce <= ap_const_logic_1;
    grp_fu_2604_p_din0 <= bitcast_ln84_142_fu_312_p1;
    grp_fu_2604_p_din1 <= p_read12;
    grp_fu_2608_p_ce <= ap_const_logic_1;
    grp_fu_2608_p_din0 <= bitcast_ln84_143_fu_336_p1;
    grp_fu_2608_p_din1 <= p_read13;
    grp_fu_2612_p_ce <= ap_const_logic_1;
    grp_fu_2612_p_din0 <= bitcast_ln84_144_fu_360_p1;
    grp_fu_2612_p_din1 <= p_read14;
    grp_fu_2616_p_ce <= ap_const_logic_1;
    grp_fu_2616_p_din0 <= bitcast_ln84_145_fu_384_p1;
    grp_fu_2616_p_din1 <= p_read15;
    grp_fu_2620_p_ce <= ap_const_logic_1;
    grp_fu_2620_p_din0 <= bitcast_ln84_146_fu_428_p1;
    grp_fu_2620_p_din1 <= p_read16;
    grp_fu_2624_p_ce <= ap_const_logic_1;
    grp_fu_2624_p_din0 <= bitcast_ln84_147_fu_432_p1;
    grp_fu_2624_p_din1 <= p_read17;
    i_20_fu_222_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_19) + unsigned(ap_const_lv4_1));
    icmp_ln81_fu_216_p2 <= "1" when (ap_sig_allocacmp_i_19 = ap_const_lv4_8) else "0";
    lshr_ln84_10_fu_327_p2 <= std_logic_vector(shift_right(unsigned(weights_val),to_integer(unsigned('0' & zext_ln84_10_fu_323_p1(31-1 downto 0)))));
    lshr_ln84_11_fu_351_p2 <= std_logic_vector(shift_right(unsigned(weights_val),to_integer(unsigned('0' & zext_ln84_11_fu_347_p1(31-1 downto 0)))));
    lshr_ln84_12_fu_375_p2 <= std_logic_vector(shift_right(unsigned(weights_val),to_integer(unsigned('0' & zext_ln84_12_fu_371_p1(31-1 downto 0)))));
    lshr_ln84_13_fu_399_p2 <= std_logic_vector(shift_right(unsigned(weights_val),to_integer(unsigned('0' & zext_ln84_13_fu_395_p1(31-1 downto 0)))));
    lshr_ln84_14_fu_419_p2 <= std_logic_vector(shift_right(unsigned(weights_val),to_integer(unsigned('0' & zext_ln84_14_fu_415_p1(31-1 downto 0)))));
    lshr_ln84_8_fu_279_p2 <= std_logic_vector(shift_right(unsigned(weights_val),to_integer(unsigned('0' & zext_ln84_8_fu_275_p1(31-1 downto 0)))));
    lshr_ln84_9_fu_303_p2 <= std_logic_vector(shift_right(unsigned(weights_val),to_integer(unsigned('0' & zext_ln84_9_fu_299_p1(31-1 downto 0)))));
    lshr_ln84_fu_249_p2 <= std_logic_vector(shift_right(unsigned(weights_val),to_integer(unsigned('0' & zext_ln84_fu_245_p1(31-1 downto 0)))));
    or_ln56_1_fu_388_p3 <= (empty_reg_504_pp0_iter29_reg & ap_const_lv9_180);
    or_ln56_2_fu_408_p3 <= (empty_reg_504_pp0_iter29_reg & ap_const_lv9_1C0);
    or_ln56_7_fu_292_p3 <= (empty_reg_504_pp0_iter9_reg & ap_const_lv9_80);
    or_ln56_8_fu_316_p3 <= (empty_reg_504_pp0_iter14_reg & ap_const_lv9_C0);
    or_ln56_9_fu_340_p3 <= (empty_reg_504_pp0_iter19_reg & ap_const_lv9_100);
    or_ln56_s_fu_364_p3 <= (empty_reg_504_pp0_iter24_reg & ap_const_lv9_140);
    or_ln_fu_268_p3 <= (empty_reg_504_pp0_iter4_reg & ap_const_lv9_40);
    tmp_s_fu_237_p3 <= (empty_fu_233_p1 & ap_const_lv9_0);
    trunc_ln84_10_fu_332_p1 <= lshr_ln84_10_fu_327_p2(64 - 1 downto 0);
    trunc_ln84_11_fu_356_p1 <= lshr_ln84_11_fu_351_p2(64 - 1 downto 0);
    trunc_ln84_12_fu_380_p1 <= lshr_ln84_12_fu_375_p2(64 - 1 downto 0);
    trunc_ln84_13_fu_404_p1 <= lshr_ln84_13_fu_399_p2(64 - 1 downto 0);
    trunc_ln84_14_fu_424_p1 <= lshr_ln84_14_fu_419_p2(64 - 1 downto 0);
    trunc_ln84_8_fu_284_p1 <= lshr_ln84_8_fu_279_p2(64 - 1 downto 0);
    trunc_ln84_9_fu_308_p1 <= lshr_ln84_9_fu_303_p2(64 - 1 downto 0);
    trunc_ln84_fu_255_p1 <= lshr_ln84_fu_249_p2(64 - 1 downto 0);
    zext_ln81_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_19),64));
    zext_ln84_10_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln56_8_fu_316_p3),4096));
    zext_ln84_11_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln56_9_fu_340_p3),4096));
    zext_ln84_12_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln56_s_fu_364_p3),4096));
    zext_ln84_13_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln56_1_fu_388_p3),4096));
    zext_ln84_14_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln56_2_fu_408_p3),4096));
    zext_ln84_8_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_268_p3),4096));
    zext_ln84_9_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln56_7_fu_292_p3),4096));
    zext_ln84_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_237_p3),4096));
end behav;
