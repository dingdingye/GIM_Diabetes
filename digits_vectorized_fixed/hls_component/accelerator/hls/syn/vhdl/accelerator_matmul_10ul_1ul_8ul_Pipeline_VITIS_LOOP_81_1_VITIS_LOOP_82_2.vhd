-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_matmul_10ul_1ul_8ul_Pipeline_VITIS_LOOP_81_1_VITIS_LOOP_82_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
    A_0_read_38 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_0_read_39 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_0_read_40 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_0_read_41 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_0_read_42 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_0_read_43 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_0_read_44 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_0_read_45 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_0_read_46 : IN STD_LOGIC_VECTOR (63 downto 0);
    agg_result_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_0_ce0 : OUT STD_LOGIC;
    agg_result_0_we0 : OUT STD_LOGIC;
    agg_result_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_0_ce1 : OUT STD_LOGIC;
    agg_result_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    agg_result_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_1_ce0 : OUT STD_LOGIC;
    agg_result_1_we0 : OUT STD_LOGIC;
    agg_result_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_1_ce1 : OUT STD_LOGIC;
    agg_result_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    agg_result_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_2_ce0 : OUT STD_LOGIC;
    agg_result_2_we0 : OUT STD_LOGIC;
    agg_result_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_2_ce1 : OUT STD_LOGIC;
    agg_result_2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    agg_result_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_3_ce0 : OUT STD_LOGIC;
    agg_result_3_we0 : OUT STD_LOGIC;
    agg_result_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_3_ce1 : OUT STD_LOGIC;
    agg_result_3_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    agg_result_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_4_ce0 : OUT STD_LOGIC;
    agg_result_4_we0 : OUT STD_LOGIC;
    agg_result_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_4_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_4_ce1 : OUT STD_LOGIC;
    agg_result_4_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    agg_result_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_5_ce0 : OUT STD_LOGIC;
    agg_result_5_we0 : OUT STD_LOGIC;
    agg_result_5_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_5_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_5_ce1 : OUT STD_LOGIC;
    agg_result_5_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    agg_result_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_6_ce0 : OUT STD_LOGIC;
    agg_result_6_we0 : OUT STD_LOGIC;
    agg_result_6_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_6_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_6_ce1 : OUT STD_LOGIC;
    agg_result_6_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    agg_result_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_7_ce0 : OUT STD_LOGIC;
    agg_result_7_we0 : OUT STD_LOGIC;
    agg_result_7_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_7_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    agg_result_7_ce1 : OUT STD_LOGIC;
    agg_result_7_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1024_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1024_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1024_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1024_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1024_p_ce : OUT STD_LOGIC;
    grp_fu_1028_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1028_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1028_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1028_p_ce : OUT STD_LOGIC );
end;


architecture behav of accelerator_matmul_10ul_1ul_8ul_Pipeline_VITIS_LOOP_81_1_VITIS_LOOP_82_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln81_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln81_4_fu_402_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln81_4_reg_603 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln81_4_reg_603_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln81_4_reg_603_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln81_4_reg_603_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln81_4_reg_603_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln82_fu_415_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln82_reg_609_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_440_p23 : STD_LOGIC_VECTOR (63 downto 0);
    signal agg_result_0_addr_reg_629 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_0_addr_reg_629_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_0_addr_reg_629_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_0_addr_reg_629_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_0_addr_reg_629_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_0_addr_reg_629_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_1_addr_reg_635 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_1_addr_reg_635_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_1_addr_reg_635_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_1_addr_reg_635_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_1_addr_reg_635_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_1_addr_reg_635_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_2_addr_reg_641 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_2_addr_reg_641_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_2_addr_reg_641_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_2_addr_reg_641_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_2_addr_reg_641_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_2_addr_reg_641_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_3_addr_reg_647 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_3_addr_reg_647_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_3_addr_reg_647_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_3_addr_reg_647_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_3_addr_reg_647_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_3_addr_reg_647_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_4_addr_reg_653 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_4_addr_reg_653_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_4_addr_reg_653_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_4_addr_reg_653_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_4_addr_reg_653_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_4_addr_reg_653_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_5_addr_reg_659 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_5_addr_reg_659_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_5_addr_reg_659_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_5_addr_reg_659_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_5_addr_reg_659_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_5_addr_reg_659_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_6_addr_reg_665 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_6_addr_reg_665_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_6_addr_reg_665_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_6_addr_reg_665_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_6_addr_reg_665_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_6_addr_reg_665_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_7_addr_reg_671 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_7_addr_reg_671_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_7_addr_reg_671_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_7_addr_reg_671_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_7_addr_reg_671_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_7_addr_reg_671_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_reg_677 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_489_p19 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_682 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln81_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_4_fu_108 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal j_fu_419_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_4_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_03_fu_112 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_sig_allocacmp_i_03_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_116 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln81_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal B_0_ce0_local : STD_LOGIC;
    signal agg_result_0_ce1_local : STD_LOGIC;
    signal agg_result_0_we0_local : STD_LOGIC;
    signal agg_result_0_ce0_local : STD_LOGIC;
    signal agg_result_1_ce1_local : STD_LOGIC;
    signal agg_result_1_we0_local : STD_LOGIC;
    signal agg_result_1_ce0_local : STD_LOGIC;
    signal agg_result_2_ce1_local : STD_LOGIC;
    signal agg_result_2_we0_local : STD_LOGIC;
    signal agg_result_2_ce0_local : STD_LOGIC;
    signal agg_result_3_ce1_local : STD_LOGIC;
    signal agg_result_3_we0_local : STD_LOGIC;
    signal agg_result_3_ce0_local : STD_LOGIC;
    signal agg_result_4_ce1_local : STD_LOGIC;
    signal agg_result_4_we0_local : STD_LOGIC;
    signal agg_result_4_ce0_local : STD_LOGIC;
    signal agg_result_5_ce1_local : STD_LOGIC;
    signal agg_result_5_we0_local : STD_LOGIC;
    signal agg_result_5_ce0_local : STD_LOGIC;
    signal agg_result_6_ce1_local : STD_LOGIC;
    signal agg_result_6_we0_local : STD_LOGIC;
    signal agg_result_6_ce0_local : STD_LOGIC;
    signal agg_result_7_ce1_local : STD_LOGIC;
    signal agg_result_7_we0_local : STD_LOGIC;
    signal agg_result_7_ce0_local : STD_LOGIC;
    signal icmp_ln82_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_382_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln81_fu_394_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_440_p21 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_489_p17 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_440_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_440_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_440_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_440_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_440_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_440_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_440_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_440_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_440_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_440_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_489_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_489_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_489_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_489_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_489_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_489_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_489_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_489_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_sparsemux_21_4_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_sparsemux_17_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_21_4_64_1_1_U3413 : component accelerator_sparsemux_21_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 64,
        CASE1 => "0001",
        din1_WIDTH => 64,
        CASE2 => "0010",
        din2_WIDTH => 64,
        CASE3 => "0011",
        din3_WIDTH => 64,
        CASE4 => "0100",
        din4_WIDTH => 64,
        CASE5 => "0101",
        din5_WIDTH => 64,
        CASE6 => "0110",
        din6_WIDTH => 64,
        CASE7 => "0111",
        din7_WIDTH => 64,
        CASE8 => "1000",
        din8_WIDTH => 64,
        CASE9 => "1001",
        din9_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => A_0_read,
        din1 => A_0_read_38,
        din2 => A_0_read_39,
        din3 => A_0_read_40,
        din4 => A_0_read_41,
        din5 => A_0_read_42,
        din6 => A_0_read_43,
        din7 => A_0_read_44,
        din8 => A_0_read_45,
        din9 => A_0_read_46,
        def => tmp_fu_440_p21,
        sel => select_ln81_4_reg_603,
        dout => tmp_fu_440_p23);

    sparsemux_17_3_64_1_1_U3414 : component accelerator_sparsemux_17_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 64,
        CASE1 => "001",
        din1_WIDTH => 64,
        CASE2 => "010",
        din2_WIDTH => 64,
        CASE3 => "011",
        din3_WIDTH => 64,
        CASE4 => "100",
        din4_WIDTH => 64,
        CASE5 => "101",
        din5_WIDTH => 64,
        CASE6 => "110",
        din6_WIDTH => 64,
        CASE7 => "111",
        din7_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => agg_result_0_q1,
        din1 => agg_result_1_q1,
        din2 => agg_result_2_q1,
        din3 => agg_result_3_q1,
        din4 => agg_result_4_q1,
        din5 => agg_result_5_q1,
        din6 => agg_result_6_q1,
        din7 => agg_result_7_q1,
        def => tmp_9_fu_489_p17,
        sel => trunc_ln82_reg_609_pp0_iter5_reg,
        dout => tmp_9_fu_489_p19);

    flow_control_loop_pipe_sequential_init_U : component accelerator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_03_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln81_fu_364_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_03_fu_112 <= select_ln81_4_fu_402_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_03_fu_112 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln81_fu_364_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_116 <= add_ln81_fu_370_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_116 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_4_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln81_fu_364_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_4_fu_108 <= j_fu_419_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_4_fu_108 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                agg_result_0_addr_reg_629 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
                agg_result_0_addr_reg_629_pp0_iter10_reg <= agg_result_0_addr_reg_629_pp0_iter9_reg;
                agg_result_0_addr_reg_629_pp0_iter6_reg <= agg_result_0_addr_reg_629;
                agg_result_0_addr_reg_629_pp0_iter7_reg <= agg_result_0_addr_reg_629_pp0_iter6_reg;
                agg_result_0_addr_reg_629_pp0_iter8_reg <= agg_result_0_addr_reg_629_pp0_iter7_reg;
                agg_result_0_addr_reg_629_pp0_iter9_reg <= agg_result_0_addr_reg_629_pp0_iter8_reg;
                agg_result_1_addr_reg_635 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
                agg_result_1_addr_reg_635_pp0_iter10_reg <= agg_result_1_addr_reg_635_pp0_iter9_reg;
                agg_result_1_addr_reg_635_pp0_iter6_reg <= agg_result_1_addr_reg_635;
                agg_result_1_addr_reg_635_pp0_iter7_reg <= agg_result_1_addr_reg_635_pp0_iter6_reg;
                agg_result_1_addr_reg_635_pp0_iter8_reg <= agg_result_1_addr_reg_635_pp0_iter7_reg;
                agg_result_1_addr_reg_635_pp0_iter9_reg <= agg_result_1_addr_reg_635_pp0_iter8_reg;
                agg_result_2_addr_reg_641 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
                agg_result_2_addr_reg_641_pp0_iter10_reg <= agg_result_2_addr_reg_641_pp0_iter9_reg;
                agg_result_2_addr_reg_641_pp0_iter6_reg <= agg_result_2_addr_reg_641;
                agg_result_2_addr_reg_641_pp0_iter7_reg <= agg_result_2_addr_reg_641_pp0_iter6_reg;
                agg_result_2_addr_reg_641_pp0_iter8_reg <= agg_result_2_addr_reg_641_pp0_iter7_reg;
                agg_result_2_addr_reg_641_pp0_iter9_reg <= agg_result_2_addr_reg_641_pp0_iter8_reg;
                agg_result_3_addr_reg_647 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
                agg_result_3_addr_reg_647_pp0_iter10_reg <= agg_result_3_addr_reg_647_pp0_iter9_reg;
                agg_result_3_addr_reg_647_pp0_iter6_reg <= agg_result_3_addr_reg_647;
                agg_result_3_addr_reg_647_pp0_iter7_reg <= agg_result_3_addr_reg_647_pp0_iter6_reg;
                agg_result_3_addr_reg_647_pp0_iter8_reg <= agg_result_3_addr_reg_647_pp0_iter7_reg;
                agg_result_3_addr_reg_647_pp0_iter9_reg <= agg_result_3_addr_reg_647_pp0_iter8_reg;
                agg_result_4_addr_reg_653 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
                agg_result_4_addr_reg_653_pp0_iter10_reg <= agg_result_4_addr_reg_653_pp0_iter9_reg;
                agg_result_4_addr_reg_653_pp0_iter6_reg <= agg_result_4_addr_reg_653;
                agg_result_4_addr_reg_653_pp0_iter7_reg <= agg_result_4_addr_reg_653_pp0_iter6_reg;
                agg_result_4_addr_reg_653_pp0_iter8_reg <= agg_result_4_addr_reg_653_pp0_iter7_reg;
                agg_result_4_addr_reg_653_pp0_iter9_reg <= agg_result_4_addr_reg_653_pp0_iter8_reg;
                agg_result_5_addr_reg_659 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
                agg_result_5_addr_reg_659_pp0_iter10_reg <= agg_result_5_addr_reg_659_pp0_iter9_reg;
                agg_result_5_addr_reg_659_pp0_iter6_reg <= agg_result_5_addr_reg_659;
                agg_result_5_addr_reg_659_pp0_iter7_reg <= agg_result_5_addr_reg_659_pp0_iter6_reg;
                agg_result_5_addr_reg_659_pp0_iter8_reg <= agg_result_5_addr_reg_659_pp0_iter7_reg;
                agg_result_5_addr_reg_659_pp0_iter9_reg <= agg_result_5_addr_reg_659_pp0_iter8_reg;
                agg_result_6_addr_reg_665 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
                agg_result_6_addr_reg_665_pp0_iter10_reg <= agg_result_6_addr_reg_665_pp0_iter9_reg;
                agg_result_6_addr_reg_665_pp0_iter6_reg <= agg_result_6_addr_reg_665;
                agg_result_6_addr_reg_665_pp0_iter7_reg <= agg_result_6_addr_reg_665_pp0_iter6_reg;
                agg_result_6_addr_reg_665_pp0_iter8_reg <= agg_result_6_addr_reg_665_pp0_iter7_reg;
                agg_result_6_addr_reg_665_pp0_iter9_reg <= agg_result_6_addr_reg_665_pp0_iter8_reg;
                agg_result_7_addr_reg_671 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
                agg_result_7_addr_reg_671_pp0_iter10_reg <= agg_result_7_addr_reg_671_pp0_iter9_reg;
                agg_result_7_addr_reg_671_pp0_iter6_reg <= agg_result_7_addr_reg_671;
                agg_result_7_addr_reg_671_pp0_iter7_reg <= agg_result_7_addr_reg_671_pp0_iter6_reg;
                agg_result_7_addr_reg_671_pp0_iter8_reg <= agg_result_7_addr_reg_671_pp0_iter7_reg;
                agg_result_7_addr_reg_671_pp0_iter9_reg <= agg_result_7_addr_reg_671_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                mul_reg_677 <= grp_fu_1028_p_dout0;
                select_ln81_4_reg_603_pp0_iter2_reg <= select_ln81_4_reg_603_pp0_iter1_reg;
                select_ln81_4_reg_603_pp0_iter3_reg <= select_ln81_4_reg_603_pp0_iter2_reg;
                select_ln81_4_reg_603_pp0_iter4_reg <= select_ln81_4_reg_603_pp0_iter3_reg;
                tmp_9_reg_682 <= tmp_9_fu_489_p19;
                trunc_ln82_reg_609_pp0_iter10_reg <= trunc_ln82_reg_609_pp0_iter9_reg;
                trunc_ln82_reg_609_pp0_iter2_reg <= trunc_ln82_reg_609_pp0_iter1_reg;
                trunc_ln82_reg_609_pp0_iter3_reg <= trunc_ln82_reg_609_pp0_iter2_reg;
                trunc_ln82_reg_609_pp0_iter4_reg <= trunc_ln82_reg_609_pp0_iter3_reg;
                trunc_ln82_reg_609_pp0_iter5_reg <= trunc_ln82_reg_609_pp0_iter4_reg;
                trunc_ln82_reg_609_pp0_iter6_reg <= trunc_ln82_reg_609_pp0_iter5_reg;
                trunc_ln82_reg_609_pp0_iter7_reg <= trunc_ln82_reg_609_pp0_iter6_reg;
                trunc_ln82_reg_609_pp0_iter8_reg <= trunc_ln82_reg_609_pp0_iter7_reg;
                trunc_ln82_reg_609_pp0_iter9_reg <= trunc_ln82_reg_609_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln81_4_reg_603 <= select_ln81_4_fu_402_p3;
                select_ln81_4_reg_603_pp0_iter1_reg <= select_ln81_4_reg_603;
                trunc_ln82_reg_609 <= trunc_ln82_fu_415_p1;
                trunc_ln82_reg_609_pp0_iter1_reg <= trunc_ln82_reg_609;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_0_address0 <= zext_ln82_fu_410_p1(3 - 1 downto 0);
    B_0_ce0 <= B_0_ce0_local;

    B_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_0_ce0_local <= ap_const_logic_1;
        else 
            B_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln81_fu_370_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    agg_result_0_address0 <= agg_result_0_addr_reg_629_pp0_iter10_reg;
    agg_result_0_address1 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
    agg_result_0_ce0 <= agg_result_0_ce0_local;

    agg_result_0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            agg_result_0_ce0_local <= ap_const_logic_1;
        else 
            agg_result_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_0_ce1 <= agg_result_0_ce1_local;

    agg_result_0_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            agg_result_0_ce1_local <= ap_const_logic_1;
        else 
            agg_result_0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_0_d0 <= grp_fu_1024_p_dout0;
    agg_result_0_we0 <= agg_result_0_we0_local;

    agg_result_0_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln82_reg_609_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln82_reg_609_pp0_iter10_reg = ap_const_lv3_0))) then 
            agg_result_0_we0_local <= ap_const_logic_1;
        else 
            agg_result_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_1_address0 <= agg_result_1_addr_reg_635_pp0_iter10_reg;
    agg_result_1_address1 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
    agg_result_1_ce0 <= agg_result_1_ce0_local;

    agg_result_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            agg_result_1_ce0_local <= ap_const_logic_1;
        else 
            agg_result_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_1_ce1 <= agg_result_1_ce1_local;

    agg_result_1_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            agg_result_1_ce1_local <= ap_const_logic_1;
        else 
            agg_result_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_1_d0 <= grp_fu_1024_p_dout0;
    agg_result_1_we0 <= agg_result_1_we0_local;

    agg_result_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln82_reg_609_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln82_reg_609_pp0_iter10_reg = ap_const_lv3_1))) then 
            agg_result_1_we0_local <= ap_const_logic_1;
        else 
            agg_result_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_2_address0 <= agg_result_2_addr_reg_641_pp0_iter10_reg;
    agg_result_2_address1 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
    agg_result_2_ce0 <= agg_result_2_ce0_local;

    agg_result_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            agg_result_2_ce0_local <= ap_const_logic_1;
        else 
            agg_result_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_2_ce1 <= agg_result_2_ce1_local;

    agg_result_2_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            agg_result_2_ce1_local <= ap_const_logic_1;
        else 
            agg_result_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_2_d0 <= grp_fu_1024_p_dout0;
    agg_result_2_we0 <= agg_result_2_we0_local;

    agg_result_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln82_reg_609_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln82_reg_609_pp0_iter10_reg = ap_const_lv3_2))) then 
            agg_result_2_we0_local <= ap_const_logic_1;
        else 
            agg_result_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_3_address0 <= agg_result_3_addr_reg_647_pp0_iter10_reg;
    agg_result_3_address1 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
    agg_result_3_ce0 <= agg_result_3_ce0_local;

    agg_result_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            agg_result_3_ce0_local <= ap_const_logic_1;
        else 
            agg_result_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_3_ce1 <= agg_result_3_ce1_local;

    agg_result_3_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            agg_result_3_ce1_local <= ap_const_logic_1;
        else 
            agg_result_3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_3_d0 <= grp_fu_1024_p_dout0;
    agg_result_3_we0 <= agg_result_3_we0_local;

    agg_result_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln82_reg_609_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln82_reg_609_pp0_iter10_reg = ap_const_lv3_3))) then 
            agg_result_3_we0_local <= ap_const_logic_1;
        else 
            agg_result_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_4_address0 <= agg_result_4_addr_reg_653_pp0_iter10_reg;
    agg_result_4_address1 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
    agg_result_4_ce0 <= agg_result_4_ce0_local;

    agg_result_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            agg_result_4_ce0_local <= ap_const_logic_1;
        else 
            agg_result_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_4_ce1 <= agg_result_4_ce1_local;

    agg_result_4_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            agg_result_4_ce1_local <= ap_const_logic_1;
        else 
            agg_result_4_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_4_d0 <= grp_fu_1024_p_dout0;
    agg_result_4_we0 <= agg_result_4_we0_local;

    agg_result_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln82_reg_609_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln82_reg_609_pp0_iter10_reg = ap_const_lv3_4))) then 
            agg_result_4_we0_local <= ap_const_logic_1;
        else 
            agg_result_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_5_address0 <= agg_result_5_addr_reg_659_pp0_iter10_reg;
    agg_result_5_address1 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
    agg_result_5_ce0 <= agg_result_5_ce0_local;

    agg_result_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            agg_result_5_ce0_local <= ap_const_logic_1;
        else 
            agg_result_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_5_ce1 <= agg_result_5_ce1_local;

    agg_result_5_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            agg_result_5_ce1_local <= ap_const_logic_1;
        else 
            agg_result_5_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_5_d0 <= grp_fu_1024_p_dout0;
    agg_result_5_we0 <= agg_result_5_we0_local;

    agg_result_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln82_reg_609_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln82_reg_609_pp0_iter10_reg = ap_const_lv3_5))) then 
            agg_result_5_we0_local <= ap_const_logic_1;
        else 
            agg_result_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_6_address0 <= agg_result_6_addr_reg_665_pp0_iter10_reg;
    agg_result_6_address1 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
    agg_result_6_ce0 <= agg_result_6_ce0_local;

    agg_result_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            agg_result_6_ce0_local <= ap_const_logic_1;
        else 
            agg_result_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_6_ce1 <= agg_result_6_ce1_local;

    agg_result_6_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            agg_result_6_ce1_local <= ap_const_logic_1;
        else 
            agg_result_6_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_6_d0 <= grp_fu_1024_p_dout0;
    agg_result_6_we0 <= agg_result_6_we0_local;

    agg_result_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln82_reg_609_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln82_reg_609_pp0_iter10_reg = ap_const_lv3_6))) then 
            agg_result_6_we0_local <= ap_const_logic_1;
        else 
            agg_result_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_7_address0 <= agg_result_7_addr_reg_671_pp0_iter10_reg;
    agg_result_7_address1 <= zext_ln81_fu_478_p1(4 - 1 downto 0);
    agg_result_7_ce0 <= agg_result_7_ce0_local;

    agg_result_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            agg_result_7_ce0_local <= ap_const_logic_1;
        else 
            agg_result_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_7_ce1 <= agg_result_7_ce1_local;

    agg_result_7_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            agg_result_7_ce1_local <= ap_const_logic_1;
        else 
            agg_result_7_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_7_d0 <= grp_fu_1024_p_dout0;
    agg_result_7_we0 <= agg_result_7_we0_local;

    agg_result_7_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln82_reg_609_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln82_reg_609_pp0_iter10_reg = ap_const_lv3_7))) then 
            agg_result_7_we0_local <= ap_const_logic_1;
        else 
            agg_result_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln81_fu_364_p2)
    begin
        if (((icmp_ln81_fu_364_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_03_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_03_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_03_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_03_load <= i_03_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_116)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_j_4_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_4_fu_108, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_4_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_4_load <= j_4_fu_108;
        end if; 
    end process;

    grp_fu_1024_p_ce <= ap_const_logic_1;
    grp_fu_1024_p_din0 <= tmp_9_reg_682;
    grp_fu_1024_p_din1 <= mul_reg_677;
    grp_fu_1024_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_1028_p_ce <= ap_const_logic_1;
    grp_fu_1028_p_din0 <= tmp_fu_440_p23;
    grp_fu_1028_p_din1 <= B_0_q0;
    i_fu_382_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_03_load) + unsigned(ap_const_lv4_1));
    icmp_ln81_fu_364_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_50) else "0";
    icmp_ln82_fu_388_p2 <= "1" when (ap_sig_allocacmp_j_4_load = ap_const_lv4_8) else "0";
    j_fu_419_p2 <= std_logic_vector(unsigned(select_ln81_fu_394_p3) + unsigned(ap_const_lv4_1));
    select_ln81_4_fu_402_p3 <= 
        i_fu_382_p2 when (icmp_ln82_fu_388_p2(0) = '1') else 
        ap_sig_allocacmp_i_03_load;
    select_ln81_fu_394_p3 <= 
        ap_const_lv4_0 when (icmp_ln82_fu_388_p2(0) = '1') else 
        ap_sig_allocacmp_j_4_load;
    tmp_9_fu_489_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_fu_440_p21 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln82_fu_415_p1 <= select_ln81_fu_394_p3(3 - 1 downto 0);
    zext_ln81_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln81_4_reg_603_pp0_iter4_reg),64));
    zext_ln82_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln81_fu_394_p3),64));
end behav;
