-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_forwardPropagation_64_64_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read64 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read191 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read192 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read193 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read194 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read195 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read196 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read197 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read198 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read199 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read200 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read201 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read202 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read203 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read204 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read205 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read206 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read207 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read208 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read209 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read210 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read211 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read212 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read213 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read214 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read215 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read216 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read217 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read218 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read219 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read220 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read221 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read222 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read223 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read224 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read225 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read226 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read227 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read228 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read229 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read230 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read231 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read232 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read233 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read234 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read235 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read236 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read237 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read238 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read239 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read240 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read241 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read242 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read243 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read244 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read245 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read246 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read247 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read248 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read249 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read250 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read251 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read252 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read253 : IN STD_LOGIC_VECTOR (63 downto 0);
    weights_l0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    weights_l0_ce0 : OUT STD_LOGIC;
    weights_l0_q0 : IN STD_LOGIC_VECTOR (4095 downto 0);
    biases_val : IN STD_LOGIC_VECTOR (4095 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_48 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_49 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_50 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_51 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_52 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_53 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_54 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_55 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_56 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_57 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_58 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_59 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_60 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_61 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_62 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_63 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8485_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8485_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8485_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_8485_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8485_p_ce : OUT STD_LOGIC;
    grp_fu_8489_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8489_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8489_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_8489_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_8489_p_ce : OUT STD_LOGIC );
end;


architecture behav of accelerator_forwardPropagation_64_64_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (68 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (68 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (68 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (68 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (68 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (68 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (68 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (68 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (68 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (68 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (68 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (68 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv64_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100011";
    constant ap_const_lv64_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv64_25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100101";
    constant ap_const_lv64_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100111";
    constant ap_const_lv64_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101001";
    constant ap_const_lv64_2A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_2B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101011";
    constant ap_const_lv64_2C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_2D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101101";
    constant ap_const_lv64_2E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_2F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101111";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110001";
    constant ap_const_lv64_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv64_33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110011";
    constant ap_const_lv64_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110101";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110111";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv64_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111001";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv64_3B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111011";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ref_tmp_0_load_reg_2549 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_1_reg_2554 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ref_tmp_0_load_2_reg_2569 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_3_reg_2574 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ref_tmp_0_load_4_reg_2589 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_5_reg_2594 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ref_tmp_0_load_6_reg_2609 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_7_reg_2614 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ref_tmp_0_load_8_reg_2629 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_9_reg_2634 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ref_tmp_0_load_10_reg_2649 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_11_reg_2654 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ref_tmp_0_load_12_reg_2669 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_13_reg_2674 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ref_tmp_0_load_14_reg_2689 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_15_reg_2694 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ref_tmp_0_load_16_reg_2709 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_17_reg_2714 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ref_tmp_0_load_18_reg_2729 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_19_reg_2734 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ref_tmp_0_load_20_reg_2749 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_21_reg_2754 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ref_tmp_0_load_22_reg_2769 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_23_reg_2774 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ref_tmp_0_load_24_reg_2789 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_25_reg_2794 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ref_tmp_0_load_26_reg_2809 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_27_reg_2814 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ref_tmp_0_load_28_reg_2829 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_29_reg_2834 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ref_tmp_0_load_30_reg_2849 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_31_reg_2854 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ref_tmp_0_load_32_reg_2869 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_33_reg_2874 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ref_tmp_0_load_34_reg_2889 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_35_reg_2894 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ref_tmp_0_load_36_reg_2909 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_37_reg_2914 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ref_tmp_0_load_38_reg_2929 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_39_reg_2934 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ref_tmp_0_load_40_reg_2949 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_41_reg_2954 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ref_tmp_0_load_42_reg_2969 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_43_reg_2974 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ref_tmp_0_load_44_reg_2989 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_45_reg_2994 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ref_tmp_0_load_46_reg_3009 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_47_reg_3014 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ref_tmp_0_load_48_reg_3029 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_49_reg_3034 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ref_tmp_0_load_50_reg_3049 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_51_reg_3054 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ref_tmp_0_load_52_reg_3069 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_53_reg_3074 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ref_tmp_0_load_54_reg_3089 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_55_reg_3094 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ref_tmp_0_load_56_reg_3109 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_57_reg_3114 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ref_tmp_0_load_58_reg_3129 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_59_reg_3134 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ref_tmp_0_load_60_reg_3149 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_load_61_reg_3154 : STD_LOGIC_VECTOR (63 downto 0);
    signal mid_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mid_0_ce0 : STD_LOGIC;
    signal mid_0_we0 : STD_LOGIC;
    signal mid_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mid_0_ce1 : STD_LOGIC;
    signal mid_0_we1 : STD_LOGIC;
    signal mid_0_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal net_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal net_0_ce0 : STD_LOGIC;
    signal net_0_we0 : STD_LOGIC;
    signal net_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal net_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ref_tmp_0_ce0 : STD_LOGIC;
    signal ref_tmp_0_we0 : STD_LOGIC;
    signal ref_tmp_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ref_tmp_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ref_tmp_0_ce1 : STD_LOGIC;
    signal ref_tmp_0_we1 : STD_LOGIC;
    signal ref_tmp_0_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_start : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_idle : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_ready : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_ce0 : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_we0 : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_ce1 : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_we1 : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_weights_l0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_weights_l0_ce0 : STD_LOGIC;
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_start : STD_LOGIC;
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_done : STD_LOGIC;
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_idle : STD_LOGIC;
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_ready : STD_LOGIC;
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_mid_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_mid_0_ce0 : STD_LOGIC;
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_ce0 : STD_LOGIC;
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_we0 : STD_LOGIC;
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_opcode : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_ce : STD_LOGIC;
    signal grp_relu_64_s_fu_1876_ap_start : STD_LOGIC;
    signal grp_relu_64_s_fu_1876_ap_done : STD_LOGIC;
    signal grp_relu_64_s_fu_1876_ap_idle : STD_LOGIC;
    signal grp_relu_64_s_fu_1876_ap_ready : STD_LOGIC;
    signal grp_relu_64_s_fu_1876_agg_result_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_relu_64_s_fu_1876_agg_result_0_ce0 : STD_LOGIC;
    signal grp_relu_64_s_fu_1876_agg_result_0_we0 : STD_LOGIC;
    signal grp_relu_64_s_fu_1876_agg_result_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_relu_64_s_fu_1876_agg_result_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_relu_64_s_fu_1876_agg_result_0_ce1 : STD_LOGIC;
    signal grp_relu_64_s_fu_1876_agg_result_0_we1 : STD_LOGIC;
    signal grp_relu_64_s_fu_1876_agg_result_0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_relu_64_s_fu_1876_net_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_relu_64_s_fu_1876_net_0_ce0 : STD_LOGIC;
    signal grp_relu_64_s_fu_1876_grp_fu_3163_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_relu_64_s_fu_1876_grp_fu_3163_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_relu_64_s_fu_1876_grp_fu_3163_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_relu_64_s_fu_1876_grp_fu_3163_p_ce : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_relu_64_s_fu_1876_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal net_0_we1_local : STD_LOGIC;
    signal net_0_ce1_local : STD_LOGIC;
    signal net_0_address1_local : STD_LOGIC_VECTOR (5 downto 0);
    signal net_0_we0_local : STD_LOGIC;
    signal net_0_ce0_local : STD_LOGIC;
    signal net_0_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal ref_tmp_0_ce1_local : STD_LOGIC;
    signal ref_tmp_0_address1_local : STD_LOGIC_VECTOR (5 downto 0);
    signal ref_tmp_0_ce0_local : STD_LOGIC;
    signal ref_tmp_0_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_fu_3159_ce : STD_LOGIC;
    signal grp_fu_3163_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_12_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_13_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_14_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_15_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_16_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_17_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_18_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_19_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_20_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_21_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_22_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_23_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_24_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_25_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_26_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_27_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_28_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_29_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_30_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_31_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_32_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_33_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_34_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_35_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_36_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_37_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_38_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_39_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_40_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_41_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_42_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_43_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_44_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_45_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_46_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_47_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_48_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_49_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_50_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_51_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_52_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_53_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_54_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_55_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_56_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_57_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_58_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_59_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_60_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_61_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_62_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_63_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (68 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_matmul_64ul_64ul_1ul_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        agg_result_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        agg_result_0_ce0 : OUT STD_LOGIC;
        agg_result_0_we0 : OUT STD_LOGIC;
        agg_result_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        agg_result_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        agg_result_0_ce1 : OUT STD_LOGIC;
        agg_result_0_we1 : OUT STD_LOGIC;
        agg_result_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        agg_result_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        weights_l0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        weights_l0_ce0 : OUT STD_LOGIC;
        weights_l0_q0 : IN STD_LOGIC_VECTOR (4095 downto 0);
        B_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_291 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_292 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_293 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_294 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_295 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_296 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_297 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_298 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_299 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_300 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_301 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_302 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_303 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_304 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_305 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_306 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_307 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_308 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_309 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_310 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_311 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_312 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_313 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_314 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_315 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_316 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_317 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_318 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_319 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_320 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_321 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_322 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_323 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_324 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_325 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_326 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_327 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_328 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_329 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_330 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_331 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_332 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_333 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_334 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_335 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_336 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_337 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_338 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_339 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_340 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_341 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_342 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_343 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_344 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_345 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_346 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_347 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_348 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_349 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_350 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_351 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_352 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_353 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mid_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        mid_0_ce0 : OUT STD_LOGIC;
        mid_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        biases_val : IN STD_LOGIC_VECTOR (4095 downto 0);
        net_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        net_0_ce0 : OUT STD_LOGIC;
        net_0_we0 : OUT STD_LOGIC;
        net_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_3159_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_3159_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_3159_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_3159_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_3159_p_ce : OUT STD_LOGIC );
    end component;


    component accelerator_relu_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        agg_result_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        agg_result_0_ce0 : OUT STD_LOGIC;
        agg_result_0_we0 : OUT STD_LOGIC;
        agg_result_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        agg_result_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        agg_result_0_ce1 : OUT STD_LOGIC;
        agg_result_0_we1 : OUT STD_LOGIC;
        agg_result_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        net_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        net_0_ce0 : OUT STD_LOGIC;
        net_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_3163_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_3163_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_3163_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_3163_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_3163_p_ce : OUT STD_LOGIC );
    end component;


    component accelerator_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component accelerator_forwardPropagation_64_64_s_mid_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_forwardPropagation_64_64_s_net_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mid_0_U : component accelerator_forwardPropagation_64_64_s_mid_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mid_0_address0,
        ce0 => mid_0_ce0,
        we0 => mid_0_we0,
        d0 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_d0,
        q0 => mid_0_q0,
        address1 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_address1,
        ce1 => mid_0_ce1,
        we1 => mid_0_we1,
        d1 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_d1,
        q1 => mid_0_q1);

    net_0_U : component accelerator_forwardPropagation_64_64_s_net_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => net_0_address0,
        ce0 => net_0_ce0,
        we0 => net_0_we0,
        d0 => net_0_d0,
        q0 => net_0_q0,
        address1 => net_0_address1_local,
        ce1 => net_0_ce1_local,
        we1 => net_0_we1_local,
        d1 => ap_const_lv64_0);

    ref_tmp_0_U : component accelerator_forwardPropagation_64_64_s_mid_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_tmp_0_address0,
        ce0 => ref_tmp_0_ce0,
        we0 => ref_tmp_0_we0,
        d0 => grp_relu_64_s_fu_1876_agg_result_0_d0,
        q0 => ref_tmp_0_q0,
        address1 => ref_tmp_0_address1,
        ce1 => ref_tmp_0_ce1,
        we1 => ref_tmp_0_we1,
        d1 => grp_relu_64_s_fu_1876_agg_result_0_d1,
        q1 => ref_tmp_0_q1);

    grp_matmul_64ul_64ul_1ul_s_fu_1732 : component accelerator_matmul_64ul_64ul_1ul_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_start,
        ap_done => grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done,
        ap_idle => grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_idle,
        ap_ready => grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_ready,
        agg_result_0_address0 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_address0,
        agg_result_0_ce0 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_ce0,
        agg_result_0_we0 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_we0,
        agg_result_0_d0 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_d0,
        agg_result_0_address1 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_address1,
        agg_result_0_ce1 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_ce1,
        agg_result_0_we1 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_we1,
        agg_result_0_d1 => grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_d1,
        agg_result_0_q1 => mid_0_q1,
        weights_l0_address0 => grp_matmul_64ul_64ul_1ul_s_fu_1732_weights_l0_address0,
        weights_l0_ce0 => grp_matmul_64ul_64ul_1ul_s_fu_1732_weights_l0_ce0,
        weights_l0_q0 => weights_l0_q0,
        B_0_read => p_read64,
        B_0_read_291 => p_read191,
        B_0_read_292 => p_read192,
        B_0_read_293 => p_read193,
        B_0_read_294 => p_read194,
        B_0_read_295 => p_read195,
        B_0_read_296 => p_read196,
        B_0_read_297 => p_read197,
        B_0_read_298 => p_read198,
        B_0_read_299 => p_read199,
        B_0_read_300 => p_read200,
        B_0_read_301 => p_read201,
        B_0_read_302 => p_read202,
        B_0_read_303 => p_read203,
        B_0_read_304 => p_read204,
        B_0_read_305 => p_read205,
        B_0_read_306 => p_read206,
        B_0_read_307 => p_read207,
        B_0_read_308 => p_read208,
        B_0_read_309 => p_read209,
        B_0_read_310 => p_read210,
        B_0_read_311 => p_read211,
        B_0_read_312 => p_read212,
        B_0_read_313 => p_read213,
        B_0_read_314 => p_read214,
        B_0_read_315 => p_read215,
        B_0_read_316 => p_read216,
        B_0_read_317 => p_read217,
        B_0_read_318 => p_read218,
        B_0_read_319 => p_read219,
        B_0_read_320 => p_read220,
        B_0_read_321 => p_read221,
        B_0_read_322 => p_read222,
        B_0_read_323 => p_read223,
        B_0_read_324 => p_read224,
        B_0_read_325 => p_read225,
        B_0_read_326 => p_read226,
        B_0_read_327 => p_read227,
        B_0_read_328 => p_read228,
        B_0_read_329 => p_read229,
        B_0_read_330 => p_read230,
        B_0_read_331 => p_read231,
        B_0_read_332 => p_read232,
        B_0_read_333 => p_read233,
        B_0_read_334 => p_read234,
        B_0_read_335 => p_read235,
        B_0_read_336 => p_read236,
        B_0_read_337 => p_read237,
        B_0_read_338 => p_read238,
        B_0_read_339 => p_read239,
        B_0_read_340 => p_read240,
        B_0_read_341 => p_read241,
        B_0_read_342 => p_read242,
        B_0_read_343 => p_read243,
        B_0_read_344 => p_read244,
        B_0_read_345 => p_read245,
        B_0_read_346 => p_read246,
        B_0_read_347 => p_read247,
        B_0_read_348 => p_read248,
        B_0_read_349 => p_read249,
        B_0_read_350 => p_read250,
        B_0_read_351 => p_read251,
        B_0_read_352 => p_read252,
        B_0_read_353 => p_read253);

    grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868 : component accelerator_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_start,
        ap_done => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_done,
        ap_idle => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_idle,
        ap_ready => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_ready,
        mid_0_address0 => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_mid_0_address0,
        mid_0_ce0 => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_mid_0_ce0,
        mid_0_q0 => mid_0_q0,
        biases_val => biases_val,
        net_0_address0 => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_address0,
        net_0_ce0 => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_ce0,
        net_0_we0 => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_we0,
        net_0_d0 => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_d0,
        grp_fu_3159_p_din0 => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_din0,
        grp_fu_3159_p_din1 => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_din1,
        grp_fu_3159_p_opcode => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_opcode,
        grp_fu_3159_p_dout0 => grp_fu_8485_p_dout0,
        grp_fu_3159_p_ce => grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_ce);

    grp_relu_64_s_fu_1876 : component accelerator_relu_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_relu_64_s_fu_1876_ap_start,
        ap_done => grp_relu_64_s_fu_1876_ap_done,
        ap_idle => grp_relu_64_s_fu_1876_ap_idle,
        ap_ready => grp_relu_64_s_fu_1876_ap_ready,
        agg_result_0_address0 => grp_relu_64_s_fu_1876_agg_result_0_address0,
        agg_result_0_ce0 => grp_relu_64_s_fu_1876_agg_result_0_ce0,
        agg_result_0_we0 => grp_relu_64_s_fu_1876_agg_result_0_we0,
        agg_result_0_d0 => grp_relu_64_s_fu_1876_agg_result_0_d0,
        agg_result_0_address1 => grp_relu_64_s_fu_1876_agg_result_0_address1,
        agg_result_0_ce1 => grp_relu_64_s_fu_1876_agg_result_0_ce1,
        agg_result_0_we1 => grp_relu_64_s_fu_1876_agg_result_0_we1,
        agg_result_0_d1 => grp_relu_64_s_fu_1876_agg_result_0_d1,
        net_0_address0 => grp_relu_64_s_fu_1876_net_0_address0,
        net_0_ce0 => grp_relu_64_s_fu_1876_net_0_ce0,
        net_0_q0 => net_0_q0,
        grp_fu_3163_p_din0 => grp_relu_64_s_fu_1876_grp_fu_3163_p_din0,
        grp_fu_3163_p_din1 => grp_relu_64_s_fu_1876_grp_fu_3163_p_din1,
        grp_fu_3163_p_opcode => grp_relu_64_s_fu_1876_grp_fu_3163_p_opcode,
        grp_fu_3163_p_dout0 => grp_fu_8489_p_dout0,
        grp_fu_3163_p_ce => grp_relu_64_s_fu_1876_grp_fu_3163_p_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_0_preg <= ref_tmp_0_load_reg_2549;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_10_preg <= ref_tmp_0_load_10_reg_2649;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_11_preg <= ref_tmp_0_load_11_reg_2654;
                end if; 
            end if;
        end if;
    end process;


    ap_return_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_12_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_12_preg <= ref_tmp_0_load_12_reg_2669;
                end if; 
            end if;
        end if;
    end process;


    ap_return_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_13_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_13_preg <= ref_tmp_0_load_13_reg_2674;
                end if; 
            end if;
        end if;
    end process;


    ap_return_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_14_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_14_preg <= ref_tmp_0_load_14_reg_2689;
                end if; 
            end if;
        end if;
    end process;


    ap_return_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_15_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_15_preg <= ref_tmp_0_load_15_reg_2694;
                end if; 
            end if;
        end if;
    end process;


    ap_return_16_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_16_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_16_preg <= ref_tmp_0_load_16_reg_2709;
                end if; 
            end if;
        end if;
    end process;


    ap_return_17_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_17_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_17_preg <= ref_tmp_0_load_17_reg_2714;
                end if; 
            end if;
        end if;
    end process;


    ap_return_18_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_18_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_18_preg <= ref_tmp_0_load_18_reg_2729;
                end if; 
            end if;
        end if;
    end process;


    ap_return_19_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_19_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_19_preg <= ref_tmp_0_load_19_reg_2734;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_1_preg <= ref_tmp_0_load_1_reg_2554;
                end if; 
            end if;
        end if;
    end process;


    ap_return_20_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_20_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_20_preg <= ref_tmp_0_load_20_reg_2749;
                end if; 
            end if;
        end if;
    end process;


    ap_return_21_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_21_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_21_preg <= ref_tmp_0_load_21_reg_2754;
                end if; 
            end if;
        end if;
    end process;


    ap_return_22_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_22_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_22_preg <= ref_tmp_0_load_22_reg_2769;
                end if; 
            end if;
        end if;
    end process;


    ap_return_23_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_23_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_23_preg <= ref_tmp_0_load_23_reg_2774;
                end if; 
            end if;
        end if;
    end process;


    ap_return_24_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_24_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_24_preg <= ref_tmp_0_load_24_reg_2789;
                end if; 
            end if;
        end if;
    end process;


    ap_return_25_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_25_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_25_preg <= ref_tmp_0_load_25_reg_2794;
                end if; 
            end if;
        end if;
    end process;


    ap_return_26_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_26_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_26_preg <= ref_tmp_0_load_26_reg_2809;
                end if; 
            end if;
        end if;
    end process;


    ap_return_27_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_27_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_27_preg <= ref_tmp_0_load_27_reg_2814;
                end if; 
            end if;
        end if;
    end process;


    ap_return_28_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_28_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_28_preg <= ref_tmp_0_load_28_reg_2829;
                end if; 
            end if;
        end if;
    end process;


    ap_return_29_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_29_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_29_preg <= ref_tmp_0_load_29_reg_2834;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_2_preg <= ref_tmp_0_load_2_reg_2569;
                end if; 
            end if;
        end if;
    end process;


    ap_return_30_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_30_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_30_preg <= ref_tmp_0_load_30_reg_2849;
                end if; 
            end if;
        end if;
    end process;


    ap_return_31_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_31_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_31_preg <= ref_tmp_0_load_31_reg_2854;
                end if; 
            end if;
        end if;
    end process;


    ap_return_32_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_32_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_32_preg <= ref_tmp_0_load_32_reg_2869;
                end if; 
            end if;
        end if;
    end process;


    ap_return_33_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_33_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_33_preg <= ref_tmp_0_load_33_reg_2874;
                end if; 
            end if;
        end if;
    end process;


    ap_return_34_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_34_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_34_preg <= ref_tmp_0_load_34_reg_2889;
                end if; 
            end if;
        end if;
    end process;


    ap_return_35_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_35_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_35_preg <= ref_tmp_0_load_35_reg_2894;
                end if; 
            end if;
        end if;
    end process;


    ap_return_36_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_36_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_36_preg <= ref_tmp_0_load_36_reg_2909;
                end if; 
            end if;
        end if;
    end process;


    ap_return_37_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_37_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_37_preg <= ref_tmp_0_load_37_reg_2914;
                end if; 
            end if;
        end if;
    end process;


    ap_return_38_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_38_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_38_preg <= ref_tmp_0_load_38_reg_2929;
                end if; 
            end if;
        end if;
    end process;


    ap_return_39_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_39_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_39_preg <= ref_tmp_0_load_39_reg_2934;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_3_preg <= ref_tmp_0_load_3_reg_2574;
                end if; 
            end if;
        end if;
    end process;


    ap_return_40_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_40_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_40_preg <= ref_tmp_0_load_40_reg_2949;
                end if; 
            end if;
        end if;
    end process;


    ap_return_41_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_41_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_41_preg <= ref_tmp_0_load_41_reg_2954;
                end if; 
            end if;
        end if;
    end process;


    ap_return_42_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_42_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_42_preg <= ref_tmp_0_load_42_reg_2969;
                end if; 
            end if;
        end if;
    end process;


    ap_return_43_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_43_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_43_preg <= ref_tmp_0_load_43_reg_2974;
                end if; 
            end if;
        end if;
    end process;


    ap_return_44_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_44_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_44_preg <= ref_tmp_0_load_44_reg_2989;
                end if; 
            end if;
        end if;
    end process;


    ap_return_45_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_45_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_45_preg <= ref_tmp_0_load_45_reg_2994;
                end if; 
            end if;
        end if;
    end process;


    ap_return_46_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_46_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_46_preg <= ref_tmp_0_load_46_reg_3009;
                end if; 
            end if;
        end if;
    end process;


    ap_return_47_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_47_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_47_preg <= ref_tmp_0_load_47_reg_3014;
                end if; 
            end if;
        end if;
    end process;


    ap_return_48_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_48_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_48_preg <= ref_tmp_0_load_48_reg_3029;
                end if; 
            end if;
        end if;
    end process;


    ap_return_49_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_49_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_49_preg <= ref_tmp_0_load_49_reg_3034;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_4_preg <= ref_tmp_0_load_4_reg_2589;
                end if; 
            end if;
        end if;
    end process;


    ap_return_50_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_50_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_50_preg <= ref_tmp_0_load_50_reg_3049;
                end if; 
            end if;
        end if;
    end process;


    ap_return_51_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_51_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_51_preg <= ref_tmp_0_load_51_reg_3054;
                end if; 
            end if;
        end if;
    end process;


    ap_return_52_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_52_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_52_preg <= ref_tmp_0_load_52_reg_3069;
                end if; 
            end if;
        end if;
    end process;


    ap_return_53_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_53_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_53_preg <= ref_tmp_0_load_53_reg_3074;
                end if; 
            end if;
        end if;
    end process;


    ap_return_54_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_54_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_54_preg <= ref_tmp_0_load_54_reg_3089;
                end if; 
            end if;
        end if;
    end process;


    ap_return_55_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_55_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_55_preg <= ref_tmp_0_load_55_reg_3094;
                end if; 
            end if;
        end if;
    end process;


    ap_return_56_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_56_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_56_preg <= ref_tmp_0_load_56_reg_3109;
                end if; 
            end if;
        end if;
    end process;


    ap_return_57_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_57_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_57_preg <= ref_tmp_0_load_57_reg_3114;
                end if; 
            end if;
        end if;
    end process;


    ap_return_58_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_58_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_58_preg <= ref_tmp_0_load_58_reg_3129;
                end if; 
            end if;
        end if;
    end process;


    ap_return_59_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_59_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_59_preg <= ref_tmp_0_load_59_reg_3134;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_5_preg <= ref_tmp_0_load_5_reg_2594;
                end if; 
            end if;
        end if;
    end process;


    ap_return_60_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_60_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_60_preg <= ref_tmp_0_load_60_reg_3149;
                end if; 
            end if;
        end if;
    end process;


    ap_return_61_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_61_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_61_preg <= ref_tmp_0_load_61_reg_3154;
                end if; 
            end if;
        end if;
    end process;


    ap_return_62_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_62_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_62_preg <= ref_tmp_0_q1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_63_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_63_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_63_preg <= ref_tmp_0_q0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_6_preg <= ref_tmp_0_load_6_reg_2609;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_7_preg <= ref_tmp_0_load_7_reg_2614;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_8_preg <= ref_tmp_0_load_8_reg_2629;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_return_9_preg <= ref_tmp_0_load_9_reg_2634;
                end if; 
            end if;
        end if;
    end process;


    grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_ready = ap_const_logic_1)) then 
                    grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_ready = ap_const_logic_1)) then 
                    grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_relu_64_s_fu_1876_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_relu_64_s_fu_1876_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    grp_relu_64_s_fu_1876_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_relu_64_s_fu_1876_ap_ready = ap_const_logic_1)) then 
                    grp_relu_64_s_fu_1876_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                ref_tmp_0_load_10_reg_2649 <= ref_tmp_0_q1;
                ref_tmp_0_load_11_reg_2654 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                ref_tmp_0_load_12_reg_2669 <= ref_tmp_0_q1;
                ref_tmp_0_load_13_reg_2674 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                ref_tmp_0_load_14_reg_2689 <= ref_tmp_0_q1;
                ref_tmp_0_load_15_reg_2694 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                ref_tmp_0_load_16_reg_2709 <= ref_tmp_0_q1;
                ref_tmp_0_load_17_reg_2714 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                ref_tmp_0_load_18_reg_2729 <= ref_tmp_0_q1;
                ref_tmp_0_load_19_reg_2734 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                ref_tmp_0_load_1_reg_2554 <= ref_tmp_0_q0;
                ref_tmp_0_load_reg_2549 <= ref_tmp_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                ref_tmp_0_load_20_reg_2749 <= ref_tmp_0_q1;
                ref_tmp_0_load_21_reg_2754 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                ref_tmp_0_load_22_reg_2769 <= ref_tmp_0_q1;
                ref_tmp_0_load_23_reg_2774 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                ref_tmp_0_load_24_reg_2789 <= ref_tmp_0_q1;
                ref_tmp_0_load_25_reg_2794 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                ref_tmp_0_load_26_reg_2809 <= ref_tmp_0_q1;
                ref_tmp_0_load_27_reg_2814 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                ref_tmp_0_load_28_reg_2829 <= ref_tmp_0_q1;
                ref_tmp_0_load_29_reg_2834 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                ref_tmp_0_load_2_reg_2569 <= ref_tmp_0_q1;
                ref_tmp_0_load_3_reg_2574 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                ref_tmp_0_load_30_reg_2849 <= ref_tmp_0_q1;
                ref_tmp_0_load_31_reg_2854 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                ref_tmp_0_load_32_reg_2869 <= ref_tmp_0_q1;
                ref_tmp_0_load_33_reg_2874 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                ref_tmp_0_load_34_reg_2889 <= ref_tmp_0_q1;
                ref_tmp_0_load_35_reg_2894 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                ref_tmp_0_load_36_reg_2909 <= ref_tmp_0_q1;
                ref_tmp_0_load_37_reg_2914 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                ref_tmp_0_load_38_reg_2929 <= ref_tmp_0_q1;
                ref_tmp_0_load_39_reg_2934 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                ref_tmp_0_load_40_reg_2949 <= ref_tmp_0_q1;
                ref_tmp_0_load_41_reg_2954 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                ref_tmp_0_load_42_reg_2969 <= ref_tmp_0_q1;
                ref_tmp_0_load_43_reg_2974 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                ref_tmp_0_load_44_reg_2989 <= ref_tmp_0_q1;
                ref_tmp_0_load_45_reg_2994 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                ref_tmp_0_load_46_reg_3009 <= ref_tmp_0_q1;
                ref_tmp_0_load_47_reg_3014 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                ref_tmp_0_load_48_reg_3029 <= ref_tmp_0_q1;
                ref_tmp_0_load_49_reg_3034 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                ref_tmp_0_load_4_reg_2589 <= ref_tmp_0_q1;
                ref_tmp_0_load_5_reg_2594 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                ref_tmp_0_load_50_reg_3049 <= ref_tmp_0_q1;
                ref_tmp_0_load_51_reg_3054 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                ref_tmp_0_load_52_reg_3069 <= ref_tmp_0_q1;
                ref_tmp_0_load_53_reg_3074 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                ref_tmp_0_load_54_reg_3089 <= ref_tmp_0_q1;
                ref_tmp_0_load_55_reg_3094 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                ref_tmp_0_load_56_reg_3109 <= ref_tmp_0_q1;
                ref_tmp_0_load_57_reg_3114 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                ref_tmp_0_load_58_reg_3129 <= ref_tmp_0_q1;
                ref_tmp_0_load_59_reg_3134 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                ref_tmp_0_load_60_reg_3149 <= ref_tmp_0_q1;
                ref_tmp_0_load_61_reg_3154 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                ref_tmp_0_load_6_reg_2609 <= ref_tmp_0_q1;
                ref_tmp_0_load_7_reg_2614 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                ref_tmp_0_load_8_reg_2629 <= ref_tmp_0_q1;
                ref_tmp_0_load_9_reg_2634 <= ref_tmp_0_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done, grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_done, grp_relu_64_s_fu_1876_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_relu_64_s_fu_1876_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done)
    begin
        if ((grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_done)
    begin
        if ((grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state35_blk <= ap_const_logic_0;

    ap_ST_fsm_state36_blk_assign_proc : process(grp_relu_64_s_fu_1876_ap_done)
    begin
        if ((grp_relu_64_s_fu_1876_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state69)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state69) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ref_tmp_0_load_reg_2549, ap_CS_fsm_state69, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_0 <= ref_tmp_0_load_reg_2549;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ref_tmp_0_load_1_reg_2554, ap_CS_fsm_state69, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_1 <= ref_tmp_0_load_1_reg_2554;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(ref_tmp_0_load_10_reg_2649, ap_CS_fsm_state69, ap_return_10_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_10 <= ref_tmp_0_load_10_reg_2649;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(ref_tmp_0_load_11_reg_2654, ap_CS_fsm_state69, ap_return_11_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_11 <= ref_tmp_0_load_11_reg_2654;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_12_assign_proc : process(ref_tmp_0_load_12_reg_2669, ap_CS_fsm_state69, ap_return_12_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_12 <= ref_tmp_0_load_12_reg_2669;
        else 
            ap_return_12 <= ap_return_12_preg;
        end if; 
    end process;


    ap_return_13_assign_proc : process(ref_tmp_0_load_13_reg_2674, ap_CS_fsm_state69, ap_return_13_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_13 <= ref_tmp_0_load_13_reg_2674;
        else 
            ap_return_13 <= ap_return_13_preg;
        end if; 
    end process;


    ap_return_14_assign_proc : process(ref_tmp_0_load_14_reg_2689, ap_CS_fsm_state69, ap_return_14_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_14 <= ref_tmp_0_load_14_reg_2689;
        else 
            ap_return_14 <= ap_return_14_preg;
        end if; 
    end process;


    ap_return_15_assign_proc : process(ref_tmp_0_load_15_reg_2694, ap_CS_fsm_state69, ap_return_15_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_15 <= ref_tmp_0_load_15_reg_2694;
        else 
            ap_return_15 <= ap_return_15_preg;
        end if; 
    end process;


    ap_return_16_assign_proc : process(ref_tmp_0_load_16_reg_2709, ap_CS_fsm_state69, ap_return_16_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_16 <= ref_tmp_0_load_16_reg_2709;
        else 
            ap_return_16 <= ap_return_16_preg;
        end if; 
    end process;


    ap_return_17_assign_proc : process(ref_tmp_0_load_17_reg_2714, ap_CS_fsm_state69, ap_return_17_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_17 <= ref_tmp_0_load_17_reg_2714;
        else 
            ap_return_17 <= ap_return_17_preg;
        end if; 
    end process;


    ap_return_18_assign_proc : process(ref_tmp_0_load_18_reg_2729, ap_CS_fsm_state69, ap_return_18_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_18 <= ref_tmp_0_load_18_reg_2729;
        else 
            ap_return_18 <= ap_return_18_preg;
        end if; 
    end process;


    ap_return_19_assign_proc : process(ref_tmp_0_load_19_reg_2734, ap_CS_fsm_state69, ap_return_19_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_19 <= ref_tmp_0_load_19_reg_2734;
        else 
            ap_return_19 <= ap_return_19_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ref_tmp_0_load_2_reg_2569, ap_CS_fsm_state69, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_2 <= ref_tmp_0_load_2_reg_2569;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_20_assign_proc : process(ref_tmp_0_load_20_reg_2749, ap_CS_fsm_state69, ap_return_20_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_20 <= ref_tmp_0_load_20_reg_2749;
        else 
            ap_return_20 <= ap_return_20_preg;
        end if; 
    end process;


    ap_return_21_assign_proc : process(ref_tmp_0_load_21_reg_2754, ap_CS_fsm_state69, ap_return_21_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_21 <= ref_tmp_0_load_21_reg_2754;
        else 
            ap_return_21 <= ap_return_21_preg;
        end if; 
    end process;


    ap_return_22_assign_proc : process(ref_tmp_0_load_22_reg_2769, ap_CS_fsm_state69, ap_return_22_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_22 <= ref_tmp_0_load_22_reg_2769;
        else 
            ap_return_22 <= ap_return_22_preg;
        end if; 
    end process;


    ap_return_23_assign_proc : process(ref_tmp_0_load_23_reg_2774, ap_CS_fsm_state69, ap_return_23_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_23 <= ref_tmp_0_load_23_reg_2774;
        else 
            ap_return_23 <= ap_return_23_preg;
        end if; 
    end process;


    ap_return_24_assign_proc : process(ref_tmp_0_load_24_reg_2789, ap_CS_fsm_state69, ap_return_24_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_24 <= ref_tmp_0_load_24_reg_2789;
        else 
            ap_return_24 <= ap_return_24_preg;
        end if; 
    end process;


    ap_return_25_assign_proc : process(ref_tmp_0_load_25_reg_2794, ap_CS_fsm_state69, ap_return_25_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_25 <= ref_tmp_0_load_25_reg_2794;
        else 
            ap_return_25 <= ap_return_25_preg;
        end if; 
    end process;


    ap_return_26_assign_proc : process(ref_tmp_0_load_26_reg_2809, ap_CS_fsm_state69, ap_return_26_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_26 <= ref_tmp_0_load_26_reg_2809;
        else 
            ap_return_26 <= ap_return_26_preg;
        end if; 
    end process;


    ap_return_27_assign_proc : process(ref_tmp_0_load_27_reg_2814, ap_CS_fsm_state69, ap_return_27_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_27 <= ref_tmp_0_load_27_reg_2814;
        else 
            ap_return_27 <= ap_return_27_preg;
        end if; 
    end process;


    ap_return_28_assign_proc : process(ref_tmp_0_load_28_reg_2829, ap_CS_fsm_state69, ap_return_28_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_28 <= ref_tmp_0_load_28_reg_2829;
        else 
            ap_return_28 <= ap_return_28_preg;
        end if; 
    end process;


    ap_return_29_assign_proc : process(ref_tmp_0_load_29_reg_2834, ap_CS_fsm_state69, ap_return_29_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_29 <= ref_tmp_0_load_29_reg_2834;
        else 
            ap_return_29 <= ap_return_29_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ref_tmp_0_load_3_reg_2574, ap_CS_fsm_state69, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_3 <= ref_tmp_0_load_3_reg_2574;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_30_assign_proc : process(ref_tmp_0_load_30_reg_2849, ap_CS_fsm_state69, ap_return_30_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_30 <= ref_tmp_0_load_30_reg_2849;
        else 
            ap_return_30 <= ap_return_30_preg;
        end if; 
    end process;


    ap_return_31_assign_proc : process(ref_tmp_0_load_31_reg_2854, ap_CS_fsm_state69, ap_return_31_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_31 <= ref_tmp_0_load_31_reg_2854;
        else 
            ap_return_31 <= ap_return_31_preg;
        end if; 
    end process;


    ap_return_32_assign_proc : process(ref_tmp_0_load_32_reg_2869, ap_CS_fsm_state69, ap_return_32_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_32 <= ref_tmp_0_load_32_reg_2869;
        else 
            ap_return_32 <= ap_return_32_preg;
        end if; 
    end process;


    ap_return_33_assign_proc : process(ref_tmp_0_load_33_reg_2874, ap_CS_fsm_state69, ap_return_33_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_33 <= ref_tmp_0_load_33_reg_2874;
        else 
            ap_return_33 <= ap_return_33_preg;
        end if; 
    end process;


    ap_return_34_assign_proc : process(ref_tmp_0_load_34_reg_2889, ap_CS_fsm_state69, ap_return_34_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_34 <= ref_tmp_0_load_34_reg_2889;
        else 
            ap_return_34 <= ap_return_34_preg;
        end if; 
    end process;


    ap_return_35_assign_proc : process(ref_tmp_0_load_35_reg_2894, ap_CS_fsm_state69, ap_return_35_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_35 <= ref_tmp_0_load_35_reg_2894;
        else 
            ap_return_35 <= ap_return_35_preg;
        end if; 
    end process;


    ap_return_36_assign_proc : process(ref_tmp_0_load_36_reg_2909, ap_CS_fsm_state69, ap_return_36_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_36 <= ref_tmp_0_load_36_reg_2909;
        else 
            ap_return_36 <= ap_return_36_preg;
        end if; 
    end process;


    ap_return_37_assign_proc : process(ref_tmp_0_load_37_reg_2914, ap_CS_fsm_state69, ap_return_37_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_37 <= ref_tmp_0_load_37_reg_2914;
        else 
            ap_return_37 <= ap_return_37_preg;
        end if; 
    end process;


    ap_return_38_assign_proc : process(ref_tmp_0_load_38_reg_2929, ap_CS_fsm_state69, ap_return_38_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_38 <= ref_tmp_0_load_38_reg_2929;
        else 
            ap_return_38 <= ap_return_38_preg;
        end if; 
    end process;


    ap_return_39_assign_proc : process(ref_tmp_0_load_39_reg_2934, ap_CS_fsm_state69, ap_return_39_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_39 <= ref_tmp_0_load_39_reg_2934;
        else 
            ap_return_39 <= ap_return_39_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ref_tmp_0_load_4_reg_2589, ap_CS_fsm_state69, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_4 <= ref_tmp_0_load_4_reg_2589;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_40_assign_proc : process(ref_tmp_0_load_40_reg_2949, ap_CS_fsm_state69, ap_return_40_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_40 <= ref_tmp_0_load_40_reg_2949;
        else 
            ap_return_40 <= ap_return_40_preg;
        end if; 
    end process;


    ap_return_41_assign_proc : process(ref_tmp_0_load_41_reg_2954, ap_CS_fsm_state69, ap_return_41_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_41 <= ref_tmp_0_load_41_reg_2954;
        else 
            ap_return_41 <= ap_return_41_preg;
        end if; 
    end process;


    ap_return_42_assign_proc : process(ref_tmp_0_load_42_reg_2969, ap_CS_fsm_state69, ap_return_42_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_42 <= ref_tmp_0_load_42_reg_2969;
        else 
            ap_return_42 <= ap_return_42_preg;
        end if; 
    end process;


    ap_return_43_assign_proc : process(ref_tmp_0_load_43_reg_2974, ap_CS_fsm_state69, ap_return_43_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_43 <= ref_tmp_0_load_43_reg_2974;
        else 
            ap_return_43 <= ap_return_43_preg;
        end if; 
    end process;


    ap_return_44_assign_proc : process(ref_tmp_0_load_44_reg_2989, ap_CS_fsm_state69, ap_return_44_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_44 <= ref_tmp_0_load_44_reg_2989;
        else 
            ap_return_44 <= ap_return_44_preg;
        end if; 
    end process;


    ap_return_45_assign_proc : process(ref_tmp_0_load_45_reg_2994, ap_CS_fsm_state69, ap_return_45_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_45 <= ref_tmp_0_load_45_reg_2994;
        else 
            ap_return_45 <= ap_return_45_preg;
        end if; 
    end process;


    ap_return_46_assign_proc : process(ref_tmp_0_load_46_reg_3009, ap_CS_fsm_state69, ap_return_46_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_46 <= ref_tmp_0_load_46_reg_3009;
        else 
            ap_return_46 <= ap_return_46_preg;
        end if; 
    end process;


    ap_return_47_assign_proc : process(ref_tmp_0_load_47_reg_3014, ap_CS_fsm_state69, ap_return_47_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_47 <= ref_tmp_0_load_47_reg_3014;
        else 
            ap_return_47 <= ap_return_47_preg;
        end if; 
    end process;


    ap_return_48_assign_proc : process(ref_tmp_0_load_48_reg_3029, ap_CS_fsm_state69, ap_return_48_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_48 <= ref_tmp_0_load_48_reg_3029;
        else 
            ap_return_48 <= ap_return_48_preg;
        end if; 
    end process;


    ap_return_49_assign_proc : process(ref_tmp_0_load_49_reg_3034, ap_CS_fsm_state69, ap_return_49_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_49 <= ref_tmp_0_load_49_reg_3034;
        else 
            ap_return_49 <= ap_return_49_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ref_tmp_0_load_5_reg_2594, ap_CS_fsm_state69, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_5 <= ref_tmp_0_load_5_reg_2594;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_50_assign_proc : process(ref_tmp_0_load_50_reg_3049, ap_CS_fsm_state69, ap_return_50_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_50 <= ref_tmp_0_load_50_reg_3049;
        else 
            ap_return_50 <= ap_return_50_preg;
        end if; 
    end process;


    ap_return_51_assign_proc : process(ref_tmp_0_load_51_reg_3054, ap_CS_fsm_state69, ap_return_51_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_51 <= ref_tmp_0_load_51_reg_3054;
        else 
            ap_return_51 <= ap_return_51_preg;
        end if; 
    end process;


    ap_return_52_assign_proc : process(ref_tmp_0_load_52_reg_3069, ap_CS_fsm_state69, ap_return_52_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_52 <= ref_tmp_0_load_52_reg_3069;
        else 
            ap_return_52 <= ap_return_52_preg;
        end if; 
    end process;


    ap_return_53_assign_proc : process(ref_tmp_0_load_53_reg_3074, ap_CS_fsm_state69, ap_return_53_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_53 <= ref_tmp_0_load_53_reg_3074;
        else 
            ap_return_53 <= ap_return_53_preg;
        end if; 
    end process;


    ap_return_54_assign_proc : process(ref_tmp_0_load_54_reg_3089, ap_CS_fsm_state69, ap_return_54_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_54 <= ref_tmp_0_load_54_reg_3089;
        else 
            ap_return_54 <= ap_return_54_preg;
        end if; 
    end process;


    ap_return_55_assign_proc : process(ref_tmp_0_load_55_reg_3094, ap_CS_fsm_state69, ap_return_55_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_55 <= ref_tmp_0_load_55_reg_3094;
        else 
            ap_return_55 <= ap_return_55_preg;
        end if; 
    end process;


    ap_return_56_assign_proc : process(ref_tmp_0_load_56_reg_3109, ap_CS_fsm_state69, ap_return_56_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_56 <= ref_tmp_0_load_56_reg_3109;
        else 
            ap_return_56 <= ap_return_56_preg;
        end if; 
    end process;


    ap_return_57_assign_proc : process(ref_tmp_0_load_57_reg_3114, ap_CS_fsm_state69, ap_return_57_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_57 <= ref_tmp_0_load_57_reg_3114;
        else 
            ap_return_57 <= ap_return_57_preg;
        end if; 
    end process;


    ap_return_58_assign_proc : process(ref_tmp_0_load_58_reg_3129, ap_CS_fsm_state69, ap_return_58_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_58 <= ref_tmp_0_load_58_reg_3129;
        else 
            ap_return_58 <= ap_return_58_preg;
        end if; 
    end process;


    ap_return_59_assign_proc : process(ref_tmp_0_load_59_reg_3134, ap_CS_fsm_state69, ap_return_59_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_59 <= ref_tmp_0_load_59_reg_3134;
        else 
            ap_return_59 <= ap_return_59_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ref_tmp_0_load_6_reg_2609, ap_CS_fsm_state69, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_6 <= ref_tmp_0_load_6_reg_2609;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_60_assign_proc : process(ref_tmp_0_load_60_reg_3149, ap_CS_fsm_state69, ap_return_60_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_60 <= ref_tmp_0_load_60_reg_3149;
        else 
            ap_return_60 <= ap_return_60_preg;
        end if; 
    end process;


    ap_return_61_assign_proc : process(ref_tmp_0_load_61_reg_3154, ap_CS_fsm_state69, ap_return_61_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_61 <= ref_tmp_0_load_61_reg_3154;
        else 
            ap_return_61 <= ap_return_61_preg;
        end if; 
    end process;


    ap_return_62_assign_proc : process(ref_tmp_0_q1, ap_CS_fsm_state69, ap_return_62_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_62 <= ref_tmp_0_q1;
        else 
            ap_return_62 <= ap_return_62_preg;
        end if; 
    end process;


    ap_return_63_assign_proc : process(ref_tmp_0_q0, ap_CS_fsm_state69, ap_return_63_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_63 <= ref_tmp_0_q0;
        else 
            ap_return_63 <= ap_return_63_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ref_tmp_0_load_7_reg_2614, ap_CS_fsm_state69, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_7 <= ref_tmp_0_load_7_reg_2614;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ref_tmp_0_load_8_reg_2629, ap_CS_fsm_state69, ap_return_8_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_8 <= ref_tmp_0_load_8_reg_2629;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ref_tmp_0_load_9_reg_2634, ap_CS_fsm_state69, ap_return_9_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            ap_return_9 <= ref_tmp_0_load_9_reg_2634;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_start <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_ap_start_reg;

    grp_fu_3159_ce_assign_proc : process(grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_ce, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_3159_ce <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_ce;
        else 
            grp_fu_3159_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_3163_ce_assign_proc : process(grp_relu_64_s_fu_1876_grp_fu_3163_p_ce, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_3163_ce <= grp_relu_64_s_fu_1876_grp_fu_3163_p_ce;
        else 
            grp_fu_3163_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_8485_p_ce <= grp_fu_3159_ce;
    grp_fu_8485_p_din0 <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_din0;
    grp_fu_8485_p_din1 <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_din1;
    grp_fu_8485_p_opcode <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_grp_fu_3159_p_opcode;
    grp_fu_8489_p_ce <= grp_fu_3163_ce;
    grp_fu_8489_p_din0 <= grp_relu_64_s_fu_1876_grp_fu_3163_p_din0;
    grp_fu_8489_p_din1 <= grp_relu_64_s_fu_1876_grp_fu_3163_p_din1;
    grp_fu_8489_p_opcode <= grp_relu_64_s_fu_1876_grp_fu_3163_p_opcode;
    grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_start <= grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_start_reg;
    grp_relu_64_s_fu_1876_ap_start <= grp_relu_64_s_fu_1876_ap_start_reg;

    mid_0_address0_assign_proc : process(grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_address0, grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_mid_0_address0, ap_CS_fsm_state2, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            mid_0_address0 <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_mid_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mid_0_address0 <= grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_address0;
        else 
            mid_0_address0 <= "XXXXXX";
        end if; 
    end process;


    mid_0_ce0_assign_proc : process(grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_ce0, grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_mid_0_ce0, ap_CS_fsm_state2, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            mid_0_ce0 <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_mid_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mid_0_ce0 <= grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_ce0;
        else 
            mid_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mid_0_ce1_assign_proc : process(grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mid_0_ce1 <= grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_ce1;
        else 
            mid_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    mid_0_we0_assign_proc : process(grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mid_0_we0 <= grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_we0;
        else 
            mid_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mid_0_we1_assign_proc : process(grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mid_0_we1 <= grp_matmul_64ul_64ul_1ul_s_fu_1732_agg_result_0_we1;
        else 
            mid_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    net_0_address0_assign_proc : process(grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_address0, grp_relu_64_s_fu_1876_net_0_address0, ap_CS_fsm_state34, ap_CS_fsm_state36, net_0_address0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            net_0_address0 <= grp_relu_64_s_fu_1876_net_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            net_0_address0 <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_address0;
        else 
            net_0_address0 <= net_0_address0_local;
        end if; 
    end process;


    net_0_address0_local_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            net_0_address0_local <= ap_const_lv64_3F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            net_0_address0_local <= ap_const_lv64_3D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            net_0_address0_local <= ap_const_lv64_3B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            net_0_address0_local <= ap_const_lv64_39(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            net_0_address0_local <= ap_const_lv64_37(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            net_0_address0_local <= ap_const_lv64_35(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            net_0_address0_local <= ap_const_lv64_33(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            net_0_address0_local <= ap_const_lv64_31(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            net_0_address0_local <= ap_const_lv64_2F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            net_0_address0_local <= ap_const_lv64_2D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            net_0_address0_local <= ap_const_lv64_2B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            net_0_address0_local <= ap_const_lv64_29(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            net_0_address0_local <= ap_const_lv64_27(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            net_0_address0_local <= ap_const_lv64_25(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            net_0_address0_local <= ap_const_lv64_23(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            net_0_address0_local <= ap_const_lv64_21(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            net_0_address0_local <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            net_0_address0_local <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            net_0_address0_local <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            net_0_address0_local <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            net_0_address0_local <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            net_0_address0_local <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            net_0_address0_local <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            net_0_address0_local <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            net_0_address0_local <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            net_0_address0_local <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            net_0_address0_local <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            net_0_address0_local <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            net_0_address0_local <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            net_0_address0_local <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            net_0_address0_local <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            net_0_address0_local <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            net_0_address0_local <= "XXXXXX";
        end if; 
    end process;


    net_0_address1_local_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            net_0_address1_local <= ap_const_lv64_3E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            net_0_address1_local <= ap_const_lv64_3C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            net_0_address1_local <= ap_const_lv64_3A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            net_0_address1_local <= ap_const_lv64_38(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            net_0_address1_local <= ap_const_lv64_36(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            net_0_address1_local <= ap_const_lv64_34(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            net_0_address1_local <= ap_const_lv64_32(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            net_0_address1_local <= ap_const_lv64_30(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            net_0_address1_local <= ap_const_lv64_2E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            net_0_address1_local <= ap_const_lv64_2C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            net_0_address1_local <= ap_const_lv64_2A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            net_0_address1_local <= ap_const_lv64_28(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            net_0_address1_local <= ap_const_lv64_26(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            net_0_address1_local <= ap_const_lv64_24(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            net_0_address1_local <= ap_const_lv64_22(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            net_0_address1_local <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            net_0_address1_local <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            net_0_address1_local <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            net_0_address1_local <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            net_0_address1_local <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            net_0_address1_local <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            net_0_address1_local <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            net_0_address1_local <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            net_0_address1_local <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            net_0_address1_local <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            net_0_address1_local <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            net_0_address1_local <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            net_0_address1_local <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            net_0_address1_local <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            net_0_address1_local <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            net_0_address1_local <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            net_0_address1_local <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            net_0_address1_local <= "XXXXXX";
        end if; 
    end process;


    net_0_ce0_assign_proc : process(grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_ce0, grp_relu_64_s_fu_1876_net_0_ce0, ap_CS_fsm_state34, ap_CS_fsm_state36, net_0_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            net_0_ce0 <= grp_relu_64_s_fu_1876_net_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            net_0_ce0 <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_ce0;
        else 
            net_0_ce0 <= net_0_ce0_local;
        end if; 
    end process;


    net_0_ce0_local_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) 
    or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            net_0_ce0_local <= ap_const_logic_1;
        else 
            net_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    net_0_ce1_local_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) 
    or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            net_0_ce1_local <= ap_const_logic_1;
        else 
            net_0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    net_0_d0_assign_proc : process(grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_d0, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            net_0_d0 <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_d0;
        else 
            net_0_d0 <= ap_const_lv64_0;
        end if; 
    end process;


    net_0_we0_assign_proc : process(grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_we0, ap_CS_fsm_state34, net_0_we0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            net_0_we0 <= grp_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1_fu_1868_net_0_we0;
        else 
            net_0_we0 <= net_0_we0_local;
        end if; 
    end process;


    net_0_we0_local_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) 
    or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            net_0_we0_local <= ap_const_logic_1;
        else 
            net_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    net_0_we1_local_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) 
    or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_matmul_64ul_64ul_1ul_s_fu_1732_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            net_0_we1_local <= ap_const_logic_1;
        else 
            net_0_we1_local <= ap_const_logic_0;
        end if; 
    end process;


    ref_tmp_0_address0_assign_proc : process(grp_relu_64_s_fu_1876_agg_result_0_address0, ap_CS_fsm_state36, ref_tmp_0_address0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ref_tmp_0_address0 <= grp_relu_64_s_fu_1876_agg_result_0_address0;
        else 
            ref_tmp_0_address0 <= ref_tmp_0_address0_local;
        end if; 
    end process;


    ref_tmp_0_address0_local_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_3F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_3D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_3B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_39(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_37(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_35(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_33(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_31(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_2F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_2D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_2B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_29(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_27(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_25(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_23(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_21(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ref_tmp_0_address0_local <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            ref_tmp_0_address0_local <= "XXXXXX";
        end if; 
    end process;


    ref_tmp_0_address1_assign_proc : process(grp_relu_64_s_fu_1876_agg_result_0_address1, ap_CS_fsm_state36, ref_tmp_0_address1_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ref_tmp_0_address1 <= grp_relu_64_s_fu_1876_agg_result_0_address1;
        else 
            ref_tmp_0_address1 <= ref_tmp_0_address1_local;
        end if; 
    end process;


    ref_tmp_0_address1_local_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_3E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_3C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_3A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_38(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_36(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_34(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_32(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_30(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_2E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_2C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_2A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_28(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_26(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_24(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_22(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ref_tmp_0_address1_local <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            ref_tmp_0_address1_local <= "XXXXXX";
        end if; 
    end process;


    ref_tmp_0_ce0_assign_proc : process(grp_relu_64_s_fu_1876_agg_result_0_ce0, ap_CS_fsm_state36, ref_tmp_0_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ref_tmp_0_ce0 <= grp_relu_64_s_fu_1876_agg_result_0_ce0;
        else 
            ref_tmp_0_ce0 <= ref_tmp_0_ce0_local;
        end if; 
    end process;


    ref_tmp_0_ce0_local_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 
    = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ref_tmp_0_ce0_local <= ap_const_logic_1;
        else 
            ref_tmp_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    ref_tmp_0_ce1_assign_proc : process(grp_relu_64_s_fu_1876_agg_result_0_ce1, ap_CS_fsm_state36, ref_tmp_0_ce1_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ref_tmp_0_ce1 <= grp_relu_64_s_fu_1876_agg_result_0_ce1;
        else 
            ref_tmp_0_ce1 <= ref_tmp_0_ce1_local;
        end if; 
    end process;


    ref_tmp_0_ce1_local_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 
    = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ref_tmp_0_ce1_local <= ap_const_logic_1;
        else 
            ref_tmp_0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    ref_tmp_0_we0_assign_proc : process(grp_relu_64_s_fu_1876_agg_result_0_we0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ref_tmp_0_we0 <= grp_relu_64_s_fu_1876_agg_result_0_we0;
        else 
            ref_tmp_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ref_tmp_0_we1_assign_proc : process(grp_relu_64_s_fu_1876_agg_result_0_we1, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ref_tmp_0_we1 <= grp_relu_64_s_fu_1876_agg_result_0_we1;
        else 
            ref_tmp_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    weights_l0_address0 <= grp_matmul_64ul_64ul_1ul_s_fu_1732_weights_l0_address0;
    weights_l0_ce0 <= grp_matmul_64ul_64ul_1ul_s_fu_1732_weights_l0_ce0;
end behav;
