-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_matmul_64ul_64ul_1ul_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    agg_result_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    agg_result_0_ce0 : OUT STD_LOGIC;
    agg_result_0_we0 : OUT STD_LOGIC;
    agg_result_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    agg_result_0_ce1 : OUT STD_LOGIC;
    agg_result_0_we1 : OUT STD_LOGIC;
    agg_result_0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    weights_l0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    weights_l0_ce0 : OUT STD_LOGIC;
    weights_l0_q0 : IN STD_LOGIC_VECTOR (4095 downto 0);
    B_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_291 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_292 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_293 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_294 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_295 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_296 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_297 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_298 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_299 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_300 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_301 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_302 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_303 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_304 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_305 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_306 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_307 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_308 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_309 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_310 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_311 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_312 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_313 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_314 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_315 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_316 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_317 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_318 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_319 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_320 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_321 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_322 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_323 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_324 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_325 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_326 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_327 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_328 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_329 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_330 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_331 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_332 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_333 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_334 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_335 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_336 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_337 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_338 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_339 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_340 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_341 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_342 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_343 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_344 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_345 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_346 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_347 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_348 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_349 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_350 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_351 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_352 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_0_read_353 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of accelerator_matmul_64ul_64ul_1ul_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv64_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100011";
    constant ap_const_lv64_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv64_25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100101";
    constant ap_const_lv64_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100111";
    constant ap_const_lv64_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101001";
    constant ap_const_lv64_2A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_2B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101011";
    constant ap_const_lv64_2C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_2D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101101";
    constant ap_const_lv64_2E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_2F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101111";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110001";
    constant ap_const_lv64_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv64_33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110011";
    constant ap_const_lv64_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110101";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110111";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv64_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111001";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv64_3B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111011";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_start : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_done : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_idle : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_ready : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_ce0 : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_we0 : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_ce1 : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_weights_l0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_weights_l0_ce0 : STD_LOGIC;
    signal grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal agg_result_0_we1_local : STD_LOGIC;
    signal agg_result_0_ce1_local : STD_LOGIC;
    signal agg_result_0_address1_local : STD_LOGIC_VECTOR (5 downto 0);
    signal agg_result_0_we0_local : STD_LOGIC;
    signal agg_result_0_ce0_local : STD_LOGIC;
    signal agg_result_0_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        agg_result_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        agg_result_0_ce0 : OUT STD_LOGIC;
        agg_result_0_we0 : OUT STD_LOGIC;
        agg_result_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        agg_result_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        agg_result_0_ce1 : OUT STD_LOGIC;
        agg_result_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        weights_l0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        weights_l0_ce0 : OUT STD_LOGIC;
        weights_l0_q0 : IN STD_LOGIC_VECTOR (4095 downto 0);
        B_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_78 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_79 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_80 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_81 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_82 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_83 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_84 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_85 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_86 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_87 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_88 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_89 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_90 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_91 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_92 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_93 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_94 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_95 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_96 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_97 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_98 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_99 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_100 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_101 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_102 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_103 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_104 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_105 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_106 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_107 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_108 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_109 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_110 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_111 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_112 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_113 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_114 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_115 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_116 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_117 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_118 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_119 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_120 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_121 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_122 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_123 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_124 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_125 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_126 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_127 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_128 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_129 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_130 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_131 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_132 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_133 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_134 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_135 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_136 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_137 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_138 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_139 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_0_read_140 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247 : component accelerator_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_start,
        ap_done => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_done,
        ap_idle => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_idle,
        ap_ready => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_ready,
        agg_result_0_address0 => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_address0,
        agg_result_0_ce0 => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_ce0,
        agg_result_0_we0 => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_we0,
        agg_result_0_d0 => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_d0,
        agg_result_0_address1 => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_address1,
        agg_result_0_ce1 => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_ce1,
        agg_result_0_q1 => agg_result_0_q1,
        weights_l0_address0 => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_weights_l0_address0,
        weights_l0_ce0 => grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_weights_l0_ce0,
        weights_l0_q0 => weights_l0_q0,
        B_0_read => B_0_read,
        B_0_read_78 => B_0_read_291,
        B_0_read_79 => B_0_read_292,
        B_0_read_80 => B_0_read_293,
        B_0_read_81 => B_0_read_294,
        B_0_read_82 => B_0_read_295,
        B_0_read_83 => B_0_read_296,
        B_0_read_84 => B_0_read_297,
        B_0_read_85 => B_0_read_298,
        B_0_read_86 => B_0_read_299,
        B_0_read_87 => B_0_read_300,
        B_0_read_88 => B_0_read_301,
        B_0_read_89 => B_0_read_302,
        B_0_read_90 => B_0_read_303,
        B_0_read_91 => B_0_read_304,
        B_0_read_92 => B_0_read_305,
        B_0_read_93 => B_0_read_306,
        B_0_read_94 => B_0_read_307,
        B_0_read_95 => B_0_read_308,
        B_0_read_96 => B_0_read_309,
        B_0_read_97 => B_0_read_310,
        B_0_read_98 => B_0_read_311,
        B_0_read_99 => B_0_read_312,
        B_0_read_100 => B_0_read_313,
        B_0_read_101 => B_0_read_314,
        B_0_read_102 => B_0_read_315,
        B_0_read_103 => B_0_read_316,
        B_0_read_104 => B_0_read_317,
        B_0_read_105 => B_0_read_318,
        B_0_read_106 => B_0_read_319,
        B_0_read_107 => B_0_read_320,
        B_0_read_108 => B_0_read_321,
        B_0_read_109 => B_0_read_322,
        B_0_read_110 => B_0_read_323,
        B_0_read_111 => B_0_read_324,
        B_0_read_112 => B_0_read_325,
        B_0_read_113 => B_0_read_326,
        B_0_read_114 => B_0_read_327,
        B_0_read_115 => B_0_read_328,
        B_0_read_116 => B_0_read_329,
        B_0_read_117 => B_0_read_330,
        B_0_read_118 => B_0_read_331,
        B_0_read_119 => B_0_read_332,
        B_0_read_120 => B_0_read_333,
        B_0_read_121 => B_0_read_334,
        B_0_read_122 => B_0_read_335,
        B_0_read_123 => B_0_read_336,
        B_0_read_124 => B_0_read_337,
        B_0_read_125 => B_0_read_338,
        B_0_read_126 => B_0_read_339,
        B_0_read_127 => B_0_read_340,
        B_0_read_128 => B_0_read_341,
        B_0_read_129 => B_0_read_342,
        B_0_read_130 => B_0_read_343,
        B_0_read_131 => B_0_read_344,
        B_0_read_132 => B_0_read_345,
        B_0_read_133 => B_0_read_346,
        B_0_read_134 => B_0_read_347,
        B_0_read_135 => B_0_read_348,
        B_0_read_136 => B_0_read_349,
        B_0_read_137 => B_0_read_350,
        B_0_read_138 => B_0_read_351,
        B_0_read_139 => B_0_read_352,
        B_0_read_140 => B_0_read_353);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_ready = ap_const_logic_1)) then 
                    grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_done, ap_CS_fsm_state34)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    agg_result_0_address0_assign_proc : process(grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_address0, ap_CS_fsm_state34, agg_result_0_address0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            agg_result_0_address0 <= grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_address0;
        else 
            agg_result_0_address0 <= agg_result_0_address0_local;
        end if; 
    end process;


    agg_result_0_address0_local_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            agg_result_0_address0_local <= ap_const_lv64_3F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            agg_result_0_address0_local <= ap_const_lv64_3D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            agg_result_0_address0_local <= ap_const_lv64_3B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            agg_result_0_address0_local <= ap_const_lv64_39(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            agg_result_0_address0_local <= ap_const_lv64_37(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            agg_result_0_address0_local <= ap_const_lv64_35(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            agg_result_0_address0_local <= ap_const_lv64_33(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            agg_result_0_address0_local <= ap_const_lv64_31(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            agg_result_0_address0_local <= ap_const_lv64_2F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            agg_result_0_address0_local <= ap_const_lv64_2D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            agg_result_0_address0_local <= ap_const_lv64_2B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            agg_result_0_address0_local <= ap_const_lv64_29(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            agg_result_0_address0_local <= ap_const_lv64_27(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            agg_result_0_address0_local <= ap_const_lv64_25(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            agg_result_0_address0_local <= ap_const_lv64_23(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            agg_result_0_address0_local <= ap_const_lv64_21(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            agg_result_0_address0_local <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            agg_result_0_address0_local <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            agg_result_0_address0_local <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            agg_result_0_address0_local <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            agg_result_0_address0_local <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            agg_result_0_address0_local <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            agg_result_0_address0_local <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            agg_result_0_address0_local <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            agg_result_0_address0_local <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            agg_result_0_address0_local <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            agg_result_0_address0_local <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            agg_result_0_address0_local <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            agg_result_0_address0_local <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            agg_result_0_address0_local <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            agg_result_0_address0_local <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            agg_result_0_address0_local <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            agg_result_0_address0_local <= "XXXXXX";
        end if; 
    end process;


    agg_result_0_address1_assign_proc : process(grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_address1, ap_CS_fsm_state34, agg_result_0_address1_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            agg_result_0_address1 <= grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_address1;
        else 
            agg_result_0_address1 <= agg_result_0_address1_local;
        end if; 
    end process;


    agg_result_0_address1_local_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            agg_result_0_address1_local <= ap_const_lv64_3E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            agg_result_0_address1_local <= ap_const_lv64_3C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            agg_result_0_address1_local <= ap_const_lv64_3A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            agg_result_0_address1_local <= ap_const_lv64_38(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            agg_result_0_address1_local <= ap_const_lv64_36(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            agg_result_0_address1_local <= ap_const_lv64_34(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            agg_result_0_address1_local <= ap_const_lv64_32(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            agg_result_0_address1_local <= ap_const_lv64_30(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            agg_result_0_address1_local <= ap_const_lv64_2E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            agg_result_0_address1_local <= ap_const_lv64_2C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            agg_result_0_address1_local <= ap_const_lv64_2A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            agg_result_0_address1_local <= ap_const_lv64_28(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            agg_result_0_address1_local <= ap_const_lv64_26(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            agg_result_0_address1_local <= ap_const_lv64_24(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            agg_result_0_address1_local <= ap_const_lv64_22(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            agg_result_0_address1_local <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            agg_result_0_address1_local <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            agg_result_0_address1_local <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            agg_result_0_address1_local <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            agg_result_0_address1_local <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            agg_result_0_address1_local <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            agg_result_0_address1_local <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            agg_result_0_address1_local <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            agg_result_0_address1_local <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            agg_result_0_address1_local <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            agg_result_0_address1_local <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            agg_result_0_address1_local <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            agg_result_0_address1_local <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            agg_result_0_address1_local <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            agg_result_0_address1_local <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            agg_result_0_address1_local <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            agg_result_0_address1_local <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            agg_result_0_address1_local <= "XXXXXX";
        end if; 
    end process;


    agg_result_0_ce0_assign_proc : process(grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_ce0, ap_CS_fsm_state34, agg_result_0_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            agg_result_0_ce0 <= grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_ce0;
        else 
            agg_result_0_ce0 <= agg_result_0_ce0_local;
        end if; 
    end process;


    agg_result_0_ce0_local_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 
    = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            agg_result_0_ce0_local <= ap_const_logic_1;
        else 
            agg_result_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_0_ce1_assign_proc : process(grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_ce1, ap_CS_fsm_state34, agg_result_0_ce1_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            agg_result_0_ce1 <= grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_ce1;
        else 
            agg_result_0_ce1 <= agg_result_0_ce1_local;
        end if; 
    end process;


    agg_result_0_ce1_local_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 
    = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            agg_result_0_ce1_local <= ap_const_logic_1;
        else 
            agg_result_0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_0_d0_assign_proc : process(grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_d0, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            agg_result_0_d0 <= grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_d0;
        else 
            agg_result_0_d0 <= ap_const_lv64_0;
        end if; 
    end process;

    agg_result_0_d1 <= ap_const_lv64_0;

    agg_result_0_we0_assign_proc : process(grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_we0, ap_CS_fsm_state34, agg_result_0_we0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            agg_result_0_we0 <= grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_agg_result_0_we0;
        else 
            agg_result_0_we0 <= agg_result_0_we0_local;
        end if; 
    end process;


    agg_result_0_we0_local_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 
    = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            agg_result_0_we0_local <= ap_const_logic_1;
        else 
            agg_result_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_0_we1 <= agg_result_0_we1_local;

    agg_result_0_we1_local_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 
    = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            agg_result_0_we1_local <= ap_const_logic_1;
        else 
            agg_result_0_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_done)
    begin
        if ((grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_done, ap_CS_fsm_state34)
    begin
        if ((((grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_done, ap_CS_fsm_state34)
    begin
        if (((grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_start <= grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_ap_start_reg;
    weights_l0_address0 <= grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_weights_l0_address0;
    weights_l0_ce0 <= grp_matmul_64ul_64ul_1ul_Pipeline_VITIS_LOOP_81_1_fu_1247_weights_l0_ce0;
end behav;
