// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_softmax_10_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        softmax_input_address0,
        softmax_input_ce0,
        softmax_input_q0,
        softmax_input_address1,
        softmax_input_ce1,
        softmax_input_q1,
        softmax_input_load_out,
        softmax_input_load_out_ap_vld,
        grp_fu_191_p_din0,
        grp_fu_191_p_din1,
        grp_fu_191_p_opcode,
        grp_fu_191_p_dout0,
        grp_fu_191_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] softmax_input_address0;
output   softmax_input_ce0;
input  [63:0] softmax_input_q0;
output  [3:0] softmax_input_address1;
output   softmax_input_ce1;
input  [63:0] softmax_input_q1;
output  [63:0] softmax_input_load_out;
output   softmax_input_load_out_ap_vld;
output  [63:0] grp_fu_191_p_din0;
output  [63:0] grp_fu_191_p_din1;
output  [4:0] grp_fu_191_p_opcode;
input  [0:0] grp_fu_191_p_dout0;
output   grp_fu_191_p_ce;

reg ap_idle;
reg softmax_input_load_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln5658_fu_124_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] p_it1_1_reg_265;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln5658_reg_275;
wire   [3:0] add_ln5658_fu_130_p2;
reg   [3:0] add_ln5658_reg_279;
reg   [63:0] softmax_input_load_reg_289;
wire   [63:0] maxLogit_fu_146_p1;
wire   [63:0] bitcast_ln85_fu_151_p1;
wire   [0:0] icmp_ln85_2_fu_170_p2;
reg   [0:0] icmp_ln85_2_reg_305;
wire   [0:0] icmp_ln85_3_fu_176_p2;
reg   [0:0] icmp_ln85_3_reg_310;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln83_fu_119_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln5658_fu_136_p1;
reg   [3:0] idx_fu_48;
wire    ap_loop_init;
reg   [63:0] p_it1_fu_52;
wire   [63:0] p_result_fu_239_p3;
reg   [63:0] ap_sig_allocacmp_p_it1_1;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_idle_pp0_0to0;
wire    ap_block_pp0_stage0_01001;
reg    softmax_input_ce1_local;
reg    softmax_input_ce0_local;
wire    ap_block_pp0_stage0;
wire   [3:0] lshr_ln_fu_109_p4;
wire   [10:0] tmp_2_fu_156_p4;
wire   [51:0] trunc_ln85_1_fu_166_p1;
wire   [6:0] p_it2_fu_182_p3;
wire   [10:0] tmp_1_fu_193_p4;
wire   [51:0] trunc_ln85_fu_202_p1;
wire   [0:0] icmp_ln85_1_fu_211_p2;
wire   [0:0] icmp_ln85_fu_205_p2;
wire   [0:0] or_ln85_1_fu_223_p2;
wire   [0:0] or_ln85_fu_217_p2;
wire   [0:0] and_ln85_fu_227_p2;
wire   [0:0] and_ln85_1_fu_233_p2;
wire   [63:0] zext_ln5653_fu_189_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 idx_fu_48 = 4'd0;
#0 p_it1_fu_52 = 64'd0;
#0 ap_done_reg = 1'b0;
end

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        idx_fu_48 <= 4'd0;
    end else if (((icmp_ln5658_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        idx_fu_48 <= add_ln5658_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        p_it1_fu_52 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_it1_fu_52 <= p_result_fu_239_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln5658_reg_279 <= add_ln5658_fu_130_p2;
        icmp_ln5658_reg_275 <= icmp_ln5658_fu_124_p2;
        p_it1_1_reg_265 <= ap_sig_allocacmp_p_it1_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln85_2_reg_305 <= icmp_ln85_2_fu_170_p2;
        icmp_ln85_3_reg_310 <= icmp_ln85_3_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        softmax_input_load_reg_289 <= softmax_input_q1;
    end
end

always @ (*) begin
    if (((icmp_ln5658_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5658_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_p_it1_1 = p_result_fu_239_p3;
    end else begin
        ap_sig_allocacmp_p_it1_1 = p_it1_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        softmax_input_ce0_local = 1'b1;
    end else begin
        softmax_input_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        softmax_input_ce1_local = 1'b1;
    end else begin
        softmax_input_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5658_reg_275 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        softmax_input_load_out_ap_vld = 1'b1;
    end else begin
        softmax_input_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln5658_fu_130_p2 = (idx_fu_48 + 4'd1);

assign and_ln85_1_fu_233_p2 = (grp_fu_191_p_dout0 & and_ln85_fu_227_p2);

assign and_ln85_fu_227_p2 = (or_ln85_fu_217_p2 & or_ln85_1_fu_223_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign bitcast_ln85_fu_151_p1 = softmax_input_q0;

assign grp_fu_191_p_ce = 1'b1;

assign grp_fu_191_p_din0 = maxLogit_fu_146_p1;

assign grp_fu_191_p_din1 = bitcast_ln85_fu_151_p1;

assign grp_fu_191_p_opcode = 5'd4;

assign icmp_ln5658_fu_124_p2 = ((idx_fu_48 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln85_1_fu_211_p2 = ((trunc_ln85_fu_202_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln85_2_fu_170_p2 = ((tmp_2_fu_156_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln85_3_fu_176_p2 = ((trunc_ln85_1_fu_166_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_205_p2 = ((tmp_1_fu_193_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign lshr_ln_fu_109_p4 = {{ap_sig_allocacmp_p_it1_1[6:3]}};

assign maxLogit_fu_146_p1 = softmax_input_q1;

assign or_ln85_1_fu_223_p2 = (icmp_ln85_3_reg_310 | icmp_ln85_2_reg_305);

assign or_ln85_fu_217_p2 = (icmp_ln85_fu_205_p2 | icmp_ln85_1_fu_211_p2);

assign p_it2_fu_182_p3 = {{add_ln5658_reg_279}, {3'd0}};

assign p_result_fu_239_p3 = ((and_ln85_1_fu_233_p2[0:0] == 1'b1) ? zext_ln5653_fu_189_p1 : p_it1_1_reg_265);

assign softmax_input_address0 = zext_ln5658_fu_136_p1;

assign softmax_input_address1 = zext_ln83_fu_119_p1;

assign softmax_input_ce0 = softmax_input_ce0_local;

assign softmax_input_ce1 = softmax_input_ce1_local;

assign softmax_input_load_out = softmax_input_q1;

assign tmp_1_fu_193_p4 = {{softmax_input_load_reg_289[62:52]}};

assign tmp_2_fu_156_p4 = {{softmax_input_q0[62:52]}};

assign trunc_ln85_1_fu_166_p1 = softmax_input_q0[51:0];

assign trunc_ln85_fu_202_p1 = softmax_input_load_reg_289[51:0];

assign zext_ln5653_fu_189_p1 = p_it2_fu_182_p3;

assign zext_ln5658_fu_136_p1 = add_ln5658_fu_130_p2;

assign zext_ln83_fu_119_p1 = lshr_ln_fu_109_p4;

endmodule //accelerator_softmax_10_Pipeline_1
