// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mid_0_address0,
        mid_0_ce0,
        mid_0_q0,
        biases_val,
        net_0_address0,
        net_0_ce0,
        net_0_we0,
        net_0_d0,
        grp_fu_3159_p_din0,
        grp_fu_3159_p_din1,
        grp_fu_3159_p_opcode,
        grp_fu_3159_p_dout0,
        grp_fu_3159_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] mid_0_address0;
output   mid_0_ce0;
input  [63:0] mid_0_q0;
input  [4095:0] biases_val;
output  [5:0] net_0_address0;
output   net_0_ce0;
output   net_0_we0;
output  [63:0] net_0_d0;
output  [63:0] grp_fu_3159_p_din0;
output  [63:0] grp_fu_3159_p_din1;
output  [0:0] grp_fu_3159_p_opcode;
input  [63:0] grp_fu_3159_p_dout0;
output   grp_fu_3159_p_ce;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln161_fu_86_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln161_fu_98_p1;
reg   [63:0] zext_ln161_reg_149;
reg   [63:0] zext_ln161_reg_149_pp0_iter1_reg;
reg   [63:0] zext_ln161_reg_149_pp0_iter2_reg;
reg   [63:0] zext_ln161_reg_149_pp0_iter3_reg;
reg   [63:0] zext_ln161_reg_149_pp0_iter4_reg;
reg   [63:0] zext_ln161_reg_149_pp0_iter5_reg;
reg   [63:0] zext_ln161_reg_149_pp0_iter6_reg;
wire   [63:0] trunc_ln163_fu_125_p1;
reg   [63:0] trunc_ln163_reg_159;
reg   [63:0] trunc_ln163_reg_159_pp0_iter1_reg;
reg   [63:0] mid_0_load_reg_164;
wire   [63:0] bitcast_ln163_fu_134_p1;
reg   [63:0] add_reg_174;
wire    ap_block_pp0_stage0;
reg   [6:0] i_17_fu_38;
wire   [6:0] i_18_fu_92_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i;
reg    mid_0_ce0_local;
reg    net_0_we0_local;
reg    net_0_ce0_local;
wire   [5:0] trunc_ln56_fu_103_p1;
wire   [11:0] shl_ln_fu_107_p3;
wire   [4095:0] zext_ln163_fu_115_p1;
wire   [4095:0] lshr_ln163_fu_119_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 i_17_fu_38 = 7'd0;
#0 ap_done_reg = 1'b0;
end

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln161_fu_86_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_17_fu_38 <= i_18_fu_92_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_17_fu_38 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_reg_174 <= grp_fu_3159_p_dout0;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        zext_ln161_reg_149_pp0_iter2_reg[6 : 0] <= zext_ln161_reg_149_pp0_iter1_reg[6 : 0];
        zext_ln161_reg_149_pp0_iter3_reg[6 : 0] <= zext_ln161_reg_149_pp0_iter2_reg[6 : 0];
        zext_ln161_reg_149_pp0_iter4_reg[6 : 0] <= zext_ln161_reg_149_pp0_iter3_reg[6 : 0];
        zext_ln161_reg_149_pp0_iter5_reg[6 : 0] <= zext_ln161_reg_149_pp0_iter4_reg[6 : 0];
        zext_ln161_reg_149_pp0_iter6_reg[6 : 0] <= zext_ln161_reg_149_pp0_iter5_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        mid_0_load_reg_164 <= mid_0_q0;
        trunc_ln163_reg_159 <= trunc_ln163_fu_125_p1;
        trunc_ln163_reg_159_pp0_iter1_reg <= trunc_ln163_reg_159;
        zext_ln161_reg_149[6 : 0] <= zext_ln161_fu_98_p1[6 : 0];
        zext_ln161_reg_149_pp0_iter1_reg[6 : 0] <= zext_ln161_reg_149[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln161_fu_86_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 7'd0;
    end else begin
        ap_sig_allocacmp_i = i_17_fu_38;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mid_0_ce0_local = 1'b1;
    end else begin
        mid_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        net_0_ce0_local = 1'b1;
    end else begin
        net_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        net_0_we0_local = 1'b1;
    end else begin
        net_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bitcast_ln163_fu_134_p1 = trunc_ln163_reg_159_pp0_iter1_reg;

assign grp_fu_3159_p_ce = 1'b1;

assign grp_fu_3159_p_din0 = mid_0_load_reg_164;

assign grp_fu_3159_p_din1 = bitcast_ln163_fu_134_p1;

assign grp_fu_3159_p_opcode = 2'd0;

assign i_18_fu_92_p2 = (ap_sig_allocacmp_i + 7'd1);

assign icmp_ln161_fu_86_p2 = ((ap_sig_allocacmp_i == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln163_fu_119_p2 = biases_val >> zext_ln163_fu_115_p1;

assign mid_0_address0 = zext_ln161_fu_98_p1;

assign mid_0_ce0 = mid_0_ce0_local;

assign net_0_address0 = zext_ln161_reg_149_pp0_iter6_reg;

assign net_0_ce0 = net_0_ce0_local;

assign net_0_d0 = add_reg_174;

assign net_0_we0 = net_0_we0_local;

assign shl_ln_fu_107_p3 = {{trunc_ln56_fu_103_p1}, {6'd0}};

assign trunc_ln163_fu_125_p1 = lshr_ln163_fu_119_p2[63:0];

assign trunc_ln56_fu_103_p1 = ap_sig_allocacmp_i[5:0];

assign zext_ln161_fu_98_p1 = ap_sig_allocacmp_i;

assign zext_ln163_fu_115_p1 = shl_ln_fu_107_p3;

always @ (posedge ap_clk) begin
    zext_ln161_reg_149[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln161_reg_149_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln161_reg_149_pp0_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln161_reg_149_pp0_iter3_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln161_reg_149_pp0_iter4_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln161_reg_149_pp0_iter5_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln161_reg_149_pp0_iter6_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //accelerator_forwardPropagation_64_64_Pipeline_VITIS_LOOP_161_1
