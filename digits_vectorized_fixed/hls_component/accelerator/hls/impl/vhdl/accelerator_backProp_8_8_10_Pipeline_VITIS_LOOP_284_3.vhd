-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_backProp_8_8_10_Pipeline_VITIS_LOOP_284_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    add_i_913_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add_i_911_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add_i_99_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add_i_97_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add_i_95_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add_i_93_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add_i_91_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    add_i_915_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    mux_case_78_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    mux_case_67_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    mux_case_56_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    mux_case_45_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    mux_case_34_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    mux_case_23_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    mux_case_12_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    mux_case_01_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    d_activation_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_activation_0_ce0 : OUT STD_LOGIC;
    d_activation_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    agg_result_0_0_local_0_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_0_0_local_0_out_ap_vld : OUT STD_LOGIC;
    agg_result_1_0_local_0_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_1_0_local_0_out_ap_vld : OUT STD_LOGIC;
    agg_result_2_0_local_0_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_2_0_local_0_out_ap_vld : OUT STD_LOGIC;
    agg_result_3_0_local_0_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_3_0_local_0_out_ap_vld : OUT STD_LOGIC;
    agg_result_4_0_local_0_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_4_0_local_0_out_ap_vld : OUT STD_LOGIC;
    agg_result_5_0_local_0_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_5_0_local_0_out_ap_vld : OUT STD_LOGIC;
    agg_result_6_0_local_0_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_6_0_local_0_out_ap_vld : OUT STD_LOGIC;
    agg_result_7_0_local_0_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    agg_result_7_0_local_0_out_ap_vld : OUT STD_LOGIC;
    grp_fu_2568_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2568_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2568_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2568_p_ce : OUT STD_LOGIC );
end;


architecture behav of accelerator_backProp_8_8_10_Pipeline_VITIS_LOOP_284_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln284_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ii_1_reg_745 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln284_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln284_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln284_reg_760 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln284_fu_466_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln284_reg_765 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_469_p19 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln284_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ii_fu_100 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ii_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mux_case_09_fu_104 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_mux_case_09_load : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal mux_case_110_fu_108 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_mux_case_110_load : STD_LOGIC_VECTOR (63 downto 0);
    signal mux_case_211_fu_112 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_mux_case_211_load : STD_LOGIC_VECTOR (63 downto 0);
    signal mux_case_312_fu_116 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_mux_case_312_load : STD_LOGIC_VECTOR (63 downto 0);
    signal mux_case_413_fu_120 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_mux_case_413_load : STD_LOGIC_VECTOR (63 downto 0);
    signal mux_case_514_fu_124 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_mux_case_514_load : STD_LOGIC_VECTOR (63 downto 0);
    signal mux_case_615_fu_128 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_mux_case_615_load : STD_LOGIC_VECTOR (63 downto 0);
    signal mux_case_716_fu_132 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_mux_case_716_load : STD_LOGIC_VECTOR (63 downto 0);
    signal agg_result_7_0_local_0_fu_136 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal agg_result_6_0_local_0_fu_140 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal agg_result_5_0_local_0_fu_144 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal agg_result_4_0_local_0_fu_148 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal agg_result_3_0_local_0_fu_152 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal agg_result_2_0_local_0_fu_156 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal agg_result_1_0_local_0_fu_160 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal agg_result_0_0_local_0_fu_164 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal d_activation_0_ce0_local : STD_LOGIC;
    signal tmp_s_fu_469_p17 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_469_p18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_s_fu_469_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_469_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_469_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_469_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_469_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_469_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_469_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_469_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_sparsemux_17_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_17_3_64_1_1_U1140 : component accelerator_sparsemux_17_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 64,
        CASE1 => "001",
        din1_WIDTH => 64,
        CASE2 => "010",
        din2_WIDTH => 64,
        CASE3 => "011",
        din3_WIDTH => 64,
        CASE4 => "100",
        din4_WIDTH => 64,
        CASE5 => "101",
        din5_WIDTH => 64,
        CASE6 => "110",
        din6_WIDTH => 64,
        CASE7 => "111",
        din7_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => ap_sig_allocacmp_mux_case_09_load,
        din1 => ap_sig_allocacmp_mux_case_110_load,
        din2 => ap_sig_allocacmp_mux_case_211_load,
        din3 => ap_sig_allocacmp_mux_case_312_load,
        din4 => ap_sig_allocacmp_mux_case_413_load,
        din5 => ap_sig_allocacmp_mux_case_514_load,
        din6 => ap_sig_allocacmp_mux_case_615_load,
        din7 => ap_sig_allocacmp_mux_case_716_load,
        def => tmp_s_fu_469_p17,
        sel => tmp_s_fu_469_p18,
        dout => tmp_s_fu_469_p19);

    flow_control_loop_pipe_sequential_init_U : component accelerator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    agg_result_0_0_local_0_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                agg_result_0_0_local_0_fu_164 <= add_i_913_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_0))) then 
                agg_result_0_0_local_0_fu_164 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    agg_result_1_0_local_0_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                agg_result_1_0_local_0_fu_160 <= add_i_911_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_1))) then 
                agg_result_1_0_local_0_fu_160 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    agg_result_2_0_local_0_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                agg_result_2_0_local_0_fu_156 <= add_i_99_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_2))) then 
                agg_result_2_0_local_0_fu_156 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    agg_result_3_0_local_0_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                agg_result_3_0_local_0_fu_152 <= add_i_97_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_3))) then 
                agg_result_3_0_local_0_fu_152 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    agg_result_4_0_local_0_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                agg_result_4_0_local_0_fu_148 <= add_i_95_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_4))) then 
                agg_result_4_0_local_0_fu_148 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    agg_result_5_0_local_0_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                agg_result_5_0_local_0_fu_144 <= add_i_93_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_5))) then 
                agg_result_5_0_local_0_fu_144 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    agg_result_6_0_local_0_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                agg_result_6_0_local_0_fu_140 <= add_i_91_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_6))) then 
                agg_result_6_0_local_0_fu_140 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    agg_result_7_0_local_0_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                agg_result_7_0_local_0_fu_136 <= add_i_915_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_7))) then 
                agg_result_7_0_local_0_fu_136 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    ii_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                ii_fu_100 <= ap_const_lv4_0;
            elsif (((icmp_ln284_reg_751 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ii_fu_100 <= add_ln284_reg_760;
            end if; 
        end if;
    end process;

    mux_case_09_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                mux_case_09_fu_104 <= mux_case_01_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_0))) then 
                mux_case_09_fu_104 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_110_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                mux_case_110_fu_108 <= mux_case_12_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_1))) then 
                mux_case_110_fu_108 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_211_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                mux_case_211_fu_112 <= mux_case_23_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_2))) then 
                mux_case_211_fu_112 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_312_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                mux_case_312_fu_116 <= mux_case_34_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_3))) then 
                mux_case_312_fu_116 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_413_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                mux_case_413_fu_120 <= mux_case_45_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_4))) then 
                mux_case_413_fu_120 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_514_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                mux_case_514_fu_124 <= mux_case_56_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_5))) then 
                mux_case_514_fu_124 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_615_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                mux_case_615_fu_128 <= mux_case_67_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_6))) then 
                mux_case_615_fu_128 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_716_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                mux_case_716_fu_132 <= mux_case_78_reload;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_7))) then 
                mux_case_716_fu_132 <= grp_fu_2568_p_dout0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln284_reg_760 <= add_ln284_fu_437_p2;
                trunc_ln284_reg_765 <= trunc_ln284_fu_466_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln284_reg_751 <= icmp_ln284_fu_426_p2;
                ii_1_reg_745 <= ap_sig_allocacmp_ii_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln284_fu_437_p2 <= std_logic_vector(unsigned(ii_1_reg_745) + unsigned(ap_const_lv4_1));
    agg_result_0_0_local_0_out <= agg_result_0_0_local_0_fu_164;

    agg_result_0_0_local_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln284_reg_751, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln284_reg_751 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            agg_result_0_0_local_0_out_ap_vld <= ap_const_logic_1;
        else 
            agg_result_0_0_local_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_1_0_local_0_out <= agg_result_1_0_local_0_fu_160;

    agg_result_1_0_local_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln284_reg_751, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln284_reg_751 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            agg_result_1_0_local_0_out_ap_vld <= ap_const_logic_1;
        else 
            agg_result_1_0_local_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_2_0_local_0_out <= agg_result_2_0_local_0_fu_156;

    agg_result_2_0_local_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln284_reg_751, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln284_reg_751 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            agg_result_2_0_local_0_out_ap_vld <= ap_const_logic_1;
        else 
            agg_result_2_0_local_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_3_0_local_0_out <= agg_result_3_0_local_0_fu_152;

    agg_result_3_0_local_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln284_reg_751, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln284_reg_751 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            agg_result_3_0_local_0_out_ap_vld <= ap_const_logic_1;
        else 
            agg_result_3_0_local_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_4_0_local_0_out <= agg_result_4_0_local_0_fu_148;

    agg_result_4_0_local_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln284_reg_751, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln284_reg_751 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            agg_result_4_0_local_0_out_ap_vld <= ap_const_logic_1;
        else 
            agg_result_4_0_local_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_5_0_local_0_out <= agg_result_5_0_local_0_fu_144;

    agg_result_5_0_local_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln284_reg_751, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln284_reg_751 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            agg_result_5_0_local_0_out_ap_vld <= ap_const_logic_1;
        else 
            agg_result_5_0_local_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_6_0_local_0_out <= agg_result_6_0_local_0_fu_140;

    agg_result_6_0_local_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln284_reg_751, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln284_reg_751 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            agg_result_6_0_local_0_out_ap_vld <= ap_const_logic_1;
        else 
            agg_result_6_0_local_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_7_0_local_0_out <= agg_result_7_0_local_0_fu_136;

    agg_result_7_0_local_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln284_reg_751, ap_loop_exit_ready, ap_block_pp0_stage1_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln284_reg_751 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            agg_result_7_0_local_0_out_ap_vld <= ap_const_logic_1;
        else 
            agg_result_7_0_local_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln284_reg_751)
    begin
        if (((icmp_ln284_reg_751 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ii_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ii_fu_100, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_ii_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_ii_1 <= ii_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_mux_case_09_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln284_reg_765, mux_case_09_fu_104, ap_block_pp0_stage1, grp_fu_2568_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_0))) then 
            ap_sig_allocacmp_mux_case_09_load <= grp_fu_2568_p_dout0;
        else 
            ap_sig_allocacmp_mux_case_09_load <= mux_case_09_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_mux_case_110_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln284_reg_765, ap_block_pp0_stage1, mux_case_110_fu_108, grp_fu_2568_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_1))) then 
            ap_sig_allocacmp_mux_case_110_load <= grp_fu_2568_p_dout0;
        else 
            ap_sig_allocacmp_mux_case_110_load <= mux_case_110_fu_108;
        end if; 
    end process;


    ap_sig_allocacmp_mux_case_211_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln284_reg_765, ap_block_pp0_stage1, mux_case_211_fu_112, grp_fu_2568_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_2))) then 
            ap_sig_allocacmp_mux_case_211_load <= grp_fu_2568_p_dout0;
        else 
            ap_sig_allocacmp_mux_case_211_load <= mux_case_211_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_mux_case_312_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln284_reg_765, ap_block_pp0_stage1, mux_case_312_fu_116, grp_fu_2568_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_3))) then 
            ap_sig_allocacmp_mux_case_312_load <= grp_fu_2568_p_dout0;
        else 
            ap_sig_allocacmp_mux_case_312_load <= mux_case_312_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_mux_case_413_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln284_reg_765, ap_block_pp0_stage1, mux_case_413_fu_120, grp_fu_2568_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_4))) then 
            ap_sig_allocacmp_mux_case_413_load <= grp_fu_2568_p_dout0;
        else 
            ap_sig_allocacmp_mux_case_413_load <= mux_case_413_fu_120;
        end if; 
    end process;


    ap_sig_allocacmp_mux_case_514_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln284_reg_765, ap_block_pp0_stage1, mux_case_514_fu_124, grp_fu_2568_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_5))) then 
            ap_sig_allocacmp_mux_case_514_load <= grp_fu_2568_p_dout0;
        else 
            ap_sig_allocacmp_mux_case_514_load <= mux_case_514_fu_124;
        end if; 
    end process;


    ap_sig_allocacmp_mux_case_615_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln284_reg_765, ap_block_pp0_stage1, mux_case_615_fu_128, grp_fu_2568_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_6))) then 
            ap_sig_allocacmp_mux_case_615_load <= grp_fu_2568_p_dout0;
        else 
            ap_sig_allocacmp_mux_case_615_load <= mux_case_615_fu_128;
        end if; 
    end process;


    ap_sig_allocacmp_mux_case_716_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln284_reg_765, ap_block_pp0_stage1, mux_case_716_fu_132, grp_fu_2568_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln284_reg_765 = ap_const_lv3_7))) then 
            ap_sig_allocacmp_mux_case_716_load <= grp_fu_2568_p_dout0;
        else 
            ap_sig_allocacmp_mux_case_716_load <= mux_case_716_fu_132;
        end if; 
    end process;

    d_activation_0_address0 <= zext_ln284_fu_432_p1(3 - 1 downto 0);
    d_activation_0_ce0 <= d_activation_0_ce0_local;

    d_activation_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_activation_0_ce0_local <= ap_const_logic_1;
        else 
            d_activation_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2568_p_ce <= ap_const_logic_1;
    grp_fu_2568_p_din0 <= tmp_s_fu_469_p19;
    grp_fu_2568_p_din1 <= d_activation_0_q0;
    icmp_ln284_fu_426_p2 <= "1" when (ap_sig_allocacmp_ii_1 = ap_const_lv4_8) else "0";
    tmp_s_fu_469_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_s_fu_469_p18 <= ii_1_reg_745(3 - 1 downto 0);
    trunc_ln284_fu_466_p1 <= ii_1_reg_745(3 - 1 downto 0);
    zext_ln284_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_ii_1),64));
end behav;
