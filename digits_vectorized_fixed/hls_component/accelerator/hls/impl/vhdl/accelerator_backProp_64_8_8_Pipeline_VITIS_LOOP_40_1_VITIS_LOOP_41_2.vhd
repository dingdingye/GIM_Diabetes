-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_backProp_64_8_8_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_41_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w_l_plus1_T_77_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_77_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_77_we0 : OUT STD_LOGIC;
    w_l_plus1_T_77_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_76_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_76_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_76_we0 : OUT STD_LOGIC;
    w_l_plus1_T_76_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_75_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_75_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_75_we0 : OUT STD_LOGIC;
    w_l_plus1_T_75_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_74_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_74_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_74_we0 : OUT STD_LOGIC;
    w_l_plus1_T_74_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_73_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_73_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_73_we0 : OUT STD_LOGIC;
    w_l_plus1_T_73_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_72_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_72_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_72_we0 : OUT STD_LOGIC;
    w_l_plus1_T_72_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_71_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_71_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_71_we0 : OUT STD_LOGIC;
    w_l_plus1_T_71_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_we0 : OUT STD_LOGIC;
    w_l_plus1_T_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_val : IN STD_LOGIC_VECTOR (4095 downto 0) );
end;


architecture behav of accelerator_backProp_64_8_8_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_41_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln40_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln41_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_5_fu_70 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal j_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_5_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_28_fu_74 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln40_1_fu_248_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_28_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_78 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln40_fu_216_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal w_l_plus1_T_76_we0_local : STD_LOGIC;
    signal trunc_ln40_fu_256_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln42_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_l_plus1_T_76_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_75_we0_local : STD_LOGIC;
    signal w_l_plus1_T_75_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_74_we0_local : STD_LOGIC;
    signal w_l_plus1_T_74_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_73_we0_local : STD_LOGIC;
    signal w_l_plus1_T_73_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_72_we0_local : STD_LOGIC;
    signal w_l_plus1_T_72_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_71_we0_local : STD_LOGIC;
    signal w_l_plus1_T_71_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_we0_local : STD_LOGIC;
    signal w_l_plus1_T_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_77_we0_local : STD_LOGIC;
    signal w_l_plus1_T_77_ce0_local : STD_LOGIC;
    signal icmp_ln41_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_228_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln40_fu_240_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln56_fu_272_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln_fu_276_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln42_fu_286_p1 : STD_LOGIC_VECTOR (4095 downto 0);
    signal lshr_ln42_fu_290_p2 : STD_LOGIC_VECTOR (4095 downto 0);
    signal trunc_ln42_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component accelerator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_28_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln40_fu_210_p2 = ap_const_lv1_0)) then 
                    i_28_fu_74 <= select_ln40_1_fu_248_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_28_fu_74 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln40_fu_210_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_78 <= add_ln40_fu_216_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_78 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_5_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln40_fu_210_p2 = ap_const_lv1_0)) then 
                    j_5_fu_70 <= j_fu_312_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_5_fu_70 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln40_fu_216_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln_fu_276_p4 <= ((trunc_ln40_fu_256_p1 & trunc_ln56_fu_272_p1) & ap_const_lv6_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_210_p2)
    begin
        if (((icmp_ln40_fu_210_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_28_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_28_fu_74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_28_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_28_load <= i_28_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_j_5_load_assign_proc : process(ap_CS_fsm_state1, j_5_fu_70, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_5_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_5_load <= j_5_fu_70;
        end if; 
    end process;

    bitcast_ln42_fu_300_p1 <= trunc_ln42_fu_296_p1;
    i_fu_228_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_28_load) + unsigned(ap_const_lv4_1));
    icmp_ln40_fu_210_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    icmp_ln41_fu_234_p2 <= "1" when (ap_sig_allocacmp_j_5_load = ap_const_lv4_8) else "0";
    j_fu_312_p2 <= std_logic_vector(unsigned(select_ln40_fu_240_p3) + unsigned(ap_const_lv4_1));
    lshr_ln42_fu_290_p2 <= std_logic_vector(shift_right(unsigned(w_l_plus1_val),to_integer(unsigned('0' & zext_ln42_fu_286_p1(31-1 downto 0)))));
    select_ln40_1_fu_248_p3 <= 
        i_fu_228_p2 when (icmp_ln41_fu_234_p2(0) = '1') else 
        ap_sig_allocacmp_i_28_load;
    select_ln40_fu_240_p3 <= 
        ap_const_lv4_0 when (icmp_ln41_fu_234_p2(0) = '1') else 
        ap_sig_allocacmp_j_5_load;
    trunc_ln40_fu_256_p1 <= select_ln40_1_fu_248_p3(3 - 1 downto 0);
    trunc_ln42_fu_296_p1 <= lshr_ln42_fu_290_p2(64 - 1 downto 0);
    trunc_ln56_fu_272_p1 <= select_ln40_fu_240_p3(3 - 1 downto 0);
    w_l_plus1_T_71_address0 <= zext_ln41_fu_260_p1(3 - 1 downto 0);
    w_l_plus1_T_71_ce0 <= w_l_plus1_T_71_ce0_local;

    w_l_plus1_T_71_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_l_plus1_T_71_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_71_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_71_d0 <= bitcast_ln42_fu_300_p1;
    w_l_plus1_T_71_we0 <= w_l_plus1_T_71_we0_local;

    w_l_plus1_T_71_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_210_p2, trunc_ln40_fu_256_p1)
    begin
        if (((icmp_ln40_fu_210_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_256_p1 = ap_const_lv3_1))) then 
            w_l_plus1_T_71_we0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_71_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_72_address0 <= zext_ln41_fu_260_p1(3 - 1 downto 0);
    w_l_plus1_T_72_ce0 <= w_l_plus1_T_72_ce0_local;

    w_l_plus1_T_72_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_l_plus1_T_72_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_72_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_72_d0 <= bitcast_ln42_fu_300_p1;
    w_l_plus1_T_72_we0 <= w_l_plus1_T_72_we0_local;

    w_l_plus1_T_72_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_210_p2, trunc_ln40_fu_256_p1)
    begin
        if (((icmp_ln40_fu_210_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_256_p1 = ap_const_lv3_2))) then 
            w_l_plus1_T_72_we0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_72_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_73_address0 <= zext_ln41_fu_260_p1(3 - 1 downto 0);
    w_l_plus1_T_73_ce0 <= w_l_plus1_T_73_ce0_local;

    w_l_plus1_T_73_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_l_plus1_T_73_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_73_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_73_d0 <= bitcast_ln42_fu_300_p1;
    w_l_plus1_T_73_we0 <= w_l_plus1_T_73_we0_local;

    w_l_plus1_T_73_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_210_p2, trunc_ln40_fu_256_p1)
    begin
        if (((icmp_ln40_fu_210_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_256_p1 = ap_const_lv3_3))) then 
            w_l_plus1_T_73_we0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_73_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_74_address0 <= zext_ln41_fu_260_p1(3 - 1 downto 0);
    w_l_plus1_T_74_ce0 <= w_l_plus1_T_74_ce0_local;

    w_l_plus1_T_74_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_l_plus1_T_74_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_74_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_74_d0 <= bitcast_ln42_fu_300_p1;
    w_l_plus1_T_74_we0 <= w_l_plus1_T_74_we0_local;

    w_l_plus1_T_74_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_210_p2, trunc_ln40_fu_256_p1)
    begin
        if (((icmp_ln40_fu_210_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_256_p1 = ap_const_lv3_4))) then 
            w_l_plus1_T_74_we0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_74_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_75_address0 <= zext_ln41_fu_260_p1(3 - 1 downto 0);
    w_l_plus1_T_75_ce0 <= w_l_plus1_T_75_ce0_local;

    w_l_plus1_T_75_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_l_plus1_T_75_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_75_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_75_d0 <= bitcast_ln42_fu_300_p1;
    w_l_plus1_T_75_we0 <= w_l_plus1_T_75_we0_local;

    w_l_plus1_T_75_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_210_p2, trunc_ln40_fu_256_p1)
    begin
        if (((icmp_ln40_fu_210_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_256_p1 = ap_const_lv3_5))) then 
            w_l_plus1_T_75_we0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_75_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_76_address0 <= zext_ln41_fu_260_p1(3 - 1 downto 0);
    w_l_plus1_T_76_ce0 <= w_l_plus1_T_76_ce0_local;

    w_l_plus1_T_76_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_l_plus1_T_76_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_76_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_76_d0 <= bitcast_ln42_fu_300_p1;
    w_l_plus1_T_76_we0 <= w_l_plus1_T_76_we0_local;

    w_l_plus1_T_76_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_210_p2, trunc_ln40_fu_256_p1)
    begin
        if (((icmp_ln40_fu_210_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_256_p1 = ap_const_lv3_6))) then 
            w_l_plus1_T_76_we0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_76_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_77_address0 <= zext_ln41_fu_260_p1(3 - 1 downto 0);
    w_l_plus1_T_77_ce0 <= w_l_plus1_T_77_ce0_local;

    w_l_plus1_T_77_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_l_plus1_T_77_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_77_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_77_d0 <= bitcast_ln42_fu_300_p1;
    w_l_plus1_T_77_we0 <= w_l_plus1_T_77_we0_local;

    w_l_plus1_T_77_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_210_p2, trunc_ln40_fu_256_p1)
    begin
        if (((icmp_ln40_fu_210_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_256_p1 = ap_const_lv3_7))) then 
            w_l_plus1_T_77_we0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_77_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_address0 <= zext_ln41_fu_260_p1(3 - 1 downto 0);
    w_l_plus1_T_ce0 <= w_l_plus1_T_ce0_local;

    w_l_plus1_T_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_l_plus1_T_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_d0 <= bitcast_ln42_fu_300_p1;
    w_l_plus1_T_we0 <= w_l_plus1_T_we0_local;

    w_l_plus1_T_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_210_p2, trunc_ln40_fu_256_p1)
    begin
        if (((icmp_ln40_fu_210_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (trunc_ln40_fu_256_p1 = ap_const_lv3_0))) then 
            w_l_plus1_T_we0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln41_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_fu_240_p3),64));
    zext_ln42_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_276_p4),4096));
end behav;
