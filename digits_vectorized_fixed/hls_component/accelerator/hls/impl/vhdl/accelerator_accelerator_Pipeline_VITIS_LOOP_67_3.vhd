-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_accelerator_Pipeline_VITIS_LOOP_67_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    result_l3_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    result_l3_0_ce0 : OUT STD_LOGIC;
    result_l3_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    y_true_load : IN STD_LOGIC_VECTOR (639 downto 0);
    final_error_0_19_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_19_out_ap_vld : OUT STD_LOGIC;
    final_error_0_18_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_18_out_ap_vld : OUT STD_LOGIC;
    final_error_0_17_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_17_out_ap_vld : OUT STD_LOGIC;
    final_error_0_16_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_16_out_ap_vld : OUT STD_LOGIC;
    final_error_0_15_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_15_out_ap_vld : OUT STD_LOGIC;
    final_error_0_14_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_14_out_ap_vld : OUT STD_LOGIC;
    final_error_0_13_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_13_out_ap_vld : OUT STD_LOGIC;
    final_error_0_12_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_12_out_ap_vld : OUT STD_LOGIC;
    final_error_0_11_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_11_out_ap_vld : OUT STD_LOGIC;
    final_error_0_10_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_10_out_ap_vld : OUT STD_LOGIC;
    grp_fu_8485_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8485_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8485_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_8485_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8485_p_ce : OUT STD_LOGIC );
end;


architecture behav of accelerator_accelerator_Pipeline_VITIS_LOOP_67_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln67_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_485 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_485_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_485_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_485_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_485_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln67_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_489_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_489_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_489_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln69_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln69_reg_498 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln69_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_42_fu_74 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_37_fu_276_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal final_error_0_10_fu_78 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal final_error_0_11_fu_82 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal final_error_0_12_fu_86 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal final_error_0_13_fu_90 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal final_error_0_14_fu_94 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal final_error_0_15_fu_98 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal final_error_0_16_fu_102 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal final_error_0_17_fu_106 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal final_error_0_18_fu_110 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal final_error_0_19_fu_114 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal result_l3_0_ce0_local : STD_LOGIC;
    signal shl_ln_fu_287_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln69_fu_295_p1 : STD_LOGIC_VECTOR (639 downto 0);
    signal lshr_ln69_fu_299_p2 : STD_LOGIC_VECTOR (639 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_403 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component accelerator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    final_error_0_10_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    final_error_0_10_fu_78 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_485_pp0_iter4_reg = ap_const_lv4_8))) then 
                    final_error_0_10_fu_78 <= grp_fu_8485_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    final_error_0_11_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    final_error_0_11_fu_82 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_485_pp0_iter4_reg = ap_const_lv4_7))) then 
                    final_error_0_11_fu_82 <= grp_fu_8485_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    final_error_0_12_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    final_error_0_12_fu_86 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_485_pp0_iter4_reg = ap_const_lv4_6))) then 
                    final_error_0_12_fu_86 <= grp_fu_8485_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    final_error_0_13_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    final_error_0_13_fu_90 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_485_pp0_iter4_reg = ap_const_lv4_5))) then 
                    final_error_0_13_fu_90 <= grp_fu_8485_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    final_error_0_14_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    final_error_0_14_fu_94 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_485_pp0_iter4_reg = ap_const_lv4_4))) then 
                    final_error_0_14_fu_94 <= grp_fu_8485_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    final_error_0_15_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    final_error_0_15_fu_98 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_485_pp0_iter4_reg = ap_const_lv4_3))) then 
                    final_error_0_15_fu_98 <= grp_fu_8485_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    final_error_0_16_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    final_error_0_16_fu_102 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_485_pp0_iter4_reg = ap_const_lv4_2))) then 
                    final_error_0_16_fu_102 <= grp_fu_8485_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    final_error_0_17_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    final_error_0_17_fu_106 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_485_pp0_iter4_reg = ap_const_lv4_1))) then 
                    final_error_0_17_fu_106 <= grp_fu_8485_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    final_error_0_18_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    final_error_0_18_fu_110 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_485_pp0_iter4_reg = ap_const_lv4_0))) then 
                    final_error_0_18_fu_110 <= grp_fu_8485_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    final_error_0_19_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    final_error_0_19_fu_114 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_403)) then 
                    final_error_0_19_fu_114 <= grp_fu_8485_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    i_42_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln67_fu_270_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_42_fu_74 <= i_37_fu_276_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_42_fu_74 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_reg_485 <= ap_sig_allocacmp_i;
                i_reg_485_pp0_iter1_reg <= i_reg_485;
                icmp_ln67_reg_489 <= icmp_ln67_fu_270_p2;
                icmp_ln67_reg_489_pp0_iter1_reg <= icmp_ln67_reg_489;
                trunc_ln69_reg_498 <= trunc_ln69_fu_305_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                i_reg_485_pp0_iter2_reg <= i_reg_485_pp0_iter1_reg;
                i_reg_485_pp0_iter3_reg <= i_reg_485_pp0_iter2_reg;
                i_reg_485_pp0_iter4_reg <= i_reg_485_pp0_iter3_reg;
                icmp_ln67_reg_489_pp0_iter2_reg <= icmp_ln67_reg_489_pp0_iter1_reg;
                icmp_ln67_reg_489_pp0_iter3_reg <= icmp_ln67_reg_489_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_403_assign_proc : process(ap_enable_reg_pp0_iter5, i_reg_485_pp0_iter4_reg)
    begin
                ap_condition_403 <= (not((i_reg_485_pp0_iter4_reg = ap_const_lv4_0)) and not((i_reg_485_pp0_iter4_reg = ap_const_lv4_1)) and not((i_reg_485_pp0_iter4_reg = ap_const_lv4_2)) and not((i_reg_485_pp0_iter4_reg = ap_const_lv4_3)) and not((i_reg_485_pp0_iter4_reg = ap_const_lv4_4)) and not((i_reg_485_pp0_iter4_reg = ap_const_lv4_5)) and not((i_reg_485_pp0_iter4_reg = ap_const_lv4_6)) and not((i_reg_485_pp0_iter4_reg = ap_const_lv4_7)) and not((i_reg_485_pp0_iter4_reg = ap_const_lv4_8)) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln67_fu_270_p2)
    begin
        if (((icmp_ln67_fu_270_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter4_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_42_fu_74, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_42_fu_74;
        end if; 
    end process;

    bitcast_ln69_fu_314_p1 <= trunc_ln69_reg_498;
    final_error_0_10_out <= final_error_0_10_fu_78;

    final_error_0_10_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln67_reg_489_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (icmp_ln67_reg_489_pp0_iter3_reg = ap_const_lv1_1))) then 
            final_error_0_10_out_ap_vld <= ap_const_logic_1;
        else 
            final_error_0_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    final_error_0_11_out <= final_error_0_11_fu_82;

    final_error_0_11_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln67_reg_489_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (icmp_ln67_reg_489_pp0_iter3_reg = ap_const_lv1_1))) then 
            final_error_0_11_out_ap_vld <= ap_const_logic_1;
        else 
            final_error_0_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    final_error_0_12_out <= final_error_0_12_fu_86;

    final_error_0_12_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln67_reg_489_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (icmp_ln67_reg_489_pp0_iter3_reg = ap_const_lv1_1))) then 
            final_error_0_12_out_ap_vld <= ap_const_logic_1;
        else 
            final_error_0_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    final_error_0_13_out <= final_error_0_13_fu_90;

    final_error_0_13_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln67_reg_489_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (icmp_ln67_reg_489_pp0_iter3_reg = ap_const_lv1_1))) then 
            final_error_0_13_out_ap_vld <= ap_const_logic_1;
        else 
            final_error_0_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    final_error_0_14_out <= final_error_0_14_fu_94;

    final_error_0_14_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln67_reg_489_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (icmp_ln67_reg_489_pp0_iter3_reg = ap_const_lv1_1))) then 
            final_error_0_14_out_ap_vld <= ap_const_logic_1;
        else 
            final_error_0_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    final_error_0_15_out <= final_error_0_15_fu_98;

    final_error_0_15_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln67_reg_489_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (icmp_ln67_reg_489_pp0_iter3_reg = ap_const_lv1_1))) then 
            final_error_0_15_out_ap_vld <= ap_const_logic_1;
        else 
            final_error_0_15_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    final_error_0_16_out <= final_error_0_16_fu_102;

    final_error_0_16_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln67_reg_489_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (icmp_ln67_reg_489_pp0_iter3_reg = ap_const_lv1_1))) then 
            final_error_0_16_out_ap_vld <= ap_const_logic_1;
        else 
            final_error_0_16_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    final_error_0_17_out <= final_error_0_17_fu_106;

    final_error_0_17_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln67_reg_489_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (icmp_ln67_reg_489_pp0_iter3_reg = ap_const_lv1_1))) then 
            final_error_0_17_out_ap_vld <= ap_const_logic_1;
        else 
            final_error_0_17_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    final_error_0_18_out <= final_error_0_18_fu_110;

    final_error_0_18_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln67_reg_489_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (icmp_ln67_reg_489_pp0_iter3_reg = ap_const_lv1_1))) then 
            final_error_0_18_out_ap_vld <= ap_const_logic_1;
        else 
            final_error_0_18_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    final_error_0_19_out <= final_error_0_19_fu_114;

    final_error_0_19_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln67_reg_489_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (icmp_ln67_reg_489_pp0_iter3_reg = ap_const_lv1_1))) then 
            final_error_0_19_out_ap_vld <= ap_const_logic_1;
        else 
            final_error_0_19_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_8485_p_ce <= ap_const_logic_1;
    grp_fu_8485_p_din0 <= result_l3_0_q0;
    grp_fu_8485_p_din1 <= bitcast_ln69_fu_314_p1;
    grp_fu_8485_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    i_37_fu_276_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    icmp_ln67_fu_270_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_A) else "0";
    lshr_ln69_fu_299_p2 <= std_logic_vector(shift_right(unsigned(y_true_load),to_integer(unsigned('0' & zext_ln69_fu_295_p1(31-1 downto 0)))));
    result_l3_0_address0 <= zext_ln67_fu_282_p1(4 - 1 downto 0);
    result_l3_0_ce0 <= result_l3_0_ce0_local;

    result_l3_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_l3_0_ce0_local <= ap_const_logic_1;
        else 
            result_l3_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_287_p3 <= (ap_sig_allocacmp_i & ap_const_lv6_0);
    trunc_ln69_fu_305_p1 <= lshr_ln69_fu_299_p2(64 - 1 downto 0);
    zext_ln67_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    zext_ln69_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_287_p3),640));
end behav;
