-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_accelerator_Pipeline_VITIS_LOOP_323_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    biases_l3_load : IN STD_LOGIC_VECTOR (639 downto 0);
    weights_l3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_l3_ce0 : OUT STD_LOGIC;
    weights_l3_we0 : OUT STD_LOGIC;
    weights_l3_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    weights_l3_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    update_temp_mat_129_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_129_ce0 : OUT STD_LOGIC;
    update_temp_mat_129_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    update_temp_mat_130_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_130_ce0 : OUT STD_LOGIC;
    update_temp_mat_130_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    update_temp_mat_131_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_131_ce0 : OUT STD_LOGIC;
    update_temp_mat_131_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    update_temp_mat_132_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_132_ce0 : OUT STD_LOGIC;
    update_temp_mat_132_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    update_temp_mat_133_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_133_ce0 : OUT STD_LOGIC;
    update_temp_mat_133_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    update_temp_mat_134_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_134_ce0 : OUT STD_LOGIC;
    update_temp_mat_134_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    update_temp_mat_135_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_135_ce0 : OUT STD_LOGIC;
    update_temp_mat_135_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    update_temp_mat_136_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_136_ce0 : OUT STD_LOGIC;
    update_temp_mat_136_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_18_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_17_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_16_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_15_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_14_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_13_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_12_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_11_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_10_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    final_error_0_19_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (639 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    grp_fu_8485_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8485_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8485_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_8485_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8485_p_ce : OUT STD_LOGIC;
    grp_fu_8493_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8493_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8493_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_8493_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8493_p_ce : OUT STD_LOGIC;
    grp_fu_8581_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8581_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8581_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8581_p_ce : OUT STD_LOGIC;
    grp_fu_8585_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8585_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8585_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_8585_p_ce : OUT STD_LOGIC );
end;


architecture behav of accelerator_accelerator_Pipeline_VITIS_LOOP_323_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_3F50624DD2F1A9FC : STD_LOGIC_VECTOR (63 downto 0) := "0011111101010000011000100100110111010010111100011010100111111100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv640_lc_2 : STD_LOGIC_VECTOR (639 downto
    constant ap_const_lv640_lc_3 : STD_LOGIC_VECTOR (639 downto
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal icmp_ln323_reg_697 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_358 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_691 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln323_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_reg_697_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_l3_addr_reg_701 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_addr_reg_701_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_addr_reg_701_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_394_p23 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_reg_751 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln325_1_reg_761 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_2_reg_771 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_2_reg_771_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal update_temp_mat_131_load_reg_776 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_3_reg_781 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_3_reg_781_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal update_temp_mat_132_load_reg_786 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_4_reg_791 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_4_reg_791_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal update_temp_mat_133_load_reg_796 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_5_reg_801 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_5_reg_801_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal update_temp_mat_134_load_reg_806 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_6_reg_811 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_6_reg_811_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal update_temp_mat_135_load_reg_816 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_7_reg_821 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln325_7_reg_821_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal update_temp_mat_136_load_reg_826 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_load_reg_831 : STD_LOGIC_VECTOR (639 downto 0);
    signal zext_ln327_fu_532_p1 : STD_LOGIC_VECTOR (639 downto 0);
    signal zext_ln327_reg_836 : STD_LOGIC_VECTOR (639 downto 0);
    signal trunc_ln327_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln327_reg_842 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul29_i_reg_847 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_reg_852 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_1_reg_857 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln327_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln327_fu_555_p2 : STD_LOGIC_VECTOR (639 downto 0);
    signal shl_ln327_reg_867 : STD_LOGIC_VECTOR (639 downto 0);
    signal bitcast_ln325_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_2_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_2_reg_882 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_3_reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_4_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal bitcast_ln325_6_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_4_reg_902 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_5_reg_907 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_8_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal bitcast_ln325_10_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_6_reg_922 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_7_reg_927 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_12_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_14_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_i_1_reg_942 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_i_2_reg_947 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_i_3_reg_952 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_i_4_reg_957 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_i_5_reg_962 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_i_6_reg_967 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_i_7_reg_972 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal zext_ln323_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_45_fu_140 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln323_fu_517_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_144 : STD_LOGIC_VECTOR (639 downto
    signal or_ln327_fu_615_p2 : STD_LOGIC_VECTOR (639 downto 0);
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (639 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage3 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal weights_l3_ce0_local : STD_LOGIC;
    signal weights_l3_address0_local : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_we0_local : STD_LOGIC;
    signal or_ln325_6_fu_651_p9 : STD_LOGIC_VECTOR (511 downto 0);
    signal update_temp_mat_129_ce0_local : STD_LOGIC;
    signal update_temp_mat_130_ce0_local : STD_LOGIC;
    signal update_temp_mat_131_ce0_local : STD_LOGIC;
    signal update_temp_mat_132_ce0_local : STD_LOGIC;
    signal update_temp_mat_133_ce0_local : STD_LOGIC;
    signal update_temp_mat_134_ce0_local : STD_LOGIC;
    signal update_temp_mat_135_ce0_local : STD_LOGIC;
    signal update_temp_mat_136_ce0_local : STD_LOGIC;
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_342_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_352_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_394_p21 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln56_1_fu_525_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln327_fu_536_p2 : STD_LOGIC_VECTOR (639 downto 0);
    signal bitcast_ln327_1_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln327_1_fu_596_p1 : STD_LOGIC_VECTOR (639 downto 0);
    signal xor_ln327_fu_605_p2 : STD_LOGIC_VECTOR (639 downto 0);
    signal shl_ln327_1_fu_600_p2 : STD_LOGIC_VECTOR (639 downto 0);
    signal and_ln327_fu_610_p2 : STD_LOGIC_VECTOR (639 downto 0);
    signal bitcast_ln325_15_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_13_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_11_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_9_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_7_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_5_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_3_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln325_1_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_s_fu_394_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_394_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_394_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_394_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_394_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_394_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_394_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_394_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_394_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_394_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_sparsemux_21_4_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_21_4_64_1_1_U3460 : component accelerator_sparsemux_21_4_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 64,
        CASE1 => "0001",
        din1_WIDTH => 64,
        CASE2 => "0010",
        din2_WIDTH => 64,
        CASE3 => "0011",
        din3_WIDTH => 64,
        CASE4 => "0100",
        din4_WIDTH => 64,
        CASE5 => "0101",
        din5_WIDTH => 64,
        CASE6 => "0110",
        din6_WIDTH => 64,
        CASE7 => "0111",
        din7_WIDTH => 64,
        CASE8 => "1000",
        din8_WIDTH => 64,
        CASE9 => "1001",
        din9_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 4,
        dout_WIDTH => 64)
    port map (
        din0 => final_error_0_18_reload,
        din1 => final_error_0_17_reload,
        din2 => final_error_0_16_reload,
        din3 => final_error_0_15_reload,
        din4 => final_error_0_14_reload,
        din5 => final_error_0_13_reload,
        din6 => final_error_0_12_reload,
        din7 => final_error_0_11_reload,
        din8 => final_error_0_10_reload,
        din9 => final_error_0_19_reload,
        def => tmp_s_fu_394_p21,
        sel => ap_sig_allocacmp_i,
        dout => tmp_s_fu_394_p23);

    flow_control_loop_pipe_sequential_init_U : component accelerator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    empty_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_fu_144 <= biases_l3_load;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                empty_fu_144 <= or_ln327_fu_615_p2;
            end if; 
        end if;
    end process;

    i_45_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_45_fu_140 <= ap_const_lv4_0;
            elsif (((icmp_ln323_reg_697 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                i_45_fu_140 <= add_ln323_fu_517_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_691 <= ap_sig_allocacmp_i;
                icmp_ln323_reg_697 <= icmp_ln323_fu_375_p2;
                icmp_ln323_reg_697_pp0_iter1_reg <= icmp_ln323_reg_697;
                shl_ln327_reg_867 <= shl_ln327_fu_555_p2;
                weights_l3_addr_reg_701 <= zext_ln323_fu_381_p1(4 - 1 downto 0);
                weights_l3_addr_reg_701_pp0_iter1_reg <= weights_l3_addr_reg_701;
                weights_l3_addr_reg_701_pp0_iter2_reg <= weights_l3_addr_reg_701_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                mul29_i_reg_847 <= grp_fu_8581_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_i_1_reg_857 <= grp_fu_8585_p_dout0;
                mul_i_reg_852 <= grp_fu_8581_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_i_2_reg_882 <= grp_fu_8581_p_dout0;
                mul_i_3_reg_887 <= grp_fu_8585_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_i_4_reg_902 <= grp_fu_8581_p_dout0;
                mul_i_5_reg_907 <= grp_fu_8585_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_i_6_reg_922 <= grp_fu_8581_p_dout0;
                mul_i_7_reg_927 <= grp_fu_8585_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                p_load_reg_831 <= ap_sig_allocacmp_p_load;
                trunc_ln327_reg_842 <= trunc_ln327_fu_542_p1;
                    zext_ln327_reg_836(9 downto 6) <= zext_ln327_fu_532_p1(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then
                reg_358 <= grp_fu_8485_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                sub_i_1_reg_942 <= grp_fu_8493_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sub_i_2_reg_947 <= grp_fu_8485_p_dout0;
                sub_i_3_reg_952 <= grp_fu_8493_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sub_i_4_reg_957 <= grp_fu_8485_p_dout0;
                sub_i_5_reg_962 <= grp_fu_8493_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                sub_i_6_reg_967 <= grp_fu_8485_p_dout0;
                sub_i_7_reg_972 <= grp_fu_8493_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln325_1_reg_761 <= weights_l3_q0(127 downto 64);
                trunc_ln325_2_reg_771 <= weights_l3_q0(191 downto 128);
                trunc_ln325_2_reg_771_pp0_iter1_reg <= trunc_ln325_2_reg_771;
                trunc_ln325_3_reg_781 <= weights_l3_q0(255 downto 192);
                trunc_ln325_3_reg_781_pp0_iter1_reg <= trunc_ln325_3_reg_781;
                trunc_ln325_4_reg_791 <= weights_l3_q0(319 downto 256);
                trunc_ln325_4_reg_791_pp0_iter1_reg <= trunc_ln325_4_reg_791;
                trunc_ln325_5_reg_801 <= weights_l3_q0(383 downto 320);
                trunc_ln325_5_reg_801_pp0_iter1_reg <= trunc_ln325_5_reg_801;
                trunc_ln325_6_reg_811 <= weights_l3_q0(447 downto 384);
                trunc_ln325_6_reg_811_pp0_iter1_reg <= trunc_ln325_6_reg_811;
                trunc_ln325_7_reg_821 <= weights_l3_q0(511 downto 448);
                trunc_ln325_7_reg_821_pp0_iter1_reg <= trunc_ln325_7_reg_821;
                trunc_ln325_reg_751 <= trunc_ln325_fu_443_p1;
                update_temp_mat_131_load_reg_776 <= update_temp_mat_131_q0;
                update_temp_mat_132_load_reg_786 <= update_temp_mat_132_q0;
                update_temp_mat_133_load_reg_796 <= update_temp_mat_133_q0;
                update_temp_mat_134_load_reg_806 <= update_temp_mat_134_q0;
                update_temp_mat_135_load_reg_816 <= update_temp_mat_135_q0;
                update_temp_mat_136_load_reg_826 <= update_temp_mat_136_q0;
            end if;
        end if;
    end process;
    zext_ln327_reg_836(5 downto 0) <= "000000";
    zext_ln327_reg_836(639 downto 10) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter1_stage3, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln323_fu_517_p2 <= std_logic_vector(unsigned(i_reg_691) + unsigned(ap_const_lv4_1));
    and_ln327_fu_610_p2 <= (xor_ln327_fu_605_p2 and p_load_reg_831);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, icmp_ln323_reg_697)
    begin
        if (((icmp_ln323_reg_697 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage3_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln323_reg_697_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln323_reg_697_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready_pp0_iter1_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_45_fu_140, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_45_fu_140;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, empty_fu_144, or_ln327_fu_615_p2, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_sig_allocacmp_p_load <= or_ln327_fu_615_p2;
        else 
            ap_sig_allocacmp_p_load <= empty_fu_144;
        end if; 
    end process;

    bitcast_ln325_10_fu_580_p1 <= trunc_ln325_5_reg_801_pp0_iter1_reg;
    bitcast_ln325_11_fu_642_p1 <= sub_i_5_reg_962;
    bitcast_ln325_12_fu_584_p1 <= trunc_ln325_6_reg_811_pp0_iter1_reg;
    bitcast_ln325_13_fu_645_p1 <= sub_i_6_reg_967;
    bitcast_ln325_14_fu_588_p1 <= trunc_ln325_7_reg_821_pp0_iter1_reg;
    bitcast_ln325_15_fu_648_p1 <= sub_i_7_reg_972;
    bitcast_ln325_1_fu_626_p1 <= reg_358;
    bitcast_ln325_2_fu_564_p1 <= trunc_ln325_1_reg_761;
    bitcast_ln325_3_fu_630_p1 <= sub_i_1_reg_942;
    bitcast_ln325_4_fu_568_p1 <= trunc_ln325_2_reg_771_pp0_iter1_reg;
    bitcast_ln325_5_fu_633_p1 <= sub_i_2_reg_947;
    bitcast_ln325_6_fu_572_p1 <= trunc_ln325_3_reg_781_pp0_iter1_reg;
    bitcast_ln325_7_fu_636_p1 <= sub_i_3_reg_952;
    bitcast_ln325_8_fu_576_p1 <= trunc_ln325_4_reg_791_pp0_iter1_reg;
    bitcast_ln325_9_fu_639_p1 <= sub_i_4_reg_957;
    bitcast_ln325_fu_560_p1 <= trunc_ln325_reg_751;
    bitcast_ln327_1_fu_592_p1 <= reg_358;
    bitcast_ln327_fu_551_p1 <= trunc_ln327_reg_842;

    grp_fu_338_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, bitcast_ln327_fu_551_p1, bitcast_ln325_fu_560_p1, bitcast_ln325_4_fu_568_p1, ap_CS_fsm_pp0_stage2, bitcast_ln325_8_fu_576_p1, ap_CS_fsm_pp0_stage3, bitcast_ln325_12_fu_584_p1, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_338_p0 <= bitcast_ln325_12_fu_584_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_338_p0 <= bitcast_ln325_8_fu_576_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_338_p0 <= bitcast_ln325_4_fu_568_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_338_p0 <= bitcast_ln325_fu_560_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_338_p0 <= bitcast_ln327_fu_551_p1;
            else 
                grp_fu_338_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_338_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, mul29_i_reg_847, mul_i_reg_852, mul_i_2_reg_882, ap_CS_fsm_pp0_stage2, mul_i_4_reg_902, ap_CS_fsm_pp0_stage3, mul_i_6_reg_922, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_338_p1 <= mul_i_6_reg_922;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_338_p1 <= mul_i_4_reg_902;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_338_p1 <= mul_i_2_reg_882;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_338_p1 <= mul_i_reg_852;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_338_p1 <= mul29_i_reg_847;
            else 
                grp_fu_338_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_338_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_p0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, bitcast_ln325_2_fu_564_p1, ap_CS_fsm_pp0_stage2, bitcast_ln325_6_fu_572_p1, ap_CS_fsm_pp0_stage3, bitcast_ln325_10_fu_580_p1, bitcast_ln325_14_fu_588_p1, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_342_p0 <= bitcast_ln325_14_fu_588_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_342_p0 <= bitcast_ln325_10_fu_580_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_342_p0 <= bitcast_ln325_6_fu_572_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_342_p0 <= bitcast_ln325_2_fu_564_p1;
            else 
                grp_fu_342_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_342_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, mul_i_1_reg_857, mul_i_3_reg_887, ap_CS_fsm_pp0_stage2, mul_i_5_reg_907, ap_CS_fsm_pp0_stage3, mul_i_7_reg_927, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_342_p1 <= mul_i_7_reg_927;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_342_p1 <= mul_i_5_reg_907;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_342_p1 <= mul_i_3_reg_887;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_342_p1 <= mul_i_1_reg_857;
            else 
                grp_fu_342_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_342_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_346_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, update_temp_mat_129_q0, ap_CS_fsm_pp0_stage4, tmp_s_fu_394_p23, ap_CS_fsm_pp0_stage1, update_temp_mat_131_load_reg_776, update_temp_mat_133_load_reg_796, update_temp_mat_135_load_reg_816, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_346_p0 <= update_temp_mat_135_load_reg_816;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_346_p0 <= update_temp_mat_133_load_reg_796;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_346_p0 <= update_temp_mat_131_load_reg_776;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_346_p0 <= update_temp_mat_129_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_346_p0 <= tmp_s_fu_394_p23;
            else 
                grp_fu_346_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_346_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_352_p0_assign_proc : process(ap_enable_reg_pp0_iter0, update_temp_mat_130_q0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, update_temp_mat_132_load_reg_786, update_temp_mat_134_load_reg_806, update_temp_mat_136_load_reg_826, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_352_p0 <= update_temp_mat_136_load_reg_826;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_352_p0 <= update_temp_mat_134_load_reg_806;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_352_p0 <= update_temp_mat_132_load_reg_786;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_352_p0 <= update_temp_mat_130_q0;
            else 
                grp_fu_352_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_352_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_8485_p_ce <= ap_const_logic_1;
    grp_fu_8485_p_din0 <= grp_fu_338_p0;
    grp_fu_8485_p_din1 <= grp_fu_338_p1;
    grp_fu_8485_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_8493_p_ce <= ap_const_logic_1;
    grp_fu_8493_p_din0 <= grp_fu_342_p0;
    grp_fu_8493_p_din1 <= grp_fu_342_p1;
    grp_fu_8493_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_8581_p_ce <= ap_const_logic_1;
    grp_fu_8581_p_din0 <= grp_fu_346_p0;
    grp_fu_8581_p_din1 <= ap_const_lv64_3F50624DD2F1A9FC;
    grp_fu_8585_p_ce <= ap_const_logic_1;
    grp_fu_8585_p_din0 <= grp_fu_352_p0;
    grp_fu_8585_p_din1 <= ap_const_lv64_3F50624DD2F1A9FC;
    icmp_ln323_fu_375_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_A) else "0";
    lshr_ln327_fu_536_p2 <= std_logic_vector(shift_right(unsigned(ap_sig_allocacmp_p_load),to_integer(unsigned('0' & zext_ln327_fu_532_p1(31-1 downto 0)))));
    or_ln325_6_fu_651_p9 <= (((((((bitcast_ln325_15_fu_648_p1 & bitcast_ln325_13_fu_645_p1) & bitcast_ln325_11_fu_642_p1) & bitcast_ln325_9_fu_639_p1) & bitcast_ln325_7_fu_636_p1) & bitcast_ln325_5_fu_633_p1) & bitcast_ln325_3_fu_630_p1) & bitcast_ln325_1_fu_626_p1);
    or_ln327_fu_615_p2 <= (shl_ln327_1_fu_600_p2 or and_ln327_fu_610_p2);
    p_out <= empty_fu_144;

    p_out_ap_vld_assign_proc : process(icmp_ln323_reg_697_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln323_reg_697_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln327_1_fu_600_p2 <= std_logic_vector(shift_left(unsigned(zext_ln327_1_fu_596_p1),to_integer(unsigned('0' & zext_ln327_reg_836(31-1 downto 0)))));
    shl_ln327_fu_555_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv640_lc_2),to_integer(unsigned('0' & zext_ln327_reg_836(31-1 downto 0)))));
    shl_ln56_1_fu_525_p3 <= (i_reg_691 & ap_const_lv6_0);
    tmp_s_fu_394_p21 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln325_fu_443_p1 <= weights_l3_q0(64 - 1 downto 0);
    trunc_ln327_fu_542_p1 <= lshr_ln327_fu_536_p2(64 - 1 downto 0);
    update_temp_mat_129_address0 <= zext_ln323_fu_381_p1(4 - 1 downto 0);
    update_temp_mat_129_ce0 <= update_temp_mat_129_ce0_local;

    update_temp_mat_129_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_129_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_129_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_130_address0 <= zext_ln323_fu_381_p1(4 - 1 downto 0);
    update_temp_mat_130_ce0 <= update_temp_mat_130_ce0_local;

    update_temp_mat_130_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_130_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_130_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_131_address0 <= zext_ln323_fu_381_p1(4 - 1 downto 0);
    update_temp_mat_131_ce0 <= update_temp_mat_131_ce0_local;

    update_temp_mat_131_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_131_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_131_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_132_address0 <= zext_ln323_fu_381_p1(4 - 1 downto 0);
    update_temp_mat_132_ce0 <= update_temp_mat_132_ce0_local;

    update_temp_mat_132_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_132_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_132_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_133_address0 <= zext_ln323_fu_381_p1(4 - 1 downto 0);
    update_temp_mat_133_ce0 <= update_temp_mat_133_ce0_local;

    update_temp_mat_133_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_133_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_133_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_134_address0 <= zext_ln323_fu_381_p1(4 - 1 downto 0);
    update_temp_mat_134_ce0 <= update_temp_mat_134_ce0_local;

    update_temp_mat_134_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_134_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_134_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_135_address0 <= zext_ln323_fu_381_p1(4 - 1 downto 0);
    update_temp_mat_135_ce0 <= update_temp_mat_135_ce0_local;

    update_temp_mat_135_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_135_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_135_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_136_address0 <= zext_ln323_fu_381_p1(4 - 1 downto 0);
    update_temp_mat_136_ce0 <= update_temp_mat_136_ce0_local;

    update_temp_mat_136_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_136_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_136_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_address0 <= weights_l3_address0_local;

    weights_l3_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, weights_l3_addr_reg_701_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, zext_ln323_fu_381_p1, ap_block_pp0_stage0, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            weights_l3_address0_local <= weights_l3_addr_reg_701_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weights_l3_address0_local <= zext_ln323_fu_381_p1(4 - 1 downto 0);
        else 
            weights_l3_address0_local <= "XXXX";
        end if; 
    end process;

    weights_l3_ce0 <= weights_l3_ce0_local;

    weights_l3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            weights_l3_ce0_local <= ap_const_logic_1;
        else 
            weights_l3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_d0 <= or_ln325_6_fu_651_p9;
    weights_l3_we0 <= weights_l3_we0_local;

    weights_l3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            weights_l3_we0_local <= ap_const_logic_1;
        else 
            weights_l3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln327_fu_605_p2 <= (shl_ln327_reg_867 xor ap_const_lv640_lc_3);
    zext_ln323_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    zext_ln327_1_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bitcast_ln327_1_fu_592_p1),640));
    zext_ln327_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln56_1_fu_525_p3),640));
end behav;
