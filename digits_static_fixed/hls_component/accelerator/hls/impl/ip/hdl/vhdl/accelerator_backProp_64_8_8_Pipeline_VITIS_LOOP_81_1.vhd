-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_backProp_64_8_8_Pipeline_VITIS_LOOP_81_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w_l_plus1_T_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_71_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_71_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_71_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_72_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_72_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_72_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_73_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_73_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_73_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_74_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_74_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_74_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_75_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_75_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_75_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_76_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_76_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_76_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (63 downto 0);
    w_l_plus1_T_77_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    w_l_plus1_T_77_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_77_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_i_715_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i_715_out_ap_vld : OUT STD_LOGIC;
    add_i_713_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i_713_out_ap_vld : OUT STD_LOGIC;
    add_i_711_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i_711_out_ap_vld : OUT STD_LOGIC;
    add_i_79_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i_79_out_ap_vld : OUT STD_LOGIC;
    add_i_77_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i_77_out_ap_vld : OUT STD_LOGIC;
    add_i_75_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i_75_out_ap_vld : OUT STD_LOGIC;
    add_i_73_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i_73_out_ap_vld : OUT STD_LOGIC;
    add_i_71_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_i_71_out_ap_vld : OUT STD_LOGIC;
    mux_case_7_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    mux_case_7_out_ap_vld : OUT STD_LOGIC;
    mux_case_6_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    mux_case_6_out_ap_vld : OUT STD_LOGIC;
    mux_case_5_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    mux_case_5_out_ap_vld : OUT STD_LOGIC;
    mux_case_4_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    mux_case_4_out_ap_vld : OUT STD_LOGIC;
    mux_case_3_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    mux_case_3_out_ap_vld : OUT STD_LOGIC;
    mux_case_2_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    mux_case_2_out_ap_vld : OUT STD_LOGIC;
    mux_case_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    mux_case_1_out_ap_vld : OUT STD_LOGIC;
    mux_case_0_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    mux_case_0_out_ap_vld : OUT STD_LOGIC;
    grp_fu_1902_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1902_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1902_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1902_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1902_p_ce : OUT STD_LOGIC;
    grp_fu_1906_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1906_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1906_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1906_p_ce : OUT STD_LOGIC );
end;


architecture behav of accelerator_backProp_64_8_8_Pipeline_VITIS_LOOP_81_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage33 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage34 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage35 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage36 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage37 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage38 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage39 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal icmp_ln81_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage7 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage39 : signal is "none";
    signal ap_block_pp0_stage39_subdone : BOOLEAN;
    signal reg_457 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal reg_462 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage26 : signal is "none";
    signal ap_block_pp0_stage26_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage31 : signal is "none";
    signal ap_block_pp0_stage31_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage36 : signal is "none";
    signal ap_block_pp0_stage36_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_961 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln81_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_l_plus1_T_71_load_reg_1016 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_l_plus1_T_72_load_reg_1021 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_l_plus1_T_73_load_reg_1026 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_l_plus1_T_74_load_reg_1031 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_l_plus1_T_75_load_reg_1036 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_l_plus1_T_76_load_reg_1041 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_l_plus1_T_77_load_reg_1046 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_28_fu_573_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_28_reg_1051 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal trunc_ln81_fu_602_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_reg_1056 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_605_p19 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_1_reg_1065 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_2_reg_1070 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal mul_i_3_reg_1075 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal mul_i_4_reg_1080 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal mul_i_6_reg_1085 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal mul_i_7_reg_1090 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal zext_ln81_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_27_fu_116 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_block_pp0_stage39_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal mux_case_0_fu_120 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal mux_case_1_fu_124 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal mux_case_2_fu_128 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal mux_case_3_fu_132 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal mux_case_4_fu_136 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal mux_case_5_fu_140 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal mux_case_6_fu_144 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal mux_case_7_fu_148 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_i_71_fu_152 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_i_73_fu_156 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_i_75_fu_160 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_i_77_fu_164 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_i_79_fu_168 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_i_711_fu_172 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_i_713_fu_176 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_i_715_fu_180 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_pp0_stage7_01001 : BOOLEAN;
    signal w_l_plus1_T_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_71_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_72_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_73_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_74_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_75_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_76_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_77_ce0_local : STD_LOGIC;
    signal grp_fu_448_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_pp0_stage17 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_pp0_stage22 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage27 : signal is "none";
    signal ap_block_pp0_stage27 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage32 : signal is "none";
    signal ap_block_pp0_stage32 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage37 : signal is "none";
    signal ap_block_pp0_stage37 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_452_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal tmp_fu_605_p17 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_605_p18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage7_00001 : BOOLEAN;
    signal ap_block_pp0_stage12_00001 : BOOLEAN;
    signal ap_block_pp0_stage17_00001 : BOOLEAN;
    signal ap_block_pp0_stage22_00001 : BOOLEAN;
    signal ap_block_pp0_stage27_00001 : BOOLEAN;
    signal ap_block_pp0_stage32_00001 : BOOLEAN;
    signal ap_block_pp0_stage37_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal ap_block_pp0_stage29_subdone : BOOLEAN;
    signal ap_block_pp0_stage30_subdone : BOOLEAN;
    signal ap_block_pp0_stage31_subdone : BOOLEAN;
    signal ap_block_pp0_stage32_subdone : BOOLEAN;
    signal ap_block_pp0_stage33_subdone : BOOLEAN;
    signal ap_block_pp0_stage34_subdone : BOOLEAN;
    signal ap_block_pp0_stage35_subdone : BOOLEAN;
    signal ap_block_pp0_stage36_subdone : BOOLEAN;
    signal ap_block_pp0_stage37_subdone : BOOLEAN;
    signal ap_block_pp0_stage38_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_605_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_605_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_605_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_605_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_605_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_605_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_605_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_605_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_sparsemux_17_3_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_17_3_64_1_1_U1225 : component accelerator_sparsemux_17_3_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 64,
        CASE1 => "001",
        din1_WIDTH => 64,
        CASE2 => "010",
        din2_WIDTH => 64,
        CASE3 => "011",
        din3_WIDTH => 64,
        CASE4 => "100",
        din4_WIDTH => 64,
        CASE5 => "101",
        din5_WIDTH => 64,
        CASE6 => "110",
        din6_WIDTH => 64,
        CASE7 => "111",
        din7_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 3,
        dout_WIDTH => 64)
    port map (
        din0 => mux_case_0_fu_120,
        din1 => mux_case_1_fu_124,
        din2 => mux_case_2_fu_128,
        din3 => mux_case_3_fu_132,
        din4 => mux_case_4_fu_136,
        din5 => mux_case_5_fu_140,
        din6 => mux_case_6_fu_144,
        din7 => mux_case_7_fu_148,
        def => tmp_fu_605_p17,
        sel => tmp_fu_605_p18,
        dout => tmp_fu_605_p19);

    flow_control_loop_pipe_sequential_init_U : component accelerator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage7,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage7)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage39_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage39))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    add_i_711_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add_i_711_fu_172 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                add_i_711_fu_172 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    add_i_713_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add_i_713_fu_176 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                add_i_713_fu_176 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    add_i_715_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add_i_715_fu_180 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                add_i_715_fu_180 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    add_i_71_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add_i_71_fu_152 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                add_i_71_fu_152 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    add_i_73_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add_i_73_fu_156 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                add_i_73_fu_156 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    add_i_75_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add_i_75_fu_160 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                add_i_75_fu_160 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    add_i_77_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add_i_77_fu_164 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                add_i_77_fu_164 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    add_i_79_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                add_i_79_fu_168 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                add_i_79_fu_168 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    i_27_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_27_fu_116 <= ap_const_lv4_0;
            elsif (((icmp_ln81_reg_967 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage39_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage39))) then 
                i_27_fu_116 <= i_28_reg_1051;
            end if; 
        end if;
    end process;

    mux_case_0_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mux_case_0_fu_120 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                mux_case_0_fu_120 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_1_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mux_case_1_fu_124 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                mux_case_1_fu_124 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_2_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mux_case_2_fu_128 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                mux_case_2_fu_128 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_3_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mux_case_3_fu_132 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                mux_case_3_fu_132 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_4_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mux_case_4_fu_136 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                mux_case_4_fu_136 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_5_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mux_case_5_fu_140 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                mux_case_5_fu_140 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_6_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mux_case_6_fu_144 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                mux_case_6_fu_144 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;

    mux_case_7_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mux_case_7_fu_148 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln81_reg_1056 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                mux_case_7_fu_148 <= grp_fu_1902_p_dout0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                i_28_reg_1051 <= i_28_fu_573_p2;
                trunc_ln81_reg_1056 <= trunc_ln81_fu_602_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_961 <= ap_sig_allocacmp_i;
                icmp_ln81_reg_967 <= icmp_ln81_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                mul_i_1_reg_1065 <= grp_fu_1906_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                mul_i_2_reg_1070 <= grp_fu_1906_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                mul_i_3_reg_1075 <= grp_fu_1906_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                mul_i_4_reg_1080 <= grp_fu_1906_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                mul_i_6_reg_1085 <= grp_fu_1906_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                mul_i_7_reg_1090 <= grp_fu_1906_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then
                reg_457 <= grp_fu_1906_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage36_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36)) or ((ap_const_boolean_0 = ap_block_pp0_stage31_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31)) or ((ap_const_boolean_0 = ap_block_pp0_stage26_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26)) or ((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage11)))) then
                reg_462 <= grp_fu_1902_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                w_l_plus1_T_71_load_reg_1016 <= w_l_plus1_T_71_q0;
                w_l_plus1_T_72_load_reg_1021 <= w_l_plus1_T_72_q0;
                w_l_plus1_T_73_load_reg_1026 <= w_l_plus1_T_73_q0;
                w_l_plus1_T_74_load_reg_1031 <= w_l_plus1_T_74_q0;
                w_l_plus1_T_75_load_reg_1036 <= w_l_plus1_T_75_q0;
                w_l_plus1_T_76_load_reg_1041 <= w_l_plus1_T_76_q0;
                w_l_plus1_T_77_load_reg_1046 <= w_l_plus1_T_77_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage7_subdone, ap_condition_exit_pp0_iter0_stage7, ap_block_pp0_stage39_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_block_pp0_stage28_subdone, ap_block_pp0_stage29_subdone, ap_block_pp0_stage30_subdone, ap_block_pp0_stage31_subdone, ap_block_pp0_stage32_subdone, ap_block_pp0_stage33_subdone, ap_block_pp0_stage34_subdone, ap_block_pp0_stage35_subdone, ap_block_pp0_stage36_subdone, ap_block_pp0_stage37_subdone, ap_block_pp0_stage38_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage7)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage29_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage30_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage31_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when ap_ST_fsm_pp0_stage32 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage32_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                end if;
            when ap_ST_fsm_pp0_stage33 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage33_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                end if;
            when ap_ST_fsm_pp0_stage34 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage34_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                end if;
            when ap_ST_fsm_pp0_stage35 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage35_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                end if;
            when ap_ST_fsm_pp0_stage36 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage36_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                end if;
            when ap_ST_fsm_pp0_stage37 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage37_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                end if;
            when ap_ST_fsm_pp0_stage38 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage38_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage38;
                end if;
            when ap_ST_fsm_pp0_stage39 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage39_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage39;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_i_711_out <= add_i_711_fu_172;

    add_i_711_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            add_i_711_out_ap_vld <= ap_const_logic_1;
        else 
            add_i_711_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_i_713_out <= add_i_713_fu_176;

    add_i_713_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            add_i_713_out_ap_vld <= ap_const_logic_1;
        else 
            add_i_713_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_i_715_out <= add_i_715_fu_180;

    add_i_715_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            add_i_715_out_ap_vld <= ap_const_logic_1;
        else 
            add_i_715_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_i_71_out <= add_i_71_fu_152;

    add_i_71_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            add_i_71_out_ap_vld <= ap_const_logic_1;
        else 
            add_i_71_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_i_73_out <= add_i_73_fu_156;

    add_i_73_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            add_i_73_out_ap_vld <= ap_const_logic_1;
        else 
            add_i_73_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_i_75_out <= add_i_75_fu_160;

    add_i_75_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            add_i_75_out_ap_vld <= ap_const_logic_1;
        else 
            add_i_75_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_i_77_out <= add_i_77_fu_164;

    add_i_77_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            add_i_77_out_ap_vld <= ap_const_logic_1;
        else 
            add_i_77_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_i_79_out <= add_i_79_fu_168;

    add_i_79_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            add_i_79_out_ap_vld <= ap_const_logic_1;
        else 
            add_i_79_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage26 <= ap_CS_fsm(26);
    ap_CS_fsm_pp0_stage27 <= ap_CS_fsm(27);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage31 <= ap_CS_fsm(31);
    ap_CS_fsm_pp0_stage32 <= ap_CS_fsm(32);
    ap_CS_fsm_pp0_stage36 <= ap_CS_fsm(36);
    ap_CS_fsm_pp0_stage37 <= ap_CS_fsm(37);
    ap_CS_fsm_pp0_stage39 <= ap_CS_fsm(39);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage37_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage37_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage38_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage39_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage39_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone, icmp_ln81_reg_967)
    begin
        if (((icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_condition_exit_pp0_iter0_stage7 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage7 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage7;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage39, ap_block_pp0_stage39_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage39_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage39))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_27_fu_116, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_27_fu_116;
        end if; 
    end process;

    grp_fu_1902_p_ce <= ap_const_logic_1;
    grp_fu_1902_p_din0 <= grp_fu_448_p0;
    grp_fu_1902_p_din1 <= grp_fu_448_p1;
    grp_fu_1902_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_1906_p_ce <= ap_const_logic_1;
    grp_fu_1906_p_din0 <= grp_fu_452_p0;
    grp_fu_1906_p_din1 <= grp_fu_452_p1;

    grp_fu_448_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, reg_462, tmp_fu_605_p19, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage7, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27, ap_CS_fsm_pp0_stage32, ap_block_pp0_stage32, ap_CS_fsm_pp0_stage37, ap_block_pp0_stage37, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage37) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage37)) or ((ap_const_boolean_0 = ap_block_pp0_stage32) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage32)) or ((ap_const_boolean_0 = ap_block_pp0_stage27) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27)) or ((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then 
            grp_fu_448_p0 <= reg_462;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_448_p0 <= tmp_fu_605_p19;
        else 
            grp_fu_448_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_448_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, reg_457, mul_i_1_reg_1065, mul_i_2_reg_1070, mul_i_3_reg_1075, mul_i_4_reg_1080, mul_i_6_reg_1085, ap_CS_fsm_pp0_stage12, mul_i_7_reg_1090, ap_block_pp0_stage7, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27, ap_CS_fsm_pp0_stage32, ap_block_pp0_stage32, ap_CS_fsm_pp0_stage37, ap_block_pp0_stage37, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_448_p1 <= mul_i_7_reg_1090;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage37) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage37))) then 
            grp_fu_448_p1 <= mul_i_6_reg_1085;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage27) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27))) then 
            grp_fu_448_p1 <= mul_i_4_reg_1080;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then 
            grp_fu_448_p1 <= mul_i_3_reg_1075;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then 
            grp_fu_448_p1 <= mul_i_2_reg_1070;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_448_p1 <= mul_i_1_reg_1065;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage32) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage32)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_448_p1 <= reg_457;
        else 
            grp_fu_448_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_452_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, w_l_plus1_T_q0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, w_l_plus1_T_71_load_reg_1016, w_l_plus1_T_72_load_reg_1021, w_l_plus1_T_73_load_reg_1026, w_l_plus1_T_74_load_reg_1031, w_l_plus1_T_75_load_reg_1036, w_l_plus1_T_76_load_reg_1041, w_l_plus1_T_77_load_reg_1046, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage8)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                grp_fu_452_p0 <= w_l_plus1_T_77_load_reg_1046;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                grp_fu_452_p0 <= w_l_plus1_T_76_load_reg_1041;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_452_p0 <= w_l_plus1_T_75_load_reg_1036;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_452_p0 <= w_l_plus1_T_74_load_reg_1031;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_452_p0 <= w_l_plus1_T_73_load_reg_1026;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_452_p0 <= w_l_plus1_T_72_load_reg_1021;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_452_p0 <= w_l_plus1_T_71_load_reg_1016;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_452_p0 <= w_l_plus1_T_q0;
            else 
                grp_fu_452_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_452_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_452_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, p_read, p_read1, p_read2, p_read3, p_read4, p_read5, p_read6, p_read7, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage8)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                grp_fu_452_p1 <= p_read7;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                grp_fu_452_p1 <= p_read6;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_452_p1 <= p_read5;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_452_p1 <= p_read4;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_452_p1 <= p_read3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_452_p1 <= p_read2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_452_p1 <= p_read1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_452_p1 <= p_read;
            else 
                grp_fu_452_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_452_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_28_fu_573_p2 <= std_logic_vector(unsigned(i_reg_961) + unsigned(ap_const_lv4_1));
    icmp_ln81_fu_555_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_8) else "0";
    mux_case_0_out <= mux_case_0_fu_120;

    mux_case_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            mux_case_0_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_1_out <= mux_case_1_fu_124;

    mux_case_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            mux_case_1_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_2_out <= mux_case_2_fu_128;

    mux_case_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            mux_case_2_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_3_out <= mux_case_3_fu_132;

    mux_case_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            mux_case_3_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_4_out <= mux_case_4_fu_136;

    mux_case_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            mux_case_4_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_5_out <= mux_case_5_fu_140;

    mux_case_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            mux_case_5_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_6_out <= mux_case_6_fu_144;

    mux_case_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            mux_case_6_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mux_case_7_out <= mux_case_7_fu_148;

    mux_case_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln81_reg_967, ap_loop_exit_ready, ap_block_pp0_stage7_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln81_reg_967 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            mux_case_7_out_ap_vld <= ap_const_logic_1;
        else 
            mux_case_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_605_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_fu_605_p18 <= i_reg_961(3 - 1 downto 0);
    trunc_ln81_fu_602_p1 <= i_reg_961(3 - 1 downto 0);
    w_l_plus1_T_71_address0 <= zext_ln81_fu_561_p1(3 - 1 downto 0);
    w_l_plus1_T_71_ce0 <= w_l_plus1_T_71_ce0_local;

    w_l_plus1_T_71_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_T_71_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_71_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_72_address0 <= zext_ln81_fu_561_p1(3 - 1 downto 0);
    w_l_plus1_T_72_ce0 <= w_l_plus1_T_72_ce0_local;

    w_l_plus1_T_72_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_T_72_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_72_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_73_address0 <= zext_ln81_fu_561_p1(3 - 1 downto 0);
    w_l_plus1_T_73_ce0 <= w_l_plus1_T_73_ce0_local;

    w_l_plus1_T_73_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_T_73_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_73_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_74_address0 <= zext_ln81_fu_561_p1(3 - 1 downto 0);
    w_l_plus1_T_74_ce0 <= w_l_plus1_T_74_ce0_local;

    w_l_plus1_T_74_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_T_74_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_74_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_75_address0 <= zext_ln81_fu_561_p1(3 - 1 downto 0);
    w_l_plus1_T_75_ce0 <= w_l_plus1_T_75_ce0_local;

    w_l_plus1_T_75_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_T_75_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_75_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_76_address0 <= zext_ln81_fu_561_p1(3 - 1 downto 0);
    w_l_plus1_T_76_ce0 <= w_l_plus1_T_76_ce0_local;

    w_l_plus1_T_76_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_T_76_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_76_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_77_address0 <= zext_ln81_fu_561_p1(3 - 1 downto 0);
    w_l_plus1_T_77_ce0 <= w_l_plus1_T_77_ce0_local;

    w_l_plus1_T_77_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_T_77_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_77_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_address0 <= zext_ln81_fu_561_p1(3 - 1 downto 0);
    w_l_plus1_T_ce0 <= w_l_plus1_T_ce0_local;

    w_l_plus1_T_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_T_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln81_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
end behav;
