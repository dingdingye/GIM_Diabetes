// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_accelerator_Pipeline_VITIS_LOOP_323_1_VITIS_LOOP_324_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        biases_l2_load,
        weights_l2_load,
        update_temp_mat_128_address0,
        update_temp_mat_128_ce0,
        update_temp_mat_128_q0,
        d_l2_0_load_2,
        d_l2_0_1_load_2,
        d_l2_0_2_load_2,
        d_l2_0_3_load_2,
        d_l2_0_4_load_2,
        d_l2_0_5_load_2,
        d_l2_0_6_load_2,
        d_l2_0_7_load_2,
        or_ln327_11_out,
        or_ln327_11_out_ap_vld,
        p_out,
        p_out_ap_vld,
        grp_fu_8485_p_din0,
        grp_fu_8485_p_din1,
        grp_fu_8485_p_opcode,
        grp_fu_8485_p_dout0,
        grp_fu_8485_p_ce,
        grp_fu_8581_p_din0,
        grp_fu_8581_p_din1,
        grp_fu_8581_p_dout0,
        grp_fu_8581_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] biases_l2_load;
input  [4095:0] weights_l2_load;
output  [5:0] update_temp_mat_128_address0;
output   update_temp_mat_128_ce0;
input  [63:0] update_temp_mat_128_q0;
input  [63:0] d_l2_0_load_2;
input  [63:0] d_l2_0_1_load_2;
input  [63:0] d_l2_0_2_load_2;
input  [63:0] d_l2_0_3_load_2;
input  [63:0] d_l2_0_4_load_2;
input  [63:0] d_l2_0_5_load_2;
input  [63:0] d_l2_0_6_load_2;
input  [63:0] d_l2_0_7_load_2;
output  [511:0] or_ln327_11_out;
output   or_ln327_11_out_ap_vld;
output  [4095:0] p_out;
output   p_out_ap_vld;
output  [63:0] grp_fu_8485_p_din0;
output  [63:0] grp_fu_8485_p_din1;
output  [0:0] grp_fu_8485_p_opcode;
input  [63:0] grp_fu_8485_p_dout0;
output   grp_fu_8485_p_ce;
output  [63:0] grp_fu_8581_p_din0;
output  [63:0] grp_fu_8581_p_din1;
input  [63:0] grp_fu_8581_p_dout0;
output   grp_fu_8581_p_ce;

reg ap_idle;
reg or_ln327_11_out_ap_vld;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln323_reg_599;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [63:0] reg_227;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln323_fu_259_p2;
reg   [0:0] icmp_ln323_reg_599_pp0_iter1_reg;
wire   [0:0] icmp_ln324_fu_283_p2;
reg   [0:0] icmp_ln324_reg_603;
reg   [0:0] icmp_ln324_reg_603_pp0_iter1_reg;
wire   [2:0] trunc_ln56_fu_305_p1;
reg   [2:0] trunc_ln56_reg_608;
reg   [2:0] trunc_ln56_reg_608_pp0_iter1_reg;
wire   [2:0] trunc_ln56_1_fu_332_p1;
reg   [2:0] trunc_ln56_1_reg_619;
wire   [63:0] tmp_3_fu_342_p19;
reg   [63:0] tmp_3_reg_624;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [4095:0] p_load21_reg_634;
wire   [4095:0] zext_ln325_fu_408_p1;
reg   [4095:0] zext_ln325_reg_639;
wire   [63:0] trunc_ln325_fu_418_p1;
reg   [63:0] trunc_ln325_reg_645;
reg   [63:0] mul_i3_reg_650;
wire   [511:0] select_ln323_1_fu_428_p3;
reg   [511:0] select_ln323_1_reg_655;
wire   [63:0] bitcast_ln325_fu_435_p1;
wire   [511:0] zext_ln327_fu_446_p1;
reg   [511:0] zext_ln327_reg_665;
wire   [63:0] trunc_ln327_fu_456_p1;
reg   [63:0] trunc_ln327_reg_671;
reg   [63:0] mul29_i1_reg_676;
wire   [63:0] bitcast_ln327_fu_465_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire   [511:0] shl_ln327_fu_504_p2;
reg   [511:0] shl_ln327_reg_686;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire   [63:0] zext_ln56_2_fu_327_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_106;
wire   [3:0] add_ln324_fu_336_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [4095:0] empty_fu_110;
wire   [4095:0] or_ln325_fu_498_p2;
reg   [4095:0] ap_sig_allocacmp_p_load21;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage1;
reg    ap_idle_pp0_0to0;
wire    ap_block_pp0_stage1;
reg   [511:0] or_ln327_11_fu_114;
wire   [511:0] or_ln327_fu_537_p2;
reg   [511:0] ap_sig_allocacmp_or_ln327_11_load_1;
reg   [3:0] i_48_fu_118;
wire   [3:0] select_ln323_2_fu_297_p3;
reg   [3:0] ap_sig_allocacmp_i_48_load;
reg   [511:0] empty_27_fu_122;
reg   [6:0] indvar_flatten_fu_126;
wire   [6:0] add_ln323_fu_265_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire    ap_block_pp0_stage1_01001;
reg    update_temp_mat_128_ce0_local;
reg   [63:0] grp_fu_217_p0;
reg   [63:0] grp_fu_217_p1;
wire    ap_block_pp0_stage2;
reg   [63:0] grp_fu_221_p0;
wire   [3:0] add_ln323_1_fu_277_p2;
wire   [3:0] select_ln323_fu_289_p3;
wire   [5:0] tmp_s_fu_309_p3;
wire   [5:0] zext_ln56_fu_317_p1;
wire   [5:0] add_ln56_fu_321_p2;
wire   [63:0] tmp_3_fu_342_p17;
wire   [11:0] add_ln_fu_400_p4;
wire   [4095:0] lshr_ln325_fu_412_p2;
wire   [8:0] shl_ln56_2_fu_439_p3;
wire   [511:0] lshr_ln327_fu_450_p2;
wire   [63:0] bitcast_ln325_1_fu_469_p1;
wire   [4095:0] zext_ln325_1_fu_478_p1;
wire   [4095:0] shl_ln325_fu_473_p2;
wire   [4095:0] xor_ln325_fu_487_p2;
wire   [4095:0] shl_ln325_1_fu_482_p2;
wire   [4095:0] and_ln325_fu_493_p2;
wire   [63:0] bitcast_ln327_1_fu_514_p1;
wire   [511:0] zext_ln327_1_fu_518_p1;
wire   [511:0] xor_ln327_fu_527_p2;
wire   [511:0] shl_ln327_1_fu_522_p2;
wire   [511:0] and_ln327_fu_532_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage2_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [2:0] tmp_3_fu_342_p1;
wire   [2:0] tmp_3_fu_342_p3;
wire   [2:0] tmp_3_fu_342_p5;
wire   [2:0] tmp_3_fu_342_p7;
wire  signed [2:0] tmp_3_fu_342_p9;
wire  signed [2:0] tmp_3_fu_342_p11;
wire  signed [2:0] tmp_3_fu_342_p13;
wire  signed [2:0] tmp_3_fu_342_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_106 = 4'd0;
#0 empty_fu_110 = 4096'd0;
#0 or_ln327_11_fu_114 = 512'd0;
#0 i_48_fu_118 = 4'd0;
#0 empty_27_fu_122 = 512'd0;
#0 indvar_flatten_fu_126 = 7'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U3517(
    .din0(d_l2_0_load_2),
    .din1(d_l2_0_1_load_2),
    .din2(d_l2_0_2_load_2),
    .din3(d_l2_0_3_load_2),
    .din4(d_l2_0_4_load_2),
    .din5(d_l2_0_5_load_2),
    .din6(d_l2_0_6_load_2),
    .din7(d_l2_0_7_load_2),
    .def(tmp_3_fu_342_p17),
    .sel(trunc_ln56_fu_305_p1),
    .dout(tmp_3_fu_342_p19)
);

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        empty_27_fu_122 <= biases_l2_load;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_27_fu_122 <= select_ln323_1_fu_428_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_110 <= weights_l2_load;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_fu_110 <= or_ln325_fu_498_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln323_fu_259_p2 == 1'd0))) begin
            i_48_fu_118 <= select_ln323_2_fu_297_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_48_fu_118 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln323_fu_259_p2 == 1'd0))) begin
            indvar_flatten_fu_126 <= add_ln323_fu_265_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_126 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln323_fu_259_p2 == 1'd0))) begin
            j_fu_106 <= add_ln324_fu_336_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_106 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln323_reg_599 <= icmp_ln323_fu_259_p2;
        icmp_ln323_reg_599_pp0_iter1_reg <= icmp_ln323_reg_599;
        icmp_ln324_reg_603 <= icmp_ln324_fu_283_p2;
        icmp_ln324_reg_603_pp0_iter1_reg <= icmp_ln324_reg_603;
        p_load21_reg_634 <= ap_sig_allocacmp_p_load21;
        shl_ln327_reg_686 <= shl_ln327_fu_504_p2;
        tmp_3_reg_624 <= tmp_3_fu_342_p19;
        trunc_ln325_reg_645 <= trunc_ln325_fu_418_p1;
        trunc_ln56_1_reg_619 <= trunc_ln56_1_fu_332_p1;
        trunc_ln56_reg_608 <= trunc_ln56_fu_305_p1;
        trunc_ln56_reg_608_pp0_iter1_reg <= trunc_ln56_reg_608;
        zext_ln325_reg_639[11 : 6] <= zext_ln325_fu_408_p1[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul29_i1_reg_676 <= grp_fu_8581_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_i3_reg_650 <= grp_fu_8581_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln327_11_fu_114 <= or_ln327_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        reg_227 <= grp_fu_8485_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln323_1_reg_655 <= select_ln323_1_fu_428_p3;
        trunc_ln327_reg_671 <= trunc_ln327_fu_456_p1;
        zext_ln327_reg_665[8 : 6] <= zext_ln327_fu_446_p1[8 : 6];
    end
end

always @ (*) begin
    if (((icmp_ln323_reg_599 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln323_reg_599_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_48_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_48_load = i_48_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_or_ln327_11_load_1 = or_ln327_fu_537_p2;
    end else begin
        ap_sig_allocacmp_or_ln327_11_load_1 = or_ln327_11_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_p_load21 = or_ln325_fu_498_p2;
    end else begin
        ap_sig_allocacmp_p_load21 = empty_fu_110;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_217_p0 = bitcast_ln327_fu_465_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_217_p0 = bitcast_ln325_fu_435_p1;
        end else begin
            grp_fu_217_p0 = 'bx;
        end
    end else begin
        grp_fu_217_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_217_p1 = mul29_i1_reg_676;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_217_p1 = mul_i3_reg_650;
        end else begin
            grp_fu_217_p1 = 'bx;
        end
    end else begin
        grp_fu_217_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_221_p0 = tmp_3_reg_624;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_221_p0 = update_temp_mat_128_q0;
        end else begin
            grp_fu_221_p0 = 'bx;
        end
    end else begin
        grp_fu_221_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln323_reg_599_pp0_iter1_reg == 1'd1))) begin
        or_ln327_11_out_ap_vld = 1'b1;
    end else begin
        or_ln327_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln323_reg_599_pp0_iter1_reg == 1'd1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        update_temp_mat_128_ce0_local = 1'b1;
    end else begin
        update_temp_mat_128_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln323_1_fu_277_p2 = (ap_sig_allocacmp_i_48_load + 4'd1);

assign add_ln323_fu_265_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln324_fu_336_p2 = (select_ln323_fu_289_p3 + 4'd1);

assign add_ln56_fu_321_p2 = (tmp_s_fu_309_p3 + zext_ln56_fu_317_p1);

assign add_ln_fu_400_p4 = {{{trunc_ln56_reg_608}, {trunc_ln56_1_reg_619}}, {6'd0}};

assign and_ln325_fu_493_p2 = (xor_ln325_fu_487_p2 & p_load21_reg_634);

assign and_ln327_fu_532_p2 = (xor_ln327_fu_527_p2 & select_ln323_1_reg_655);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign ap_ready = ap_ready_sig;

assign bitcast_ln325_1_fu_469_p1 = reg_227;

assign bitcast_ln325_fu_435_p1 = trunc_ln325_reg_645;

assign bitcast_ln327_1_fu_514_p1 = reg_227;

assign bitcast_ln327_fu_465_p1 = trunc_ln327_reg_671;

assign grp_fu_8485_p_ce = 1'b1;

assign grp_fu_8485_p_din0 = grp_fu_217_p0;

assign grp_fu_8485_p_din1 = grp_fu_217_p1;

assign grp_fu_8485_p_opcode = 2'd1;

assign grp_fu_8581_p_ce = 1'b1;

assign grp_fu_8581_p_din0 = grp_fu_221_p0;

assign grp_fu_8581_p_din1 = 64'd4562254508917369340;

assign icmp_ln323_fu_259_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln324_fu_283_p2 = ((ap_sig_allocacmp_j_load == 4'd8) ? 1'b1 : 1'b0);

assign lshr_ln325_fu_412_p2 = ap_sig_allocacmp_p_load21 >> zext_ln325_fu_408_p1;

assign lshr_ln327_fu_450_p2 = select_ln323_1_fu_428_p3 >> zext_ln327_fu_446_p1;

assign or_ln325_fu_498_p2 = (shl_ln325_1_fu_482_p2 | and_ln325_fu_493_p2);

assign or_ln327_11_out = or_ln327_11_fu_114;

assign or_ln327_fu_537_p2 = (shl_ln327_1_fu_522_p2 | and_ln327_fu_532_p2);

assign p_out = empty_fu_110;

assign select_ln323_1_fu_428_p3 = ((icmp_ln324_reg_603_pp0_iter1_reg[0:0] == 1'b1) ? ap_sig_allocacmp_or_ln327_11_load_1 : empty_27_fu_122);

assign select_ln323_2_fu_297_p3 = ((icmp_ln324_fu_283_p2[0:0] == 1'b1) ? add_ln323_1_fu_277_p2 : ap_sig_allocacmp_i_48_load);

assign select_ln323_fu_289_p3 = ((icmp_ln324_fu_283_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign shl_ln325_1_fu_482_p2 = zext_ln325_1_fu_478_p1 << zext_ln325_reg_639;

assign shl_ln325_fu_473_p2 = 4096'd18446744073709551615 << zext_ln325_reg_639;

assign shl_ln327_1_fu_522_p2 = zext_ln327_1_fu_518_p1 << zext_ln327_reg_665;

assign shl_ln327_fu_504_p2 = 512'd18446744073709551615 << zext_ln327_reg_665;

assign shl_ln56_2_fu_439_p3 = {{trunc_ln56_reg_608_pp0_iter1_reg}, {6'd0}};

assign tmp_3_fu_342_p17 = 'bx;

assign tmp_s_fu_309_p3 = {{trunc_ln56_fu_305_p1}, {3'd0}};

assign trunc_ln325_fu_418_p1 = lshr_ln325_fu_412_p2[63:0];

assign trunc_ln327_fu_456_p1 = lshr_ln327_fu_450_p2[63:0];

assign trunc_ln56_1_fu_332_p1 = select_ln323_fu_289_p3[2:0];

assign trunc_ln56_fu_305_p1 = select_ln323_2_fu_297_p3[2:0];

assign update_temp_mat_128_address0 = zext_ln56_2_fu_327_p1;

assign update_temp_mat_128_ce0 = update_temp_mat_128_ce0_local;

assign xor_ln325_fu_487_p2 = (shl_ln325_fu_473_p2 ^ 4096'd

assign xor_ln327_fu_527_p2 = (shl_ln327_reg_686 ^ 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095);

assign zext_ln325_1_fu_478_p1 = bitcast_ln325_1_fu_469_p1;

assign zext_ln325_fu_408_p1 = add_ln_fu_400_p4;

assign zext_ln327_1_fu_518_p1 = bitcast_ln327_1_fu_514_p1;

assign zext_ln327_fu_446_p1 = shl_ln56_2_fu_439_p3;

assign zext_ln56_2_fu_327_p1 = add_ln56_fu_321_p2;

assign zext_ln56_fu_317_p1 = select_ln323_fu_289_p3;

always @ (posedge ap_clk) begin
    zext_ln325_reg_639[5:0] <= 6'b000000;
    zext_ln325_reg_639[4095:12] <= 4084'b
    zext_ln327_reg_665[5:0] <= 6'b000000;
    zext_ln327_reg_665[511:9] <= 503'b
end

endmodule //accelerator_accelerator_Pipeline_VITIS_LOOP_323_1_VITIS_LOOP_324_2
