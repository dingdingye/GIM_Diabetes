// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module accelerator_backProp_8_8_10_Pipeline_VITIS_LOOP_81_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mux_case_019_reload,
        mux_case_122_reload,
        mux_case_226_reload,
        mux_case_330_reload,
        mux_case_433_reload,
        mux_case_536_reload,
        mux_case_639_reload,
        mux_case_743_reload,
        p_read,
        mux_case_0246_reload,
        mux_case_1349_reload,
        mux_case_2452_reload,
        mux_case_3555_reload,
        mux_case_4658_reload,
        mux_case_5761_reload,
        mux_case_6864_reload,
        mux_case_7967_reload,
        p_read1,
        mux_case_01070_reload,
        mux_case_11173_reload,
        mux_case_21276_reload,
        mux_case_31379_reload,
        mux_case_41482_reload,
        mux_case_51585_reload,
        mux_case_61688_reload,
        mux_case_71791_reload,
        p_read2,
        mux_case_01894_reload,
        mux_case_11997_reload,
        mux_case_220100_reload,
        mux_case_321103_reload,
        mux_case_422106_reload,
        mux_case_523109_reload,
        mux_case_624112_reload,
        mux_case_725115_reload,
        p_read3,
        mux_case_026118_reload,
        mux_case_127121_reload,
        mux_case_228124_reload,
        mux_case_329127_reload,
        mux_case_430130_reload,
        mux_case_531133_reload,
        mux_case_632136_reload,
        mux_case_733139_reload,
        p_read4,
        mux_case_034142_reload,
        mux_case_135145_reload,
        mux_case_236148_reload,
        mux_case_337151_reload,
        mux_case_438154_reload,
        mux_case_539157_reload,
        mux_case_640160_reload,
        mux_case_741163_reload,
        p_read5,
        mux_case_042166_reload,
        mux_case_143169_reload,
        mux_case_244172_reload,
        mux_case_345175_reload,
        mux_case_446178_reload,
        mux_case_547181_reload,
        mux_case_648184_reload,
        mux_case_749187_reload,
        p_read6,
        mux_case_050190_reload,
        mux_case_151193_reload,
        mux_case_252196_reload,
        mux_case_353199_reload,
        mux_case_454202_reload,
        mux_case_555205_reload,
        mux_case_656208_reload,
        mux_case_757211_reload,
        p_read7,
        mux_case_058214_reload,
        mux_case_159217_reload,
        mux_case_260220_reload,
        mux_case_361223_reload,
        mux_case_462226_reload,
        mux_case_563229_reload,
        mux_case_664232_reload,
        mux_case_765235_reload,
        p_read8,
        mux_case_066238_reload,
        mux_case_167241_reload,
        mux_case_268244_reload,
        mux_case_369247_reload,
        mux_case_470250_reload,
        mux_case_571253_reload,
        mux_case_672256_reload,
        mux_case_773259_reload,
        p_read9,
        add_i_915_out,
        add_i_915_out_ap_vld,
        add_i_913_out,
        add_i_913_out_ap_vld,
        add_i_911_out,
        add_i_911_out_ap_vld,
        add_i_99_out,
        add_i_99_out_ap_vld,
        add_i_97_out,
        add_i_97_out_ap_vld,
        add_i_95_out,
        add_i_95_out_ap_vld,
        add_i_93_out,
        add_i_93_out_ap_vld,
        add_i_91_out,
        add_i_91_out_ap_vld,
        mux_case_78_out,
        mux_case_78_out_ap_vld,
        mux_case_67_out,
        mux_case_67_out_ap_vld,
        mux_case_56_out,
        mux_case_56_out_ap_vld,
        mux_case_45_out,
        mux_case_45_out_ap_vld,
        mux_case_34_out,
        mux_case_34_out_ap_vld,
        mux_case_23_out,
        mux_case_23_out_ap_vld,
        mux_case_12_out,
        mux_case_12_out_ap_vld,
        mux_case_01_out,
        mux_case_01_out_ap_vld,
        grp_fu_2564_p_din0,
        grp_fu_2564_p_din1,
        grp_fu_2564_p_opcode,
        grp_fu_2564_p_dout0,
        grp_fu_2564_p_ce,
        grp_fu_2568_p_din0,
        grp_fu_2568_p_din1,
        grp_fu_2568_p_dout0,
        grp_fu_2568_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 50'd1;
parameter    ap_ST_fsm_pp0_stage1 = 50'd2;
parameter    ap_ST_fsm_pp0_stage2 = 50'd4;
parameter    ap_ST_fsm_pp0_stage3 = 50'd8;
parameter    ap_ST_fsm_pp0_stage4 = 50'd16;
parameter    ap_ST_fsm_pp0_stage5 = 50'd32;
parameter    ap_ST_fsm_pp0_stage6 = 50'd64;
parameter    ap_ST_fsm_pp0_stage7 = 50'd128;
parameter    ap_ST_fsm_pp0_stage8 = 50'd256;
parameter    ap_ST_fsm_pp0_stage9 = 50'd512;
parameter    ap_ST_fsm_pp0_stage10 = 50'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 50'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 50'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 50'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 50'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 50'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 50'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 50'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 50'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 50'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 50'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 50'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 50'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 50'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 50'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 50'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 50'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 50'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 50'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 50'd536870912;
parameter    ap_ST_fsm_pp0_stage30 = 50'd1073741824;
parameter    ap_ST_fsm_pp0_stage31 = 50'd2147483648;
parameter    ap_ST_fsm_pp0_stage32 = 50'd4294967296;
parameter    ap_ST_fsm_pp0_stage33 = 50'd8589934592;
parameter    ap_ST_fsm_pp0_stage34 = 50'd17179869184;
parameter    ap_ST_fsm_pp0_stage35 = 50'd34359738368;
parameter    ap_ST_fsm_pp0_stage36 = 50'd68719476736;
parameter    ap_ST_fsm_pp0_stage37 = 50'd137438953472;
parameter    ap_ST_fsm_pp0_stage38 = 50'd274877906944;
parameter    ap_ST_fsm_pp0_stage39 = 50'd549755813888;
parameter    ap_ST_fsm_pp0_stage40 = 50'd1099511627776;
parameter    ap_ST_fsm_pp0_stage41 = 50'd2199023255552;
parameter    ap_ST_fsm_pp0_stage42 = 50'd4398046511104;
parameter    ap_ST_fsm_pp0_stage43 = 50'd8796093022208;
parameter    ap_ST_fsm_pp0_stage44 = 50'd17592186044416;
parameter    ap_ST_fsm_pp0_stage45 = 50'd35184372088832;
parameter    ap_ST_fsm_pp0_stage46 = 50'd70368744177664;
parameter    ap_ST_fsm_pp0_stage47 = 50'd140737488355328;
parameter    ap_ST_fsm_pp0_stage48 = 50'd281474976710656;
parameter    ap_ST_fsm_pp0_stage49 = 50'd562949953421312;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] mux_case_019_reload;
input  [63:0] mux_case_122_reload;
input  [63:0] mux_case_226_reload;
input  [63:0] mux_case_330_reload;
input  [63:0] mux_case_433_reload;
input  [63:0] mux_case_536_reload;
input  [63:0] mux_case_639_reload;
input  [63:0] mux_case_743_reload;
input  [63:0] p_read;
input  [63:0] mux_case_0246_reload;
input  [63:0] mux_case_1349_reload;
input  [63:0] mux_case_2452_reload;
input  [63:0] mux_case_3555_reload;
input  [63:0] mux_case_4658_reload;
input  [63:0] mux_case_5761_reload;
input  [63:0] mux_case_6864_reload;
input  [63:0] mux_case_7967_reload;
input  [63:0] p_read1;
input  [63:0] mux_case_01070_reload;
input  [63:0] mux_case_11173_reload;
input  [63:0] mux_case_21276_reload;
input  [63:0] mux_case_31379_reload;
input  [63:0] mux_case_41482_reload;
input  [63:0] mux_case_51585_reload;
input  [63:0] mux_case_61688_reload;
input  [63:0] mux_case_71791_reload;
input  [63:0] p_read2;
input  [63:0] mux_case_01894_reload;
input  [63:0] mux_case_11997_reload;
input  [63:0] mux_case_220100_reload;
input  [63:0] mux_case_321103_reload;
input  [63:0] mux_case_422106_reload;
input  [63:0] mux_case_523109_reload;
input  [63:0] mux_case_624112_reload;
input  [63:0] mux_case_725115_reload;
input  [63:0] p_read3;
input  [63:0] mux_case_026118_reload;
input  [63:0] mux_case_127121_reload;
input  [63:0] mux_case_228124_reload;
input  [63:0] mux_case_329127_reload;
input  [63:0] mux_case_430130_reload;
input  [63:0] mux_case_531133_reload;
input  [63:0] mux_case_632136_reload;
input  [63:0] mux_case_733139_reload;
input  [63:0] p_read4;
input  [63:0] mux_case_034142_reload;
input  [63:0] mux_case_135145_reload;
input  [63:0] mux_case_236148_reload;
input  [63:0] mux_case_337151_reload;
input  [63:0] mux_case_438154_reload;
input  [63:0] mux_case_539157_reload;
input  [63:0] mux_case_640160_reload;
input  [63:0] mux_case_741163_reload;
input  [63:0] p_read5;
input  [63:0] mux_case_042166_reload;
input  [63:0] mux_case_143169_reload;
input  [63:0] mux_case_244172_reload;
input  [63:0] mux_case_345175_reload;
input  [63:0] mux_case_446178_reload;
input  [63:0] mux_case_547181_reload;
input  [63:0] mux_case_648184_reload;
input  [63:0] mux_case_749187_reload;
input  [63:0] p_read6;
input  [63:0] mux_case_050190_reload;
input  [63:0] mux_case_151193_reload;
input  [63:0] mux_case_252196_reload;
input  [63:0] mux_case_353199_reload;
input  [63:0] mux_case_454202_reload;
input  [63:0] mux_case_555205_reload;
input  [63:0] mux_case_656208_reload;
input  [63:0] mux_case_757211_reload;
input  [63:0] p_read7;
input  [63:0] mux_case_058214_reload;
input  [63:0] mux_case_159217_reload;
input  [63:0] mux_case_260220_reload;
input  [63:0] mux_case_361223_reload;
input  [63:0] mux_case_462226_reload;
input  [63:0] mux_case_563229_reload;
input  [63:0] mux_case_664232_reload;
input  [63:0] mux_case_765235_reload;
input  [63:0] p_read8;
input  [63:0] mux_case_066238_reload;
input  [63:0] mux_case_167241_reload;
input  [63:0] mux_case_268244_reload;
input  [63:0] mux_case_369247_reload;
input  [63:0] mux_case_470250_reload;
input  [63:0] mux_case_571253_reload;
input  [63:0] mux_case_672256_reload;
input  [63:0] mux_case_773259_reload;
input  [63:0] p_read9;
output  [63:0] add_i_915_out;
output   add_i_915_out_ap_vld;
output  [63:0] add_i_913_out;
output   add_i_913_out_ap_vld;
output  [63:0] add_i_911_out;
output   add_i_911_out_ap_vld;
output  [63:0] add_i_99_out;
output   add_i_99_out_ap_vld;
output  [63:0] add_i_97_out;
output   add_i_97_out_ap_vld;
output  [63:0] add_i_95_out;
output   add_i_95_out_ap_vld;
output  [63:0] add_i_93_out;
output   add_i_93_out_ap_vld;
output  [63:0] add_i_91_out;
output   add_i_91_out_ap_vld;
output  [63:0] mux_case_78_out;
output   mux_case_78_out_ap_vld;
output  [63:0] mux_case_67_out;
output   mux_case_67_out_ap_vld;
output  [63:0] mux_case_56_out;
output   mux_case_56_out_ap_vld;
output  [63:0] mux_case_45_out;
output   mux_case_45_out_ap_vld;
output  [63:0] mux_case_34_out;
output   mux_case_34_out_ap_vld;
output  [63:0] mux_case_23_out;
output   mux_case_23_out_ap_vld;
output  [63:0] mux_case_12_out;
output   mux_case_12_out_ap_vld;
output  [63:0] mux_case_01_out;
output   mux_case_01_out_ap_vld;
output  [63:0] grp_fu_2564_p_din0;
output  [63:0] grp_fu_2564_p_din1;
output  [0:0] grp_fu_2564_p_opcode;
input  [63:0] grp_fu_2564_p_dout0;
output   grp_fu_2564_p_ce;
output  [63:0] grp_fu_2568_p_din0;
output  [63:0] grp_fu_2568_p_din1;
input  [63:0] grp_fu_2568_p_dout0;
output   grp_fu_2568_p_ce;

reg ap_idle;
reg add_i_915_out_ap_vld;
reg add_i_913_out_ap_vld;
reg add_i_911_out_ap_vld;
reg add_i_99_out_ap_vld;
reg add_i_97_out_ap_vld;
reg add_i_95_out_ap_vld;
reg add_i_93_out_ap_vld;
reg add_i_91_out_ap_vld;
reg mux_case_78_out_ap_vld;
reg mux_case_67_out_ap_vld;
reg mux_case_56_out_ap_vld;
reg mux_case_45_out_ap_vld;
reg mux_case_34_out_ap_vld;
reg mux_case_23_out_ap_vld;
reg mux_case_12_out_ap_vld;
reg mux_case_01_out_ap_vld;

(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln81_reg_1895;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage49;
wire    ap_block_pp0_stage49_subdone;
reg   [63:0] reg_991;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_11001;
reg   [63:0] reg_996;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15_11001;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_pp0_stage20_11001;
wire    ap_CS_fsm_pp0_stage25;
wire    ap_block_pp0_stage25_11001;
wire    ap_CS_fsm_pp0_stage30;
wire    ap_block_pp0_stage30_11001;
wire    ap_CS_fsm_pp0_stage35;
wire    ap_block_pp0_stage35_11001;
wire    ap_CS_fsm_pp0_stage40;
wire    ap_block_pp0_stage40_11001;
wire    ap_CS_fsm_pp0_stage45;
wire    ap_block_pp0_stage45_11001;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln81_fu_1089_p2;
wire   [3:0] i_21_fu_1095_p2;
reg   [3:0] i_21_reg_1899;
wire   [2:0] trunc_ln81_fu_1101_p1;
reg   [2:0] trunc_ln81_reg_1904;
reg   [2:0] trunc_ln81_reg_1904_pp0_iter1_reg;
wire   [63:0] tmp_s_fu_1105_p19;
wire   [63:0] tmp_1_fu_1146_p19;
reg   [63:0] tmp_1_reg_1914;
wire   [63:0] tmp_2_fu_1186_p19;
reg   [63:0] tmp_2_reg_1919;
wire   [63:0] tmp_3_fu_1226_p19;
reg   [63:0] tmp_3_reg_1924;
wire   [63:0] tmp_4_fu_1266_p19;
reg   [63:0] tmp_4_reg_1929;
wire   [63:0] tmp_5_fu_1306_p19;
reg   [63:0] tmp_5_reg_1934;
wire   [63:0] tmp_6_fu_1346_p19;
reg   [63:0] tmp_6_reg_1939;
wire   [63:0] tmp_7_fu_1386_p19;
reg   [63:0] tmp_7_reg_1944;
wire   [63:0] tmp_8_fu_1426_p19;
reg   [63:0] tmp_8_reg_1949;
wire   [63:0] tmp_9_fu_1466_p19;
reg   [63:0] tmp_9_reg_1954;
wire   [63:0] tmp_fu_1530_p19;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6_11001;
reg   [63:0] mul_i_1_reg_1964;
reg   [63:0] mul_i_2_reg_1969;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_11001;
reg   [63:0] mul_i_3_reg_1974;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_11001;
reg   [63:0] mul_i_4_reg_1979;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9_11001;
reg   [63:0] mul_i_6_reg_1984;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11_11001;
reg   [63:0] mul_i_7_reg_1989;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12_11001;
reg   [63:0] mul_i_8_reg_1994;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13_11001;
reg   [63:0] mul_i_9_reg_1999;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [3:0] i_18_fu_262;
wire    ap_block_pp0_stage49_11001;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0;
reg   [63:0] mux_case_01_fu_266;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
reg   [63:0] mux_case_12_fu_270;
reg   [63:0] mux_case_23_fu_274;
reg   [63:0] mux_case_34_fu_278;
reg   [63:0] mux_case_45_fu_282;
reg   [63:0] mux_case_56_fu_286;
reg   [63:0] mux_case_67_fu_290;
reg   [63:0] mux_case_78_fu_294;
reg   [63:0] add_i_91_fu_298;
reg   [63:0] add_i_93_fu_302;
reg   [63:0] add_i_95_fu_306;
reg   [63:0] add_i_97_fu_310;
reg   [63:0] add_i_99_fu_314;
reg   [63:0] add_i_911_fu_318;
reg   [63:0] add_i_913_fu_322;
reg   [63:0] add_i_915_fu_326;
wire    ap_block_pp0_stage5_01001;
reg   [63:0] grp_fu_982_p0;
reg   [63:0] grp_fu_982_p1;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_pp0_stage16;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_pp0_stage21;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_block_pp0_stage26;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_pp0_stage31;
wire    ap_CS_fsm_pp0_stage36;
wire    ap_block_pp0_stage36;
wire    ap_CS_fsm_pp0_stage41;
wire    ap_block_pp0_stage41;
wire    ap_CS_fsm_pp0_stage46;
wire    ap_block_pp0_stage46;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [63:0] grp_fu_986_p0;
reg   [63:0] grp_fu_986_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage9;
wire   [63:0] tmp_s_fu_1105_p17;
wire   [63:0] tmp_1_fu_1146_p17;
wire   [63:0] tmp_2_fu_1186_p17;
wire   [63:0] tmp_3_fu_1226_p17;
wire   [63:0] tmp_4_fu_1266_p17;
wire   [63:0] tmp_5_fu_1306_p17;
wire   [63:0] tmp_6_fu_1346_p17;
wire   [63:0] tmp_7_fu_1386_p17;
wire   [63:0] tmp_8_fu_1426_p17;
wire   [63:0] tmp_9_fu_1466_p17;
wire   [63:0] tmp_fu_1530_p17;
wire    ap_block_pp0_stage6_00001;
wire    ap_block_pp0_stage11_00001;
wire    ap_block_pp0_stage16_00001;
wire    ap_block_pp0_stage21_00001;
wire    ap_block_pp0_stage26_00001;
wire    ap_block_pp0_stage31_00001;
wire    ap_block_pp0_stage36_00001;
wire    ap_block_pp0_stage41_00001;
wire    ap_block_pp0_stage46_00001;
wire    ap_block_pp0_stage1_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [49:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_pp0_stage35_subdone;
wire    ap_block_pp0_stage36_subdone;
wire    ap_block_pp0_stage37_subdone;
wire    ap_block_pp0_stage38_subdone;
wire    ap_block_pp0_stage39_subdone;
wire    ap_block_pp0_stage40_subdone;
wire    ap_block_pp0_stage41_subdone;
wire    ap_block_pp0_stage42_subdone;
wire    ap_block_pp0_stage43_subdone;
wire    ap_block_pp0_stage44_subdone;
wire    ap_block_pp0_stage45_subdone;
wire    ap_block_pp0_stage46_subdone;
wire    ap_block_pp0_stage47_subdone;
wire    ap_block_pp0_stage48_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [2:0] tmp_s_fu_1105_p1;
wire   [2:0] tmp_s_fu_1105_p3;
wire   [2:0] tmp_s_fu_1105_p5;
wire   [2:0] tmp_s_fu_1105_p7;
wire  signed [2:0] tmp_s_fu_1105_p9;
wire  signed [2:0] tmp_s_fu_1105_p11;
wire  signed [2:0] tmp_s_fu_1105_p13;
wire  signed [2:0] tmp_s_fu_1105_p15;
wire   [2:0] tmp_1_fu_1146_p1;
wire   [2:0] tmp_1_fu_1146_p3;
wire   [2:0] tmp_1_fu_1146_p5;
wire   [2:0] tmp_1_fu_1146_p7;
wire  signed [2:0] tmp_1_fu_1146_p9;
wire  signed [2:0] tmp_1_fu_1146_p11;
wire  signed [2:0] tmp_1_fu_1146_p13;
wire  signed [2:0] tmp_1_fu_1146_p15;
wire   [2:0] tmp_2_fu_1186_p1;
wire   [2:0] tmp_2_fu_1186_p3;
wire   [2:0] tmp_2_fu_1186_p5;
wire   [2:0] tmp_2_fu_1186_p7;
wire  signed [2:0] tmp_2_fu_1186_p9;
wire  signed [2:0] tmp_2_fu_1186_p11;
wire  signed [2:0] tmp_2_fu_1186_p13;
wire  signed [2:0] tmp_2_fu_1186_p15;
wire   [2:0] tmp_3_fu_1226_p1;
wire   [2:0] tmp_3_fu_1226_p3;
wire   [2:0] tmp_3_fu_1226_p5;
wire   [2:0] tmp_3_fu_1226_p7;
wire  signed [2:0] tmp_3_fu_1226_p9;
wire  signed [2:0] tmp_3_fu_1226_p11;
wire  signed [2:0] tmp_3_fu_1226_p13;
wire  signed [2:0] tmp_3_fu_1226_p15;
wire   [2:0] tmp_4_fu_1266_p1;
wire   [2:0] tmp_4_fu_1266_p3;
wire   [2:0] tmp_4_fu_1266_p5;
wire   [2:0] tmp_4_fu_1266_p7;
wire  signed [2:0] tmp_4_fu_1266_p9;
wire  signed [2:0] tmp_4_fu_1266_p11;
wire  signed [2:0] tmp_4_fu_1266_p13;
wire  signed [2:0] tmp_4_fu_1266_p15;
wire   [2:0] tmp_5_fu_1306_p1;
wire   [2:0] tmp_5_fu_1306_p3;
wire   [2:0] tmp_5_fu_1306_p5;
wire   [2:0] tmp_5_fu_1306_p7;
wire  signed [2:0] tmp_5_fu_1306_p9;
wire  signed [2:0] tmp_5_fu_1306_p11;
wire  signed [2:0] tmp_5_fu_1306_p13;
wire  signed [2:0] tmp_5_fu_1306_p15;
wire   [2:0] tmp_6_fu_1346_p1;
wire   [2:0] tmp_6_fu_1346_p3;
wire   [2:0] tmp_6_fu_1346_p5;
wire   [2:0] tmp_6_fu_1346_p7;
wire  signed [2:0] tmp_6_fu_1346_p9;
wire  signed [2:0] tmp_6_fu_1346_p11;
wire  signed [2:0] tmp_6_fu_1346_p13;
wire  signed [2:0] tmp_6_fu_1346_p15;
wire   [2:0] tmp_7_fu_1386_p1;
wire   [2:0] tmp_7_fu_1386_p3;
wire   [2:0] tmp_7_fu_1386_p5;
wire   [2:0] tmp_7_fu_1386_p7;
wire  signed [2:0] tmp_7_fu_1386_p9;
wire  signed [2:0] tmp_7_fu_1386_p11;
wire  signed [2:0] tmp_7_fu_1386_p13;
wire  signed [2:0] tmp_7_fu_1386_p15;
wire   [2:0] tmp_8_fu_1426_p1;
wire   [2:0] tmp_8_fu_1426_p3;
wire   [2:0] tmp_8_fu_1426_p5;
wire   [2:0] tmp_8_fu_1426_p7;
wire  signed [2:0] tmp_8_fu_1426_p9;
wire  signed [2:0] tmp_8_fu_1426_p11;
wire  signed [2:0] tmp_8_fu_1426_p13;
wire  signed [2:0] tmp_8_fu_1426_p15;
wire   [2:0] tmp_9_fu_1466_p1;
wire   [2:0] tmp_9_fu_1466_p3;
wire   [2:0] tmp_9_fu_1466_p5;
wire   [2:0] tmp_9_fu_1466_p7;
wire  signed [2:0] tmp_9_fu_1466_p9;
wire  signed [2:0] tmp_9_fu_1466_p11;
wire  signed [2:0] tmp_9_fu_1466_p13;
wire  signed [2:0] tmp_9_fu_1466_p15;
wire   [2:0] tmp_fu_1530_p1;
wire   [2:0] tmp_fu_1530_p3;
wire   [2:0] tmp_fu_1530_p5;
wire   [2:0] tmp_fu_1530_p7;
wire  signed [2:0] tmp_fu_1530_p9;
wire  signed [2:0] tmp_fu_1530_p11;
wire  signed [2:0] tmp_fu_1530_p13;
wire  signed [2:0] tmp_fu_1530_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 50'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_18_fu_262 = 4'd0;
#0 mux_case_01_fu_266 = 64'd0;
#0 mux_case_12_fu_270 = 64'd0;
#0 mux_case_23_fu_274 = 64'd0;
#0 mux_case_34_fu_278 = 64'd0;
#0 mux_case_45_fu_282 = 64'd0;
#0 mux_case_56_fu_286 = 64'd0;
#0 mux_case_67_fu_290 = 64'd0;
#0 mux_case_78_fu_294 = 64'd0;
#0 add_i_91_fu_298 = 64'd0;
#0 add_i_93_fu_302 = 64'd0;
#0 add_i_95_fu_306 = 64'd0;
#0 add_i_97_fu_310 = 64'd0;
#0 add_i_99_fu_314 = 64'd0;
#0 add_i_911_fu_318 = 64'd0;
#0 add_i_913_fu_322 = 64'd0;
#0 add_i_915_fu_326 = 64'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U987(
    .din0(mux_case_019_reload),
    .din1(mux_case_122_reload),
    .din2(mux_case_226_reload),
    .din3(mux_case_330_reload),
    .din4(mux_case_433_reload),
    .din5(mux_case_536_reload),
    .din6(mux_case_639_reload),
    .din7(mux_case_743_reload),
    .def(tmp_s_fu_1105_p17),
    .sel(trunc_ln81_fu_1101_p1),
    .dout(tmp_s_fu_1105_p19)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U988(
    .din0(mux_case_0246_reload),
    .din1(mux_case_1349_reload),
    .din2(mux_case_2452_reload),
    .din3(mux_case_3555_reload),
    .din4(mux_case_4658_reload),
    .din5(mux_case_5761_reload),
    .din6(mux_case_6864_reload),
    .din7(mux_case_7967_reload),
    .def(tmp_1_fu_1146_p17),
    .sel(trunc_ln81_fu_1101_p1),
    .dout(tmp_1_fu_1146_p19)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U989(
    .din0(mux_case_01070_reload),
    .din1(mux_case_11173_reload),
    .din2(mux_case_21276_reload),
    .din3(mux_case_31379_reload),
    .din4(mux_case_41482_reload),
    .din5(mux_case_51585_reload),
    .din6(mux_case_61688_reload),
    .din7(mux_case_71791_reload),
    .def(tmp_2_fu_1186_p17),
    .sel(trunc_ln81_fu_1101_p1),
    .dout(tmp_2_fu_1186_p19)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U990(
    .din0(mux_case_01894_reload),
    .din1(mux_case_11997_reload),
    .din2(mux_case_220100_reload),
    .din3(mux_case_321103_reload),
    .din4(mux_case_422106_reload),
    .din5(mux_case_523109_reload),
    .din6(mux_case_624112_reload),
    .din7(mux_case_725115_reload),
    .def(tmp_3_fu_1226_p17),
    .sel(trunc_ln81_fu_1101_p1),
    .dout(tmp_3_fu_1226_p19)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U991(
    .din0(mux_case_026118_reload),
    .din1(mux_case_127121_reload),
    .din2(mux_case_228124_reload),
    .din3(mux_case_329127_reload),
    .din4(mux_case_430130_reload),
    .din5(mux_case_531133_reload),
    .din6(mux_case_632136_reload),
    .din7(mux_case_733139_reload),
    .def(tmp_4_fu_1266_p17),
    .sel(trunc_ln81_fu_1101_p1),
    .dout(tmp_4_fu_1266_p19)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U992(
    .din0(mux_case_034142_reload),
    .din1(mux_case_135145_reload),
    .din2(mux_case_236148_reload),
    .din3(mux_case_337151_reload),
    .din4(mux_case_438154_reload),
    .din5(mux_case_539157_reload),
    .din6(mux_case_640160_reload),
    .din7(mux_case_741163_reload),
    .def(tmp_5_fu_1306_p17),
    .sel(trunc_ln81_fu_1101_p1),
    .dout(tmp_5_fu_1306_p19)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U993(
    .din0(mux_case_042166_reload),
    .din1(mux_case_143169_reload),
    .din2(mux_case_244172_reload),
    .din3(mux_case_345175_reload),
    .din4(mux_case_446178_reload),
    .din5(mux_case_547181_reload),
    .din6(mux_case_648184_reload),
    .din7(mux_case_749187_reload),
    .def(tmp_6_fu_1346_p17),
    .sel(trunc_ln81_fu_1101_p1),
    .dout(tmp_6_fu_1346_p19)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U994(
    .din0(mux_case_050190_reload),
    .din1(mux_case_151193_reload),
    .din2(mux_case_252196_reload),
    .din3(mux_case_353199_reload),
    .din4(mux_case_454202_reload),
    .din5(mux_case_555205_reload),
    .din6(mux_case_656208_reload),
    .din7(mux_case_757211_reload),
    .def(tmp_7_fu_1386_p17),
    .sel(trunc_ln81_fu_1101_p1),
    .dout(tmp_7_fu_1386_p19)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U995(
    .din0(mux_case_058214_reload),
    .din1(mux_case_159217_reload),
    .din2(mux_case_260220_reload),
    .din3(mux_case_361223_reload),
    .din4(mux_case_462226_reload),
    .din5(mux_case_563229_reload),
    .din6(mux_case_664232_reload),
    .din7(mux_case_765235_reload),
    .def(tmp_8_fu_1426_p17),
    .sel(trunc_ln81_fu_1101_p1),
    .dout(tmp_8_fu_1426_p19)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U996(
    .din0(mux_case_066238_reload),
    .din1(mux_case_167241_reload),
    .din2(mux_case_268244_reload),
    .din3(mux_case_369247_reload),
    .din4(mux_case_470250_reload),
    .din5(mux_case_571253_reload),
    .din6(mux_case_672256_reload),
    .din7(mux_case_773259_reload),
    .def(tmp_9_fu_1466_p17),
    .sel(trunc_ln81_fu_1101_p1),
    .dout(tmp_9_fu_1466_p19)
);

(* dissolve_hierarchy = "yes" *) accelerator_sparsemux_17_3_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 64 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 64 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 64 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 64 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 64 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 64 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 64 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 64 ),
    .def_WIDTH( 64 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 64 ))
sparsemux_17_3_64_1_1_U997(
    .din0(mux_case_01_fu_266),
    .din1(mux_case_12_fu_270),
    .din2(mux_case_23_fu_274),
    .din3(mux_case_34_fu_278),
    .din4(mux_case_45_fu_282),
    .din5(mux_case_56_fu_286),
    .din6(mux_case_67_fu_290),
    .din7(mux_case_78_fu_294),
    .def(tmp_fu_1530_p17),
    .sel(trunc_ln81_reg_1904),
    .dout(tmp_fu_1530_p19)
);

accelerator_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage49_subdone) & (1'b1 == ap_CS_fsm_pp0_stage49))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_911_fu_318 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_911_fu_318 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_913_fu_322 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd0) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_913_fu_322 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_915_fu_326 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd7) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_915_fu_326 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_91_fu_298 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd6) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_91_fu_298 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_93_fu_302 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_93_fu_302 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_95_fu_306 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd4) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_95_fu_306 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_97_fu_310 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd3) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_97_fu_310 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_i_99_fu_314 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd2) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_99_fu_314 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_18_fu_262 <= 4'd0;
    end else if (((icmp_ln81_reg_1895 == 1'd0) & (1'b0 == ap_block_pp0_stage49_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage49))) begin
        i_18_fu_262 <= i_21_reg_1899;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_01_fu_266 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd0) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_01_fu_266 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_12_fu_270 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_12_fu_270 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_23_fu_274 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd2) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_23_fu_274 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_34_fu_278 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd3) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_34_fu_278 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_45_fu_282 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd4) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_45_fu_282 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_56_fu_286 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_56_fu_286 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_67_fu_290 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd6) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_67_fu_290 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mux_case_78_fu_294 <= 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln81_reg_1904_pp0_iter1_reg == 3'd7) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_78_fu_294 <= grp_fu_2564_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_21_reg_1899 <= i_21_fu_1095_p2;
        icmp_ln81_reg_1895 <= icmp_ln81_fu_1089_p2;
        tmp_1_reg_1914 <= tmp_1_fu_1146_p19;
        tmp_2_reg_1919 <= tmp_2_fu_1186_p19;
        tmp_3_reg_1924 <= tmp_3_fu_1226_p19;
        tmp_4_reg_1929 <= tmp_4_fu_1266_p19;
        tmp_5_reg_1934 <= tmp_5_fu_1306_p19;
        tmp_6_reg_1939 <= tmp_6_fu_1346_p19;
        tmp_7_reg_1944 <= tmp_7_fu_1386_p19;
        tmp_8_reg_1949 <= tmp_8_fu_1426_p19;
        tmp_9_reg_1954 <= tmp_9_fu_1466_p19;
        trunc_ln81_reg_1904 <= trunc_ln81_fu_1101_p1;
        trunc_ln81_reg_1904_pp0_iter1_reg <= trunc_ln81_reg_1904;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mul_i_1_reg_1964 <= grp_fu_2568_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mul_i_2_reg_1969 <= grp_fu_2568_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        mul_i_3_reg_1974 <= grp_fu_2568_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        mul_i_4_reg_1979 <= grp_fu_2568_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        mul_i_6_reg_1984 <= grp_fu_2568_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        mul_i_7_reg_1989 <= grp_fu_2568_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        mul_i_8_reg_1994 <= grp_fu_2568_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        mul_i_9_reg_1999 <= grp_fu_2568_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        reg_991 <= grp_fu_2568_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage45_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage45)) | ((1'b0 == ap_block_pp0_stage40_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage40)) | ((1'b0 == ap_block_pp0_stage35_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage35)) | ((1'b0 == ap_block_pp0_stage30_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage30)) | ((1'b0 == ap_block_pp0_stage25_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage20_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)))) begin
        reg_996 <= grp_fu_2564_p_dout0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_911_out_ap_vld = 1'b1;
    end else begin
        add_i_911_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_913_out_ap_vld = 1'b1;
    end else begin
        add_i_913_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_915_out_ap_vld = 1'b1;
    end else begin
        add_i_915_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_91_out_ap_vld = 1'b1;
    end else begin
        add_i_91_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_93_out_ap_vld = 1'b1;
    end else begin
        add_i_93_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_95_out_ap_vld = 1'b1;
    end else begin
        add_i_95_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_97_out_ap_vld = 1'b1;
    end else begin
        add_i_97_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_i_99_out_ap_vld = 1'b1;
    end else begin
        add_i_99_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage49_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage49))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_18_fu_262;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage46) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage46)) | ((1'b0 == ap_block_pp0_stage41) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage41)) | ((1'b0 == ap_block_pp0_stage36) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36)) | ((1'b0 == ap_block_pp0_stage31) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage26) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26)) | ((1'b0 == ap_block_pp0_stage21) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
        grp_fu_982_p0 = reg_996;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_982_p0 = tmp_fu_1530_p19;
    end else begin
        grp_fu_982_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_982_p1 = mul_i_9_reg_1999;
    end else if (((1'b0 == ap_block_pp0_stage46) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage46))) begin
        grp_fu_982_p1 = mul_i_8_reg_1994;
    end else if (((1'b0 == ap_block_pp0_stage41) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage41))) begin
        grp_fu_982_p1 = mul_i_7_reg_1989;
    end else if (((1'b0 == ap_block_pp0_stage36) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36))) begin
        grp_fu_982_p1 = mul_i_6_reg_1984;
    end else if (((1'b0 == ap_block_pp0_stage26) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26))) begin
        grp_fu_982_p1 = mul_i_4_reg_1979;
    end else if (((1'b0 == ap_block_pp0_stage21) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21))) begin
        grp_fu_982_p1 = mul_i_3_reg_1974;
    end else if (((1'b0 == ap_block_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
        grp_fu_982_p1 = mul_i_2_reg_1969;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        grp_fu_982_p1 = mul_i_1_reg_1964;
    end else if ((((1'b0 == ap_block_pp0_stage31) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_982_p1 = reg_991;
    end else begin
        grp_fu_982_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            grp_fu_986_p0 = tmp_9_reg_1954;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            grp_fu_986_p0 = tmp_8_reg_1949;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            grp_fu_986_p0 = tmp_7_reg_1944;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_986_p0 = tmp_6_reg_1939;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_986_p0 = tmp_5_reg_1934;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_986_p0 = tmp_4_reg_1929;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_986_p0 = tmp_3_reg_1924;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_986_p0 = tmp_2_reg_1919;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_986_p0 = tmp_1_reg_1914;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_986_p0 = tmp_s_fu_1105_p19;
        end else begin
            grp_fu_986_p0 = 'bx;
        end
    end else begin
        grp_fu_986_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            grp_fu_986_p1 = p_read9;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            grp_fu_986_p1 = p_read8;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            grp_fu_986_p1 = p_read7;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_986_p1 = p_read6;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_986_p1 = p_read5;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_986_p1 = p_read4;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_986_p1 = p_read3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_986_p1 = p_read2;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_986_p1 = p_read1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_986_p1 = p_read;
        end else begin
            grp_fu_986_p1 = 'bx;
        end
    end else begin
        grp_fu_986_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_01_out_ap_vld = 1'b1;
    end else begin
        mux_case_01_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_12_out_ap_vld = 1'b1;
    end else begin
        mux_case_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_23_out_ap_vld = 1'b1;
    end else begin
        mux_case_23_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_34_out_ap_vld = 1'b1;
    end else begin
        mux_case_34_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_45_out_ap_vld = 1'b1;
    end else begin
        mux_case_45_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_56_out_ap_vld = 1'b1;
    end else begin
        mux_case_56_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_67_out_ap_vld = 1'b1;
    end else begin
        mux_case_67_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln81_reg_1895 == 1'd1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mux_case_78_out_ap_vld = 1'b1;
    end else begin
        mux_case_78_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((1'b0 == ap_block_pp0_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((1'b0 == ap_block_pp0_stage38_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((1'b0 == ap_block_pp0_stage39_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        ap_ST_fsm_pp0_stage40 : begin
            if ((1'b0 == ap_block_pp0_stage40_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end
        end
        ap_ST_fsm_pp0_stage41 : begin
            if ((1'b0 == ap_block_pp0_stage41_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end
        end
        ap_ST_fsm_pp0_stage42 : begin
            if ((1'b0 == ap_block_pp0_stage42_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end
        end
        ap_ST_fsm_pp0_stage43 : begin
            if ((1'b0 == ap_block_pp0_stage43_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end
        end
        ap_ST_fsm_pp0_stage44 : begin
            if ((1'b0 == ap_block_pp0_stage44_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end
        end
        ap_ST_fsm_pp0_stage45 : begin
            if ((1'b0 == ap_block_pp0_stage45_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end
        end
        ap_ST_fsm_pp0_stage46 : begin
            if ((1'b0 == ap_block_pp0_stage46_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end
        end
        ap_ST_fsm_pp0_stage47 : begin
            if ((1'b0 == ap_block_pp0_stage47_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end
        end
        ap_ST_fsm_pp0_stage48 : begin
            if ((1'b0 == ap_block_pp0_stage48_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end
        end
        ap_ST_fsm_pp0_stage49 : begin
            if ((1'b0 == ap_block_pp0_stage49_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i_911_out = add_i_911_fu_318;

assign add_i_913_out = add_i_913_fu_322;

assign add_i_915_out = add_i_915_fu_326;

assign add_i_91_out = add_i_91_fu_298;

assign add_i_93_out = add_i_93_fu_302;

assign add_i_95_out = add_i_95_fu_306;

assign add_i_97_out = add_i_97_fu_310;

assign add_i_99_out = add_i_99_fu_314;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage25 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage30 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage35 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp0_stage36 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage40 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp0_stage41 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp0_stage45 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp0_stage46 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp0_stage49 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign ap_ready = ap_ready_sig;

assign grp_fu_2564_p_ce = 1'b1;

assign grp_fu_2564_p_din0 = grp_fu_982_p0;

assign grp_fu_2564_p_din1 = grp_fu_982_p1;

assign grp_fu_2564_p_opcode = 2'd0;

assign grp_fu_2568_p_ce = 1'b1;

assign grp_fu_2568_p_din0 = grp_fu_986_p0;

assign grp_fu_2568_p_din1 = grp_fu_986_p1;

assign i_21_fu_1095_p2 = (ap_sig_allocacmp_i + 4'd1);

assign icmp_ln81_fu_1089_p2 = ((ap_sig_allocacmp_i == 4'd8) ? 1'b1 : 1'b0);

assign mux_case_01_out = mux_case_01_fu_266;

assign mux_case_12_out = mux_case_12_fu_270;

assign mux_case_23_out = mux_case_23_fu_274;

assign mux_case_34_out = mux_case_34_fu_278;

assign mux_case_45_out = mux_case_45_fu_282;

assign mux_case_56_out = mux_case_56_fu_286;

assign mux_case_67_out = mux_case_67_fu_290;

assign mux_case_78_out = mux_case_78_fu_294;

assign tmp_1_fu_1146_p17 = 'bx;

assign tmp_2_fu_1186_p17 = 'bx;

assign tmp_3_fu_1226_p17 = 'bx;

assign tmp_4_fu_1266_p17 = 'bx;

assign tmp_5_fu_1306_p17 = 'bx;

assign tmp_6_fu_1346_p17 = 'bx;

assign tmp_7_fu_1386_p17 = 'bx;

assign tmp_8_fu_1426_p17 = 'bx;

assign tmp_9_fu_1466_p17 = 'bx;

assign tmp_fu_1530_p17 = 'bx;

assign tmp_s_fu_1105_p17 = 'bx;

assign trunc_ln81_fu_1101_p1 = ap_sig_allocacmp_i[2:0];

endmodule //accelerator_backProp_8_8_10_Pipeline_VITIS_LOOP_81_1
