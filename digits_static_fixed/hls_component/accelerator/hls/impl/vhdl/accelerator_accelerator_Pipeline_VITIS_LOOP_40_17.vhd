-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity accelerator_accelerator_Pipeline_VITIS_LOOP_40_17 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_ref_0_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_1_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_2_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_3_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_4_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_5_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_6_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_7_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_8_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_9_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_10_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_11_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_12_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_13_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_14_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_15_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_16_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_17_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_18_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_19_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_20_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_21_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_22_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_23_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_24_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_25_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_26_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_27_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_28_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_29_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_30_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_31_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_32_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_33_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_34_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_35_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_36_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_37_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_38_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_39_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_40_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_41_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_42_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_43_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_44_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_45_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_46_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_47_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_48_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_49_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_50_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_51_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_52_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_53_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_54_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_55_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_56_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_57_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_58_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_59_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_60_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_61_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_62_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_ref_0_63_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_T_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_T_0_ce0 : OUT STD_LOGIC;
    input_T_0_we0 : OUT STD_LOGIC;
    input_T_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of accelerator_accelerator_Pipeline_VITIS_LOOP_40_17 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln40_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln40_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_52_fu_290 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal i_38_fu_705_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (6 downto 0);
    signal input_T_0_we0_local : STD_LOGIC;
    signal tmp_s_fu_720_p131 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_T_0_ce0_local : STD_LOGIC;
    signal tmp_s_fu_720_p129 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_720_p130 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_s_fu_720_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p11 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p13 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p15 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p17 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p19 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p21 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p23 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p25 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p27 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p29 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p31 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p33 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p35 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p37 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p39 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p41 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p43 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p45 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p47 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p49 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p51 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p53 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p55 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p57 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p59 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p61 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p63 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p67 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p69 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p71 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p73 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p75 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p77 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p79 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p81 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p83 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p85 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p87 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p89 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p91 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p93 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p95 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p97 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p99 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p101 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p103 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p105 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p107 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p109 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p111 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p113 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p115 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p117 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p119 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p121 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p123 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p125 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_720_p127 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component accelerator_sparsemux_129_6_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (5 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (5 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (5 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (5 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (5 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (5 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (5 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (5 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (5 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (5 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (5 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (5 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (5 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (5 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (5 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (5 downto 0);
        din15_WIDTH : INTEGER;
        CASE16 : STD_LOGIC_VECTOR (5 downto 0);
        din16_WIDTH : INTEGER;
        CASE17 : STD_LOGIC_VECTOR (5 downto 0);
        din17_WIDTH : INTEGER;
        CASE18 : STD_LOGIC_VECTOR (5 downto 0);
        din18_WIDTH : INTEGER;
        CASE19 : STD_LOGIC_VECTOR (5 downto 0);
        din19_WIDTH : INTEGER;
        CASE20 : STD_LOGIC_VECTOR (5 downto 0);
        din20_WIDTH : INTEGER;
        CASE21 : STD_LOGIC_VECTOR (5 downto 0);
        din21_WIDTH : INTEGER;
        CASE22 : STD_LOGIC_VECTOR (5 downto 0);
        din22_WIDTH : INTEGER;
        CASE23 : STD_LOGIC_VECTOR (5 downto 0);
        din23_WIDTH : INTEGER;
        CASE24 : STD_LOGIC_VECTOR (5 downto 0);
        din24_WIDTH : INTEGER;
        CASE25 : STD_LOGIC_VECTOR (5 downto 0);
        din25_WIDTH : INTEGER;
        CASE26 : STD_LOGIC_VECTOR (5 downto 0);
        din26_WIDTH : INTEGER;
        CASE27 : STD_LOGIC_VECTOR (5 downto 0);
        din27_WIDTH : INTEGER;
        CASE28 : STD_LOGIC_VECTOR (5 downto 0);
        din28_WIDTH : INTEGER;
        CASE29 : STD_LOGIC_VECTOR (5 downto 0);
        din29_WIDTH : INTEGER;
        CASE30 : STD_LOGIC_VECTOR (5 downto 0);
        din30_WIDTH : INTEGER;
        CASE31 : STD_LOGIC_VECTOR (5 downto 0);
        din31_WIDTH : INTEGER;
        CASE32 : STD_LOGIC_VECTOR (5 downto 0);
        din32_WIDTH : INTEGER;
        CASE33 : STD_LOGIC_VECTOR (5 downto 0);
        din33_WIDTH : INTEGER;
        CASE34 : STD_LOGIC_VECTOR (5 downto 0);
        din34_WIDTH : INTEGER;
        CASE35 : STD_LOGIC_VECTOR (5 downto 0);
        din35_WIDTH : INTEGER;
        CASE36 : STD_LOGIC_VECTOR (5 downto 0);
        din36_WIDTH : INTEGER;
        CASE37 : STD_LOGIC_VECTOR (5 downto 0);
        din37_WIDTH : INTEGER;
        CASE38 : STD_LOGIC_VECTOR (5 downto 0);
        din38_WIDTH : INTEGER;
        CASE39 : STD_LOGIC_VECTOR (5 downto 0);
        din39_WIDTH : INTEGER;
        CASE40 : STD_LOGIC_VECTOR (5 downto 0);
        din40_WIDTH : INTEGER;
        CASE41 : STD_LOGIC_VECTOR (5 downto 0);
        din41_WIDTH : INTEGER;
        CASE42 : STD_LOGIC_VECTOR (5 downto 0);
        din42_WIDTH : INTEGER;
        CASE43 : STD_LOGIC_VECTOR (5 downto 0);
        din43_WIDTH : INTEGER;
        CASE44 : STD_LOGIC_VECTOR (5 downto 0);
        din44_WIDTH : INTEGER;
        CASE45 : STD_LOGIC_VECTOR (5 downto 0);
        din45_WIDTH : INTEGER;
        CASE46 : STD_LOGIC_VECTOR (5 downto 0);
        din46_WIDTH : INTEGER;
        CASE47 : STD_LOGIC_VECTOR (5 downto 0);
        din47_WIDTH : INTEGER;
        CASE48 : STD_LOGIC_VECTOR (5 downto 0);
        din48_WIDTH : INTEGER;
        CASE49 : STD_LOGIC_VECTOR (5 downto 0);
        din49_WIDTH : INTEGER;
        CASE50 : STD_LOGIC_VECTOR (5 downto 0);
        din50_WIDTH : INTEGER;
        CASE51 : STD_LOGIC_VECTOR (5 downto 0);
        din51_WIDTH : INTEGER;
        CASE52 : STD_LOGIC_VECTOR (5 downto 0);
        din52_WIDTH : INTEGER;
        CASE53 : STD_LOGIC_VECTOR (5 downto 0);
        din53_WIDTH : INTEGER;
        CASE54 : STD_LOGIC_VECTOR (5 downto 0);
        din54_WIDTH : INTEGER;
        CASE55 : STD_LOGIC_VECTOR (5 downto 0);
        din55_WIDTH : INTEGER;
        CASE56 : STD_LOGIC_VECTOR (5 downto 0);
        din56_WIDTH : INTEGER;
        CASE57 : STD_LOGIC_VECTOR (5 downto 0);
        din57_WIDTH : INTEGER;
        CASE58 : STD_LOGIC_VECTOR (5 downto 0);
        din58_WIDTH : INTEGER;
        CASE59 : STD_LOGIC_VECTOR (5 downto 0);
        din59_WIDTH : INTEGER;
        CASE60 : STD_LOGIC_VECTOR (5 downto 0);
        din60_WIDTH : INTEGER;
        CASE61 : STD_LOGIC_VECTOR (5 downto 0);
        din61_WIDTH : INTEGER;
        CASE62 : STD_LOGIC_VECTOR (5 downto 0);
        din62_WIDTH : INTEGER;
        CASE63 : STD_LOGIC_VECTOR (5 downto 0);
        din63_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (63 downto 0);
        din17 : IN STD_LOGIC_VECTOR (63 downto 0);
        din18 : IN STD_LOGIC_VECTOR (63 downto 0);
        din19 : IN STD_LOGIC_VECTOR (63 downto 0);
        din20 : IN STD_LOGIC_VECTOR (63 downto 0);
        din21 : IN STD_LOGIC_VECTOR (63 downto 0);
        din22 : IN STD_LOGIC_VECTOR (63 downto 0);
        din23 : IN STD_LOGIC_VECTOR (63 downto 0);
        din24 : IN STD_LOGIC_VECTOR (63 downto 0);
        din25 : IN STD_LOGIC_VECTOR (63 downto 0);
        din26 : IN STD_LOGIC_VECTOR (63 downto 0);
        din27 : IN STD_LOGIC_VECTOR (63 downto 0);
        din28 : IN STD_LOGIC_VECTOR (63 downto 0);
        din29 : IN STD_LOGIC_VECTOR (63 downto 0);
        din30 : IN STD_LOGIC_VECTOR (63 downto 0);
        din31 : IN STD_LOGIC_VECTOR (63 downto 0);
        din32 : IN STD_LOGIC_VECTOR (63 downto 0);
        din33 : IN STD_LOGIC_VECTOR (63 downto 0);
        din34 : IN STD_LOGIC_VECTOR (63 downto 0);
        din35 : IN STD_LOGIC_VECTOR (63 downto 0);
        din36 : IN STD_LOGIC_VECTOR (63 downto 0);
        din37 : IN STD_LOGIC_VECTOR (63 downto 0);
        din38 : IN STD_LOGIC_VECTOR (63 downto 0);
        din39 : IN STD_LOGIC_VECTOR (63 downto 0);
        din40 : IN STD_LOGIC_VECTOR (63 downto 0);
        din41 : IN STD_LOGIC_VECTOR (63 downto 0);
        din42 : IN STD_LOGIC_VECTOR (63 downto 0);
        din43 : IN STD_LOGIC_VECTOR (63 downto 0);
        din44 : IN STD_LOGIC_VECTOR (63 downto 0);
        din45 : IN STD_LOGIC_VECTOR (63 downto 0);
        din46 : IN STD_LOGIC_VECTOR (63 downto 0);
        din47 : IN STD_LOGIC_VECTOR (63 downto 0);
        din48 : IN STD_LOGIC_VECTOR (63 downto 0);
        din49 : IN STD_LOGIC_VECTOR (63 downto 0);
        din50 : IN STD_LOGIC_VECTOR (63 downto 0);
        din51 : IN STD_LOGIC_VECTOR (63 downto 0);
        din52 : IN STD_LOGIC_VECTOR (63 downto 0);
        din53 : IN STD_LOGIC_VECTOR (63 downto 0);
        din54 : IN STD_LOGIC_VECTOR (63 downto 0);
        din55 : IN STD_LOGIC_VECTOR (63 downto 0);
        din56 : IN STD_LOGIC_VECTOR (63 downto 0);
        din57 : IN STD_LOGIC_VECTOR (63 downto 0);
        din58 : IN STD_LOGIC_VECTOR (63 downto 0);
        din59 : IN STD_LOGIC_VECTOR (63 downto 0);
        din60 : IN STD_LOGIC_VECTOR (63 downto 0);
        din61 : IN STD_LOGIC_VECTOR (63 downto 0);
        din62 : IN STD_LOGIC_VECTOR (63 downto 0);
        din63 : IN STD_LOGIC_VECTOR (63 downto 0);
        def : IN STD_LOGIC_VECTOR (63 downto 0);
        sel : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component accelerator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_129_6_64_1_1_U3847 : component accelerator_sparsemux_129_6_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000000",
        din0_WIDTH => 64,
        CASE1 => "000001",
        din1_WIDTH => 64,
        CASE2 => "000010",
        din2_WIDTH => 64,
        CASE3 => "000011",
        din3_WIDTH => 64,
        CASE4 => "000100",
        din4_WIDTH => 64,
        CASE5 => "000101",
        din5_WIDTH => 64,
        CASE6 => "000110",
        din6_WIDTH => 64,
        CASE7 => "000111",
        din7_WIDTH => 64,
        CASE8 => "001000",
        din8_WIDTH => 64,
        CASE9 => "001001",
        din9_WIDTH => 64,
        CASE10 => "001010",
        din10_WIDTH => 64,
        CASE11 => "001011",
        din11_WIDTH => 64,
        CASE12 => "001100",
        din12_WIDTH => 64,
        CASE13 => "001101",
        din13_WIDTH => 64,
        CASE14 => "001110",
        din14_WIDTH => 64,
        CASE15 => "001111",
        din15_WIDTH => 64,
        CASE16 => "010000",
        din16_WIDTH => 64,
        CASE17 => "010001",
        din17_WIDTH => 64,
        CASE18 => "010010",
        din18_WIDTH => 64,
        CASE19 => "010011",
        din19_WIDTH => 64,
        CASE20 => "010100",
        din20_WIDTH => 64,
        CASE21 => "010101",
        din21_WIDTH => 64,
        CASE22 => "010110",
        din22_WIDTH => 64,
        CASE23 => "010111",
        din23_WIDTH => 64,
        CASE24 => "011000",
        din24_WIDTH => 64,
        CASE25 => "011001",
        din25_WIDTH => 64,
        CASE26 => "011010",
        din26_WIDTH => 64,
        CASE27 => "011011",
        din27_WIDTH => 64,
        CASE28 => "011100",
        din28_WIDTH => 64,
        CASE29 => "011101",
        din29_WIDTH => 64,
        CASE30 => "011110",
        din30_WIDTH => 64,
        CASE31 => "011111",
        din31_WIDTH => 64,
        CASE32 => "100000",
        din32_WIDTH => 64,
        CASE33 => "100001",
        din33_WIDTH => 64,
        CASE34 => "100010",
        din34_WIDTH => 64,
        CASE35 => "100011",
        din35_WIDTH => 64,
        CASE36 => "100100",
        din36_WIDTH => 64,
        CASE37 => "100101",
        din37_WIDTH => 64,
        CASE38 => "100110",
        din38_WIDTH => 64,
        CASE39 => "100111",
        din39_WIDTH => 64,
        CASE40 => "101000",
        din40_WIDTH => 64,
        CASE41 => "101001",
        din41_WIDTH => 64,
        CASE42 => "101010",
        din42_WIDTH => 64,
        CASE43 => "101011",
        din43_WIDTH => 64,
        CASE44 => "101100",
        din44_WIDTH => 64,
        CASE45 => "101101",
        din45_WIDTH => 64,
        CASE46 => "101110",
        din46_WIDTH => 64,
        CASE47 => "101111",
        din47_WIDTH => 64,
        CASE48 => "110000",
        din48_WIDTH => 64,
        CASE49 => "110001",
        din49_WIDTH => 64,
        CASE50 => "110010",
        din50_WIDTH => 64,
        CASE51 => "110011",
        din51_WIDTH => 64,
        CASE52 => "110100",
        din52_WIDTH => 64,
        CASE53 => "110101",
        din53_WIDTH => 64,
        CASE54 => "110110",
        din54_WIDTH => 64,
        CASE55 => "110111",
        din55_WIDTH => 64,
        CASE56 => "111000",
        din56_WIDTH => 64,
        CASE57 => "111001",
        din57_WIDTH => 64,
        CASE58 => "111010",
        din58_WIDTH => 64,
        CASE59 => "111011",
        din59_WIDTH => 64,
        CASE60 => "111100",
        din60_WIDTH => 64,
        CASE61 => "111101",
        din61_WIDTH => 64,
        CASE62 => "111110",
        din62_WIDTH => 64,
        CASE63 => "111111",
        din63_WIDTH => 64,
        def_WIDTH => 64,
        sel_WIDTH => 6,
        dout_WIDTH => 64)
    port map (
        din0 => input_ref_0_load_1,
        din1 => input_ref_0_1_load_1,
        din2 => input_ref_0_2_load_1,
        din3 => input_ref_0_3_load_1,
        din4 => input_ref_0_4_load_1,
        din5 => input_ref_0_5_load_1,
        din6 => input_ref_0_6_load_1,
        din7 => input_ref_0_7_load_1,
        din8 => input_ref_0_8_load_1,
        din9 => input_ref_0_9_load_1,
        din10 => input_ref_0_10_load_1,
        din11 => input_ref_0_11_load_1,
        din12 => input_ref_0_12_load_1,
        din13 => input_ref_0_13_load_1,
        din14 => input_ref_0_14_load_1,
        din15 => input_ref_0_15_load_1,
        din16 => input_ref_0_16_load_1,
        din17 => input_ref_0_17_load_1,
        din18 => input_ref_0_18_load_1,
        din19 => input_ref_0_19_load_1,
        din20 => input_ref_0_20_load_1,
        din21 => input_ref_0_21_load_1,
        din22 => input_ref_0_22_load_1,
        din23 => input_ref_0_23_load_1,
        din24 => input_ref_0_24_load_1,
        din25 => input_ref_0_25_load_1,
        din26 => input_ref_0_26_load_1,
        din27 => input_ref_0_27_load_1,
        din28 => input_ref_0_28_load_1,
        din29 => input_ref_0_29_load_1,
        din30 => input_ref_0_30_load_1,
        din31 => input_ref_0_31_load_1,
        din32 => input_ref_0_32_load_1,
        din33 => input_ref_0_33_load_1,
        din34 => input_ref_0_34_load_1,
        din35 => input_ref_0_35_load_1,
        din36 => input_ref_0_36_load_1,
        din37 => input_ref_0_37_load_1,
        din38 => input_ref_0_38_load_1,
        din39 => input_ref_0_39_load_1,
        din40 => input_ref_0_40_load_1,
        din41 => input_ref_0_41_load_1,
        din42 => input_ref_0_42_load_1,
        din43 => input_ref_0_43_load_1,
        din44 => input_ref_0_44_load_1,
        din45 => input_ref_0_45_load_1,
        din46 => input_ref_0_46_load_1,
        din47 => input_ref_0_47_load_1,
        din48 => input_ref_0_48_load_1,
        din49 => input_ref_0_49_load_1,
        din50 => input_ref_0_50_load_1,
        din51 => input_ref_0_51_load_1,
        din52 => input_ref_0_52_load_1,
        din53 => input_ref_0_53_load_1,
        din54 => input_ref_0_54_load_1,
        din55 => input_ref_0_55_load_1,
        din56 => input_ref_0_56_load_1,
        din57 => input_ref_0_57_load_1,
        din58 => input_ref_0_58_load_1,
        din59 => input_ref_0_59_load_1,
        din60 => input_ref_0_60_load_1,
        din61 => input_ref_0_61_load_1,
        din62 => input_ref_0_62_load_1,
        din63 => input_ref_0_63_load_1,
        def => tmp_s_fu_720_p129,
        sel => tmp_s_fu_720_p130,
        dout => tmp_s_fu_720_p131);

    flow_control_loop_pipe_sequential_init_U : component accelerator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_52_fu_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln40_fu_699_p2 = ap_const_lv1_0)) then 
                    i_52_fu_290 <= i_38_fu_705_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_52_fu_290 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_699_p2)
    begin
        if (((icmp_ln40_fu_699_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, i_52_fu_290, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i <= i_52_fu_290;
        end if; 
    end process;

    i_38_fu_705_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv7_1));
    icmp_ln40_fu_699_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv7_40) else "0";
    input_T_0_address0 <= zext_ln40_fu_711_p1(6 - 1 downto 0);
    input_T_0_ce0 <= input_T_0_ce0_local;

    input_T_0_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_T_0_ce0_local <= ap_const_logic_1;
        else 
            input_T_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_T_0_d0 <= tmp_s_fu_720_p131;
    input_T_0_we0 <= input_T_0_we0_local;

    input_T_0_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_699_p2)
    begin
        if (((icmp_ln40_fu_699_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_T_0_we0_local <= ap_const_logic_1;
        else 
            input_T_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_720_p129 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_s_fu_720_p130 <= ap_sig_allocacmp_i(6 - 1 downto 0);
    zext_ln40_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
end behav;
