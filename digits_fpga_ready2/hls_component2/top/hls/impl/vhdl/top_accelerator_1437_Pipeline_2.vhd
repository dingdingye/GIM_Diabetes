-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_accelerator_1437_Pipeline_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_result_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln139 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_first_assign_6 : IN STD_LOGIC_VECTOR (5 downto 0);
    result_l3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    result_l3_ce0 : OUT STD_LOGIC;
    result_l3_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    result_l3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    result_l3_ce1 : OUT STD_LOGIC;
    result_l3_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    add_ln871_out : OUT STD_LOGIC_VECTOR (5 downto 0);
    add_ln871_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of top_accelerator_1437_Pipeline_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln880_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln880_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln871_fu_153_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln871_reg_225 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln43_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_240 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal xor_ln880_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx172_reg_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_2_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_116_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal UnifiedRetVal_reg_112 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln43_2_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_l3_ce1_local : STD_LOGIC;
    signal result_l3_ce0_local : STD_LOGIC;
    signal shl_ln5_fu_127_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln871_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln871_2_fu_143_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln871_2_fu_139_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_fu_158_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln43_2_fu_173_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv2_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_116_p6;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_240 = ap_const_lv1_1) and (icmp_ln880_reg_221 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                UnifiedRetVal_reg_112 <= ap_const_lv2_2;
            elsif (((icmp_ln43_reg_240 = ap_const_lv1_0) and (icmp_ln880_reg_221 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                UnifiedRetVal_reg_112 <= ap_const_lv2_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                UnifiedRetVal_reg_112 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    idx172_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_2_fu_194_p2 = ap_const_lv1_0) and (icmp_ln43_fu_188_p2 = ap_const_lv1_0) and (icmp_ln880_reg_221 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx172_reg_100 <= xor_ln880_fu_200_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx172_reg_100 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln871_reg_225 <= add_ln871_fu_153_p2;
                icmp_ln880_reg_221 <= icmp_ln880_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln43_reg_240 <= icmp_ln43_fu_188_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln880_reg_221, icmp_ln43_fu_188_p2, ap_CS_fsm_state3, icmp_ln43_2_fu_194_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln43_2_fu_194_p2 = ap_const_lv1_0) and (icmp_ln43_fu_188_p2 = ap_const_lv1_0) and (icmp_ln880_reg_221 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln880_reg_221 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln871_2_fu_143_p2 <= std_logic_vector(unsigned(zext_ln871_fu_135_p1) + unsigned(p_result_5));
    add_ln871_fu_153_p2 <= std_logic_vector(unsigned(zext_ln871_2_fu_139_p1) + unsigned(p_first_assign_6));
    add_ln871_out <= add_ln871_reg_225;

    add_ln871_out_ap_vld_assign_proc : process(icmp_ln880_reg_221, icmp_ln43_reg_240, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln43_reg_240 = ap_const_lv1_1) and (icmp_ln880_reg_221 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln43_reg_240 = ap_const_lv1_0) and (icmp_ln880_reg_221 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            add_ln871_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln871_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_116_p6_assign_proc : process(icmp_ln880_reg_221, icmp_ln43_reg_240, UnifiedRetVal_reg_112, ap_CS_fsm_state4)
    begin
        if (((icmp_ln880_reg_221 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((icmp_ln43_reg_240 = ap_const_lv1_1)) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_116_p6 <= ap_const_lv2_2;
            elsif ((icmp_ln43_reg_240 = ap_const_lv1_0)) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_116_p6 <= ap_const_lv2_1;
            else 
                ap_phi_mux_UnifiedRetVal_phi_fu_116_p6 <= UnifiedRetVal_reg_112;
            end if;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_116_p6 <= UnifiedRetVal_reg_112;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_116_p6, ap_CS_fsm_state4, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_116_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    icmp_ln43_2_fu_194_p2 <= "1" when (signed(result_l3_q0) < signed(result_l3_q1)) else "0";
    icmp_ln43_fu_188_p2 <= "1" when (signed(result_l3_q1) < signed(result_l3_q0)) else "0";
    icmp_ln880_fu_148_p2 <= "1" when (add_ln871_2_fu_143_p2 = add_ln139) else "0";
    lshr_ln43_2_fu_173_p4 <= add_ln871_fu_153_p2(5 downto 2);
    lshr_ln_fu_158_p4 <= add_ln871_2_fu_143_p2(5 downto 2);
    result_l3_address0 <= zext_ln43_fu_183_p1(4 - 1 downto 0);
    result_l3_address1 <= zext_ln43_2_fu_168_p1(4 - 1 downto 0);
    result_l3_ce0 <= result_l3_ce0_local;

    result_l3_ce0_local_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_l3_ce0_local <= ap_const_logic_1;
        else 
            result_l3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    result_l3_ce1 <= result_l3_ce1_local;

    result_l3_ce1_local_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_l3_ce1_local <= ap_const_logic_1;
        else 
            result_l3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln5_fu_127_p3 <= (idx172_reg_100 & ap_const_lv2_0);
    xor_ln880_fu_200_p2 <= (idx172_reg_100 xor ap_const_lv1_1);
    zext_ln43_2_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_158_p4),64));
    zext_ln43_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln43_2_fu_173_p4),64));
    zext_ln871_2_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_127_p3),6));
    zext_ln871_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_127_p3),64));
end behav;
