-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_updateWeightBias_8_4_Pipeline_VITIS_LOOP_235_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    biases_0_i : IN STD_LOGIC_VECTOR (24 downto 0);
    biases_0_o : OUT STD_LOGIC_VECTOR (24 downto 0);
    biases_0_o_ap_vld : OUT STD_LOGIC;
    biases_3_i : IN STD_LOGIC_VECTOR (24 downto 0);
    biases_3_o : OUT STD_LOGIC_VECTOR (24 downto 0);
    biases_3_o_ap_vld : OUT STD_LOGIC;
    biases_2_i : IN STD_LOGIC_VECTOR (24 downto 0);
    biases_2_o : OUT STD_LOGIC_VECTOR (24 downto 0);
    biases_2_o_ap_vld : OUT STD_LOGIC;
    biases_1_i : IN STD_LOGIC_VECTOR (24 downto 0);
    biases_1_o : OUT STD_LOGIC_VECTOR (24 downto 0);
    biases_1_o_ap_vld : OUT STD_LOGIC;
    weights_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_7_ce0 : OUT STD_LOGIC;
    weights_7_we0 : OUT STD_LOGIC;
    weights_7_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_7_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_7_ce1 : OUT STD_LOGIC;
    weights_7_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_6_ce0 : OUT STD_LOGIC;
    weights_6_we0 : OUT STD_LOGIC;
    weights_6_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_6_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_6_ce1 : OUT STD_LOGIC;
    weights_6_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_5_ce0 : OUT STD_LOGIC;
    weights_5_we0 : OUT STD_LOGIC;
    weights_5_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_5_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_5_ce1 : OUT STD_LOGIC;
    weights_5_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_4_ce0 : OUT STD_LOGIC;
    weights_4_we0 : OUT STD_LOGIC;
    weights_4_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_4_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_4_ce1 : OUT STD_LOGIC;
    weights_4_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_3_ce0 : OUT STD_LOGIC;
    weights_3_we0 : OUT STD_LOGIC;
    weights_3_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_3_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_3_ce1 : OUT STD_LOGIC;
    weights_3_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_2_ce0 : OUT STD_LOGIC;
    weights_2_we0 : OUT STD_LOGIC;
    weights_2_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_2_ce1 : OUT STD_LOGIC;
    weights_2_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_1_ce0 : OUT STD_LOGIC;
    weights_1_we0 : OUT STD_LOGIC;
    weights_1_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_1_ce1 : OUT STD_LOGIC;
    weights_1_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_0_ce0 : OUT STD_LOGIC;
    weights_0_we0 : OUT STD_LOGIC;
    weights_0_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    weights_0_ce1 : OUT STD_LOGIC;
    weights_0_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_ce0 : OUT STD_LOGIC;
    update_temp_mat_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_8_ce0 : OUT STD_LOGIC;
    update_temp_mat_8_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_9_ce0 : OUT STD_LOGIC;
    update_temp_mat_9_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_10_ce0 : OUT STD_LOGIC;
    update_temp_mat_10_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_11_ce0 : OUT STD_LOGIC;
    update_temp_mat_11_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_12_ce0 : OUT STD_LOGIC;
    update_temp_mat_12_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_13_ce0 : OUT STD_LOGIC;
    update_temp_mat_13_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_14_ce0 : OUT STD_LOGIC;
    update_temp_mat_14_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of top_updateWeightBias_8_4_Pipeline_VITIS_LOOP_235_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv34_83 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln235_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln235_fu_456_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln235_reg_805 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln235_reg_805_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln235_reg_805_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_0_addr_reg_814 : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_0_addr_reg_814_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_0_addr_reg_814_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_0_addr_reg_814_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_1_addr_reg_825 : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_1_addr_reg_825_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_1_addr_reg_825_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_1_addr_reg_825_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_2_addr_reg_836 : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_2_addr_reg_836_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_2_addr_reg_836_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_2_addr_reg_836_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_3_addr_reg_847 : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_3_addr_reg_847_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_3_addr_reg_847_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_3_addr_reg_847_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_4_addr_reg_858 : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_4_addr_reg_858_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_4_addr_reg_858_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_4_addr_reg_858_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_5_addr_reg_869 : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_5_addr_reg_869_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_5_addr_reg_869_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_5_addr_reg_869_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_6_addr_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_6_addr_reg_880_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_6_addr_reg_880_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_6_addr_reg_880_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_7_addr_reg_891 : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_7_addr_reg_891_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_7_addr_reg_891_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal weights_7_addr_reg_891_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_488_p11 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_2_reg_902 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_2_reg_902_pp0_iter1_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln235_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_4_fu_104 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln235_fu_430_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal update_temp_mat_ce0_local : STD_LOGIC;
    signal update_temp_mat_8_ce0_local : STD_LOGIC;
    signal update_temp_mat_9_ce0_local : STD_LOGIC;
    signal update_temp_mat_10_ce0_local : STD_LOGIC;
    signal update_temp_mat_11_ce0_local : STD_LOGIC;
    signal update_temp_mat_12_ce0_local : STD_LOGIC;
    signal update_temp_mat_13_ce0_local : STD_LOGIC;
    signal update_temp_mat_14_ce0_local : STD_LOGIC;
    signal weights_0_ce1_local : STD_LOGIC;
    signal weights_0_we0_local : STD_LOGIC;
    signal weights_0_ce0_local : STD_LOGIC;
    signal weights_1_ce1_local : STD_LOGIC;
    signal weights_1_we0_local : STD_LOGIC;
    signal weights_1_ce0_local : STD_LOGIC;
    signal weights_2_ce1_local : STD_LOGIC;
    signal weights_2_we0_local : STD_LOGIC;
    signal weights_2_ce0_local : STD_LOGIC;
    signal weights_3_ce1_local : STD_LOGIC;
    signal weights_3_we0_local : STD_LOGIC;
    signal weights_3_ce0_local : STD_LOGIC;
    signal weights_4_ce1_local : STD_LOGIC;
    signal weights_4_we0_local : STD_LOGIC;
    signal weights_4_ce0_local : STD_LOGIC;
    signal weights_5_ce1_local : STD_LOGIC;
    signal weights_5_we0_local : STD_LOGIC;
    signal weights_5_ce0_local : STD_LOGIC;
    signal weights_6_ce1_local : STD_LOGIC;
    signal weights_6_we0_local : STD_LOGIC;
    signal weights_6_ce0_local : STD_LOGIC;
    signal weights_7_ce1_local : STD_LOGIC;
    signal weights_7_we0_local : STD_LOGIC;
    signal weights_7_ce0_local : STD_LOGIC;
    signal tmp_1_fu_460_p9 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_fu_460_p11 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_2_fu_488_p9 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_713_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_722_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_731_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_740_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_749_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_758_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_767_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_776_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_785_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_713_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_713_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_722_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_722_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_731_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_731_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_740_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_740_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_749_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_749_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_758_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_758_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_767_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_767_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_776_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_776_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_785_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_785_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_1_fu_460_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_460_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_460_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_460_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_488_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_488_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_488_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_488_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_sparsemux_9_2_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        din3 : IN STD_LOGIC_VECTOR (24 downto 0);
        def : IN STD_LOGIC_VECTOR (24 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component top_mac_mulsub_25s_8ns_42s_42_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_25_1_1_U810 : component top_sparsemux_9_2_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 25,
        CASE1 => "01",
        din1_WIDTH => 25,
        CASE2 => "10",
        din2_WIDTH => 25,
        CASE3 => "11",
        din3_WIDTH => 25,
        def_WIDTH => 25,
        sel_WIDTH => 2,
        dout_WIDTH => 25)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        def => tmp_1_fu_460_p9,
        sel => trunc_ln235_fu_456_p1,
        dout => tmp_1_fu_460_p11);

    sparsemux_9_2_25_1_1_U811 : component top_sparsemux_9_2_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 25,
        CASE1 => "01",
        din1_WIDTH => 25,
        CASE2 => "10",
        din2_WIDTH => 25,
        CASE3 => "11",
        din3_WIDTH => 25,
        def_WIDTH => 25,
        sel_WIDTH => 2,
        dout_WIDTH => 25)
    port map (
        din0 => biases_0_i,
        din1 => biases_1_i,
        din2 => biases_2_i,
        din3 => biases_3_i,
        def => tmp_2_fu_488_p9,
        sel => trunc_ln235_fu_456_p1,
        dout => tmp_2_fu_488_p11);

    mac_mulsub_25s_8ns_42s_42_4_1_U812 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_fu_460_p11,
        din1 => grp_fu_713_p1,
        din2 => grp_fu_713_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_713_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U813 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_q0,
        din1 => grp_fu_722_p1,
        din2 => grp_fu_722_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_722_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U814 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_8_q0,
        din1 => grp_fu_731_p1,
        din2 => grp_fu_731_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_731_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U815 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_9_q0,
        din1 => grp_fu_740_p1,
        din2 => grp_fu_740_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_740_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U816 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_10_q0,
        din1 => grp_fu_749_p1,
        din2 => grp_fu_749_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_749_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U817 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_11_q0,
        din1 => grp_fu_758_p1,
        din2 => grp_fu_758_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_758_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U818 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_12_q0,
        din1 => grp_fu_767_p1,
        din2 => grp_fu_767_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_767_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U819 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_13_q0,
        din1 => grp_fu_776_p1,
        din2 => grp_fu_776_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_776_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U820 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_14_q0,
        din1 => grp_fu_785_p1,
        din2 => grp_fu_785_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_785_p3);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_4_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln235_fu_424_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_4_fu_104 <= add_ln235_fu_430_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_4_fu_104 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                tmp_2_reg_902 <= tmp_2_fu_488_p11;
                tmp_2_reg_902_pp0_iter1_reg <= tmp_2_reg_902;
                trunc_ln235_reg_805 <= trunc_ln235_fu_456_p1;
                trunc_ln235_reg_805_pp0_iter1_reg <= trunc_ln235_reg_805;
                weights_0_addr_reg_814 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
                weights_0_addr_reg_814_pp0_iter1_reg <= weights_0_addr_reg_814;
                weights_1_addr_reg_825 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
                weights_1_addr_reg_825_pp0_iter1_reg <= weights_1_addr_reg_825;
                weights_2_addr_reg_836 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
                weights_2_addr_reg_836_pp0_iter1_reg <= weights_2_addr_reg_836;
                weights_3_addr_reg_847 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
                weights_3_addr_reg_847_pp0_iter1_reg <= weights_3_addr_reg_847;
                weights_4_addr_reg_858 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
                weights_4_addr_reg_858_pp0_iter1_reg <= weights_4_addr_reg_858;
                weights_5_addr_reg_869 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
                weights_5_addr_reg_869_pp0_iter1_reg <= weights_5_addr_reg_869;
                weights_6_addr_reg_880 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
                weights_6_addr_reg_880_pp0_iter1_reg <= weights_6_addr_reg_880;
                weights_7_addr_reg_891 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
                weights_7_addr_reg_891_pp0_iter1_reg <= weights_7_addr_reg_891;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                trunc_ln235_reg_805_pp0_iter2_reg <= trunc_ln235_reg_805_pp0_iter1_reg;
                weights_0_addr_reg_814_pp0_iter2_reg <= weights_0_addr_reg_814_pp0_iter1_reg;
                weights_0_addr_reg_814_pp0_iter3_reg <= weights_0_addr_reg_814_pp0_iter2_reg;
                weights_1_addr_reg_825_pp0_iter2_reg <= weights_1_addr_reg_825_pp0_iter1_reg;
                weights_1_addr_reg_825_pp0_iter3_reg <= weights_1_addr_reg_825_pp0_iter2_reg;
                weights_2_addr_reg_836_pp0_iter2_reg <= weights_2_addr_reg_836_pp0_iter1_reg;
                weights_2_addr_reg_836_pp0_iter3_reg <= weights_2_addr_reg_836_pp0_iter2_reg;
                weights_3_addr_reg_847_pp0_iter2_reg <= weights_3_addr_reg_847_pp0_iter1_reg;
                weights_3_addr_reg_847_pp0_iter3_reg <= weights_3_addr_reg_847_pp0_iter2_reg;
                weights_4_addr_reg_858_pp0_iter2_reg <= weights_4_addr_reg_858_pp0_iter1_reg;
                weights_4_addr_reg_858_pp0_iter3_reg <= weights_4_addr_reg_858_pp0_iter2_reg;
                weights_5_addr_reg_869_pp0_iter2_reg <= weights_5_addr_reg_869_pp0_iter1_reg;
                weights_5_addr_reg_869_pp0_iter3_reg <= weights_5_addr_reg_869_pp0_iter2_reg;
                weights_6_addr_reg_880_pp0_iter2_reg <= weights_6_addr_reg_880_pp0_iter1_reg;
                weights_6_addr_reg_880_pp0_iter3_reg <= weights_6_addr_reg_880_pp0_iter2_reg;
                weights_7_addr_reg_891_pp0_iter2_reg <= weights_7_addr_reg_891_pp0_iter1_reg;
                weights_7_addr_reg_891_pp0_iter3_reg <= weights_7_addr_reg_891_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln235_fu_430_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln235_fu_424_p2)
    begin
        if (((icmp_ln235_fu_424_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_4_fu_104, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_4_fu_104;
        end if; 
    end process;


    biases_0_o_assign_proc : process(ap_enable_reg_pp0_iter3, biases_0_i, trunc_ln235_reg_805_pp0_iter2_reg, ap_block_pp0_stage0_01001, grp_fu_713_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln235_reg_805_pp0_iter2_reg = ap_const_lv2_0))) then 
            biases_0_o <= grp_fu_713_p3(41 downto 17);
        else 
            biases_0_o <= biases_0_i;
        end if; 
    end process;


    biases_0_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln235_reg_805_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln235_reg_805_pp0_iter2_reg = ap_const_lv2_0))) then 
            biases_0_o_ap_vld <= ap_const_logic_1;
        else 
            biases_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    biases_1_o_assign_proc : process(ap_enable_reg_pp0_iter3, biases_1_i, trunc_ln235_reg_805_pp0_iter2_reg, ap_block_pp0_stage0_01001, grp_fu_713_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln235_reg_805_pp0_iter2_reg = ap_const_lv2_1))) then 
            biases_1_o <= grp_fu_713_p3(41 downto 17);
        else 
            biases_1_o <= biases_1_i;
        end if; 
    end process;


    biases_1_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln235_reg_805_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln235_reg_805_pp0_iter2_reg = ap_const_lv2_1))) then 
            biases_1_o_ap_vld <= ap_const_logic_1;
        else 
            biases_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    biases_2_o_assign_proc : process(ap_enable_reg_pp0_iter3, biases_2_i, trunc_ln235_reg_805_pp0_iter2_reg, ap_block_pp0_stage0_01001, grp_fu_713_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln235_reg_805_pp0_iter2_reg = ap_const_lv2_2))) then 
            biases_2_o <= grp_fu_713_p3(41 downto 17);
        else 
            biases_2_o <= biases_2_i;
        end if; 
    end process;


    biases_2_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln235_reg_805_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln235_reg_805_pp0_iter2_reg = ap_const_lv2_2))) then 
            biases_2_o_ap_vld <= ap_const_logic_1;
        else 
            biases_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    biases_3_o_assign_proc : process(ap_enable_reg_pp0_iter3, biases_3_i, trunc_ln235_reg_805_pp0_iter2_reg, ap_block_pp0_stage0_01001, grp_fu_713_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln235_reg_805_pp0_iter2_reg = ap_const_lv2_3))) then 
            biases_3_o <= grp_fu_713_p3(41 downto 17);
        else 
            biases_3_o <= biases_3_i;
        end if; 
    end process;


    biases_3_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln235_reg_805_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln235_reg_805_pp0_iter2_reg = ap_const_lv2_3))) then 
            biases_3_o_ap_vld <= ap_const_logic_1;
        else 
            biases_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_713_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_713_p2 <= (tmp_2_reg_902_pp0_iter1_reg & ap_const_lv17_0);
    grp_fu_722_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_722_p2 <= (weights_0_q1 & ap_const_lv17_0);
    grp_fu_731_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_731_p2 <= (weights_1_q1 & ap_const_lv17_0);
    grp_fu_740_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_740_p2 <= (weights_2_q1 & ap_const_lv17_0);
    grp_fu_749_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_749_p2 <= (weights_3_q1 & ap_const_lv17_0);
    grp_fu_758_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_758_p2 <= (weights_4_q1 & ap_const_lv17_0);
    grp_fu_767_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_767_p2 <= (weights_5_q1 & ap_const_lv17_0);
    grp_fu_776_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_776_p2 <= (weights_6_q1 & ap_const_lv17_0);
    grp_fu_785_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_785_p2 <= (weights_7_q1 & ap_const_lv17_0);
    icmp_ln235_fu_424_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_4) else "0";
    tmp_1_fu_460_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_2_fu_488_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln235_fu_456_p1 <= ap_sig_allocacmp_i(2 - 1 downto 0);
    update_temp_mat_10_address0 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
    update_temp_mat_10_ce0 <= update_temp_mat_10_ce0_local;

    update_temp_mat_10_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_10_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_11_address0 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
    update_temp_mat_11_ce0 <= update_temp_mat_11_ce0_local;

    update_temp_mat_11_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_11_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_12_address0 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
    update_temp_mat_12_ce0 <= update_temp_mat_12_ce0_local;

    update_temp_mat_12_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_12_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_13_address0 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
    update_temp_mat_13_ce0 <= update_temp_mat_13_ce0_local;

    update_temp_mat_13_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_13_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_14_address0 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
    update_temp_mat_14_ce0 <= update_temp_mat_14_ce0_local;

    update_temp_mat_14_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_14_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_8_address0 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
    update_temp_mat_8_ce0 <= update_temp_mat_8_ce0_local;

    update_temp_mat_8_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_8_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_9_address0 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
    update_temp_mat_9_ce0 <= update_temp_mat_9_ce0_local;

    update_temp_mat_9_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_9_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_address0 <= zext_ln235_fu_436_p1(2 - 1 downto 0);
    update_temp_mat_ce0 <= update_temp_mat_ce0_local;

    update_temp_mat_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_0_address0 <= weights_0_addr_reg_814_pp0_iter3_reg;
    weights_0_address1 <= weights_0_addr_reg_814_pp0_iter1_reg;
    weights_0_ce0 <= weights_0_ce0_local;

    weights_0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_0_ce0_local <= ap_const_logic_1;
        else 
            weights_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_0_ce1 <= weights_0_ce1_local;

    weights_0_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_0_ce1_local <= ap_const_logic_1;
        else 
            weights_0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_0_d0 <= grp_fu_722_p3(41 downto 17);
    weights_0_we0 <= weights_0_we0_local;

    weights_0_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_0_we0_local <= ap_const_logic_1;
        else 
            weights_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_address0 <= weights_1_addr_reg_825_pp0_iter3_reg;
    weights_1_address1 <= weights_1_addr_reg_825_pp0_iter1_reg;
    weights_1_ce0 <= weights_1_ce0_local;

    weights_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_1_ce0_local <= ap_const_logic_1;
        else 
            weights_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_ce1 <= weights_1_ce1_local;

    weights_1_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_1_ce1_local <= ap_const_logic_1;
        else 
            weights_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_d0 <= grp_fu_731_p3(41 downto 17);
    weights_1_we0 <= weights_1_we0_local;

    weights_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_1_we0_local <= ap_const_logic_1;
        else 
            weights_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_2_address0 <= weights_2_addr_reg_836_pp0_iter3_reg;
    weights_2_address1 <= weights_2_addr_reg_836_pp0_iter1_reg;
    weights_2_ce0 <= weights_2_ce0_local;

    weights_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_2_ce0_local <= ap_const_logic_1;
        else 
            weights_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_2_ce1 <= weights_2_ce1_local;

    weights_2_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_2_ce1_local <= ap_const_logic_1;
        else 
            weights_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_2_d0 <= grp_fu_740_p3(41 downto 17);
    weights_2_we0 <= weights_2_we0_local;

    weights_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_2_we0_local <= ap_const_logic_1;
        else 
            weights_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_3_address0 <= weights_3_addr_reg_847_pp0_iter3_reg;
    weights_3_address1 <= weights_3_addr_reg_847_pp0_iter1_reg;
    weights_3_ce0 <= weights_3_ce0_local;

    weights_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_3_ce0_local <= ap_const_logic_1;
        else 
            weights_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_3_ce1 <= weights_3_ce1_local;

    weights_3_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_3_ce1_local <= ap_const_logic_1;
        else 
            weights_3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_3_d0 <= grp_fu_749_p3(41 downto 17);
    weights_3_we0 <= weights_3_we0_local;

    weights_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_3_we0_local <= ap_const_logic_1;
        else 
            weights_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_4_address0 <= weights_4_addr_reg_858_pp0_iter3_reg;
    weights_4_address1 <= weights_4_addr_reg_858_pp0_iter1_reg;
    weights_4_ce0 <= weights_4_ce0_local;

    weights_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_4_ce0_local <= ap_const_logic_1;
        else 
            weights_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_4_ce1 <= weights_4_ce1_local;

    weights_4_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_4_ce1_local <= ap_const_logic_1;
        else 
            weights_4_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_4_d0 <= grp_fu_758_p3(41 downto 17);
    weights_4_we0 <= weights_4_we0_local;

    weights_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_4_we0_local <= ap_const_logic_1;
        else 
            weights_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_5_address0 <= weights_5_addr_reg_869_pp0_iter3_reg;
    weights_5_address1 <= weights_5_addr_reg_869_pp0_iter1_reg;
    weights_5_ce0 <= weights_5_ce0_local;

    weights_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_5_ce0_local <= ap_const_logic_1;
        else 
            weights_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_5_ce1 <= weights_5_ce1_local;

    weights_5_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_5_ce1_local <= ap_const_logic_1;
        else 
            weights_5_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_5_d0 <= grp_fu_767_p3(41 downto 17);
    weights_5_we0 <= weights_5_we0_local;

    weights_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_5_we0_local <= ap_const_logic_1;
        else 
            weights_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_6_address0 <= weights_6_addr_reg_880_pp0_iter3_reg;
    weights_6_address1 <= weights_6_addr_reg_880_pp0_iter1_reg;
    weights_6_ce0 <= weights_6_ce0_local;

    weights_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_6_ce0_local <= ap_const_logic_1;
        else 
            weights_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_6_ce1 <= weights_6_ce1_local;

    weights_6_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_6_ce1_local <= ap_const_logic_1;
        else 
            weights_6_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_6_d0 <= grp_fu_776_p3(41 downto 17);
    weights_6_we0 <= weights_6_we0_local;

    weights_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_6_we0_local <= ap_const_logic_1;
        else 
            weights_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_7_address0 <= weights_7_addr_reg_891_pp0_iter3_reg;
    weights_7_address1 <= weights_7_addr_reg_891_pp0_iter1_reg;
    weights_7_ce0 <= weights_7_ce0_local;

    weights_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_7_ce0_local <= ap_const_logic_1;
        else 
            weights_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_7_ce1 <= weights_7_ce1_local;

    weights_7_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_7_ce1_local <= ap_const_logic_1;
        else 
            weights_7_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_7_d0 <= grp_fu_785_p3(41 downto 17);
    weights_7_we0 <= weights_7_we0_local;

    weights_7_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_7_we0_local <= ap_const_logic_1;
        else 
            weights_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln235_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
end behav;
