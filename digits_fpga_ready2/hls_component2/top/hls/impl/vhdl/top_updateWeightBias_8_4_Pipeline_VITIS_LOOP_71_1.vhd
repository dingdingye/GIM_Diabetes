-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_updateWeightBias_8_4_Pipeline_VITIS_LOOP_71_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    update_temp_mat_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_14_ce0 : OUT STD_LOGIC;
    update_temp_mat_14_we0 : OUT STD_LOGIC;
    update_temp_mat_14_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_13_ce0 : OUT STD_LOGIC;
    update_temp_mat_13_we0 : OUT STD_LOGIC;
    update_temp_mat_13_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_12_ce0 : OUT STD_LOGIC;
    update_temp_mat_12_we0 : OUT STD_LOGIC;
    update_temp_mat_12_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_11_ce0 : OUT STD_LOGIC;
    update_temp_mat_11_we0 : OUT STD_LOGIC;
    update_temp_mat_11_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_10_ce0 : OUT STD_LOGIC;
    update_temp_mat_10_we0 : OUT STD_LOGIC;
    update_temp_mat_10_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_9_ce0 : OUT STD_LOGIC;
    update_temp_mat_9_we0 : OUT STD_LOGIC;
    update_temp_mat_9_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_8_ce0 : OUT STD_LOGIC;
    update_temp_mat_8_we0 : OUT STD_LOGIC;
    update_temp_mat_8_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    update_temp_mat_ce0 : OUT STD_LOGIC;
    update_temp_mat_we0 : OUT STD_LOGIC;
    update_temp_mat_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    p_read : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (24 downto 0);
    conv7_i_i : IN STD_LOGIC_VECTOR (24 downto 0);
    conv7_i_i_1 : IN STD_LOGIC_VECTOR (24 downto 0);
    conv7_i_i_2 : IN STD_LOGIC_VECTOR (24 downto 0);
    conv7_i_i_3 : IN STD_LOGIC_VECTOR (24 downto 0);
    conv7_i_i_4 : IN STD_LOGIC_VECTOR (24 downto 0);
    conv7_i_i_5 : IN STD_LOGIC_VECTOR (24 downto 0);
    conv7_i_i_6 : IN STD_LOGIC_VECTOR (24 downto 0);
    conv7_i_i_7 : IN STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of top_updateWeightBias_8_4_Pipeline_VITIS_LOOP_71_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln71_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln71_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_104 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal i_2_fu_370_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal update_temp_mat_we0_local : STD_LOGIC;
    signal update_temp_mat_ce0_local : STD_LOGIC;
    signal update_temp_mat_8_we0_local : STD_LOGIC;
    signal update_temp_mat_8_ce0_local : STD_LOGIC;
    signal update_temp_mat_9_we0_local : STD_LOGIC;
    signal update_temp_mat_9_ce0_local : STD_LOGIC;
    signal update_temp_mat_10_we0_local : STD_LOGIC;
    signal update_temp_mat_10_ce0_local : STD_LOGIC;
    signal update_temp_mat_11_we0_local : STD_LOGIC;
    signal update_temp_mat_11_ce0_local : STD_LOGIC;
    signal update_temp_mat_12_we0_local : STD_LOGIC;
    signal update_temp_mat_12_ce0_local : STD_LOGIC;
    signal update_temp_mat_13_we0_local : STD_LOGIC;
    signal update_temp_mat_13_ce0_local : STD_LOGIC;
    signal update_temp_mat_14_we0_local : STD_LOGIC;
    signal update_temp_mat_14_ce0_local : STD_LOGIC;
    signal mul_ln79_fu_284_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal conv_i_i_fu_416_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln79_1_fu_288_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln79_2_fu_292_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln79_3_fu_296_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln79_4_fu_300_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln79_5_fu_304_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln79_6_fu_308_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln79_7_fu_312_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_392_p9 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_392_p10 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_392_p11 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln79_fu_284_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln79_1_fu_288_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln79_2_fu_292_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln79_3_fu_296_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln79_4_fu_300_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln79_5_fu_304_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln79_6_fu_308_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln79_7_fu_312_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_392_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_392_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_392_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_392_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_25s_25s_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component top_sparsemux_9_2_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        din3 : IN STD_LOGIC_VECTOR (24 downto 0);
        def : IN STD_LOGIC_VECTOR (24 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_25s_25s_50_1_1_U781 : component top_mul_25s_25s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => mul_ln79_fu_284_p0,
        din1 => conv7_i_i,
        dout => mul_ln79_fu_284_p2);

    mul_25s_25s_50_1_1_U782 : component top_mul_25s_25s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => mul_ln79_1_fu_288_p0,
        din1 => conv7_i_i_1,
        dout => mul_ln79_1_fu_288_p2);

    mul_25s_25s_50_1_1_U783 : component top_mul_25s_25s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => mul_ln79_2_fu_292_p0,
        din1 => conv7_i_i_2,
        dout => mul_ln79_2_fu_292_p2);

    mul_25s_25s_50_1_1_U784 : component top_mul_25s_25s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => mul_ln79_3_fu_296_p0,
        din1 => conv7_i_i_3,
        dout => mul_ln79_3_fu_296_p2);

    mul_25s_25s_50_1_1_U785 : component top_mul_25s_25s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => mul_ln79_4_fu_300_p0,
        din1 => conv7_i_i_4,
        dout => mul_ln79_4_fu_300_p2);

    mul_25s_25s_50_1_1_U786 : component top_mul_25s_25s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => mul_ln79_5_fu_304_p0,
        din1 => conv7_i_i_5,
        dout => mul_ln79_5_fu_304_p2);

    mul_25s_25s_50_1_1_U787 : component top_mul_25s_25s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => mul_ln79_6_fu_308_p0,
        din1 => conv7_i_i_6,
        dout => mul_ln79_6_fu_308_p2);

    mul_25s_25s_50_1_1_U788 : component top_mul_25s_25s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => mul_ln79_7_fu_312_p0,
        din1 => conv7_i_i_7,
        dout => mul_ln79_7_fu_312_p2);

    sparsemux_9_2_25_1_1_U789 : component top_sparsemux_9_2_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 25,
        CASE1 => "01",
        din1_WIDTH => 25,
        CASE2 => "10",
        din2_WIDTH => 25,
        CASE3 => "11",
        din3_WIDTH => 25,
        def_WIDTH => 25,
        sel_WIDTH => 2,
        dout_WIDTH => 25)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        def => tmp_fu_392_p9,
        sel => tmp_fu_392_p10,
        dout => tmp_fu_392_p11);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln71_fu_364_p2 = ap_const_lv1_0)) then 
                    i_fu_104 <= i_2_fu_370_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_104 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_364_p2)
    begin
        if (((icmp_ln71_fu_364_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, i_fu_104, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_104;
        end if; 
    end process;

        conv_i_i_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_392_p11),50));

    i_2_fu_370_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    icmp_ln71_fu_364_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv3_4) else "0";
    mul_ln79_1_fu_288_p0 <= conv_i_i_fu_416_p1(25 - 1 downto 0);
    mul_ln79_2_fu_292_p0 <= conv_i_i_fu_416_p1(25 - 1 downto 0);
    mul_ln79_3_fu_296_p0 <= conv_i_i_fu_416_p1(25 - 1 downto 0);
    mul_ln79_4_fu_300_p0 <= conv_i_i_fu_416_p1(25 - 1 downto 0);
    mul_ln79_5_fu_304_p0 <= conv_i_i_fu_416_p1(25 - 1 downto 0);
    mul_ln79_6_fu_308_p0 <= conv_i_i_fu_416_p1(25 - 1 downto 0);
    mul_ln79_7_fu_312_p0 <= conv_i_i_fu_416_p1(25 - 1 downto 0);
    mul_ln79_fu_284_p0 <= conv_i_i_fu_416_p1(25 - 1 downto 0);
    tmp_fu_392_p10 <= ap_sig_allocacmp_i_1(2 - 1 downto 0);
    tmp_fu_392_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
    update_temp_mat_10_address0 <= zext_ln71_fu_376_p1(2 - 1 downto 0);
    update_temp_mat_10_ce0 <= update_temp_mat_10_ce0_local;

    update_temp_mat_10_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_10_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_10_d0 <= mul_ln79_3_fu_296_p2(41 downto 17);
    update_temp_mat_10_we0 <= update_temp_mat_10_we0_local;

    update_temp_mat_10_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_364_p2)
    begin
        if (((icmp_ln71_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_10_we0_local <= ap_const_logic_1;
        else 
            update_temp_mat_10_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_11_address0 <= zext_ln71_fu_376_p1(2 - 1 downto 0);
    update_temp_mat_11_ce0 <= update_temp_mat_11_ce0_local;

    update_temp_mat_11_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_11_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_11_d0 <= mul_ln79_4_fu_300_p2(41 downto 17);
    update_temp_mat_11_we0 <= update_temp_mat_11_we0_local;

    update_temp_mat_11_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_364_p2)
    begin
        if (((icmp_ln71_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_11_we0_local <= ap_const_logic_1;
        else 
            update_temp_mat_11_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_12_address0 <= zext_ln71_fu_376_p1(2 - 1 downto 0);
    update_temp_mat_12_ce0 <= update_temp_mat_12_ce0_local;

    update_temp_mat_12_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_12_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_12_d0 <= mul_ln79_5_fu_304_p2(41 downto 17);
    update_temp_mat_12_we0 <= update_temp_mat_12_we0_local;

    update_temp_mat_12_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_364_p2)
    begin
        if (((icmp_ln71_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_12_we0_local <= ap_const_logic_1;
        else 
            update_temp_mat_12_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_13_address0 <= zext_ln71_fu_376_p1(2 - 1 downto 0);
    update_temp_mat_13_ce0 <= update_temp_mat_13_ce0_local;

    update_temp_mat_13_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_13_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_13_d0 <= mul_ln79_6_fu_308_p2(41 downto 17);
    update_temp_mat_13_we0 <= update_temp_mat_13_we0_local;

    update_temp_mat_13_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_364_p2)
    begin
        if (((icmp_ln71_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_13_we0_local <= ap_const_logic_1;
        else 
            update_temp_mat_13_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_14_address0 <= zext_ln71_fu_376_p1(2 - 1 downto 0);
    update_temp_mat_14_ce0 <= update_temp_mat_14_ce0_local;

    update_temp_mat_14_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_14_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_14_d0 <= mul_ln79_7_fu_312_p2(41 downto 17);
    update_temp_mat_14_we0 <= update_temp_mat_14_we0_local;

    update_temp_mat_14_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_364_p2)
    begin
        if (((icmp_ln71_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_14_we0_local <= ap_const_logic_1;
        else 
            update_temp_mat_14_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_8_address0 <= zext_ln71_fu_376_p1(2 - 1 downto 0);
    update_temp_mat_8_ce0 <= update_temp_mat_8_ce0_local;

    update_temp_mat_8_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_8_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_8_d0 <= mul_ln79_1_fu_288_p2(41 downto 17);
    update_temp_mat_8_we0 <= update_temp_mat_8_we0_local;

    update_temp_mat_8_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_364_p2)
    begin
        if (((icmp_ln71_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_8_we0_local <= ap_const_logic_1;
        else 
            update_temp_mat_8_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_9_address0 <= zext_ln71_fu_376_p1(2 - 1 downto 0);
    update_temp_mat_9_ce0 <= update_temp_mat_9_ce0_local;

    update_temp_mat_9_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_9_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_9_d0 <= mul_ln79_2_fu_292_p2(41 downto 17);
    update_temp_mat_9_we0 <= update_temp_mat_9_we0_local;

    update_temp_mat_9_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_364_p2)
    begin
        if (((icmp_ln71_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_9_we0_local <= ap_const_logic_1;
        else 
            update_temp_mat_9_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_address0 <= zext_ln71_fu_376_p1(2 - 1 downto 0);
    update_temp_mat_ce0 <= update_temp_mat_ce0_local;

    update_temp_mat_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_d0 <= mul_ln79_fu_284_p2(41 downto 17);
    update_temp_mat_we0 <= update_temp_mat_we0_local;

    update_temp_mat_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_364_p2)
    begin
        if (((icmp_ln71_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            update_temp_mat_we0_local <= ap_const_logic_1;
        else 
            update_temp_mat_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln71_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
end behav;
