// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_matmul_10ul_1ul_4ul_Pipeline_VITIS_LOOP_71_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        agg_result_3_address0,
        agg_result_3_ce0,
        agg_result_3_we0,
        agg_result_3_d0,
        agg_result_2_address0,
        agg_result_2_ce0,
        agg_result_2_we0,
        agg_result_2_d0,
        agg_result_1_address0,
        agg_result_1_ce0,
        agg_result_1_we0,
        agg_result_1_d0,
        agg_result_0_address0,
        agg_result_0_ce0,
        agg_result_0_we0,
        agg_result_0_d0,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        conv7_i,
        conv7_i_1,
        conv7_i_2,
        conv7_i_3
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] agg_result_3_address0;
output   agg_result_3_ce0;
output   agg_result_3_we0;
output  [24:0] agg_result_3_d0;
output  [3:0] agg_result_2_address0;
output   agg_result_2_ce0;
output   agg_result_2_we0;
output  [24:0] agg_result_2_d0;
output  [3:0] agg_result_1_address0;
output   agg_result_1_ce0;
output   agg_result_1_we0;
output  [24:0] agg_result_1_d0;
output  [3:0] agg_result_0_address0;
output   agg_result_0_ce0;
output   agg_result_0_we0;
output  [24:0] agg_result_0_d0;
output  [3:0] A_0_address0;
output   A_0_ce0;
input  [24:0] A_0_q0;
input  [24:0] conv7_i;
input  [24:0] conv7_i_1;
input  [24:0] conv7_i_2;
input  [24:0] conv7_i_3;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln71_fu_203_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [49:0] conv7_i_3_cast_fu_179_p1;
reg  signed [49:0] conv7_i_3_cast_reg_284;
wire    ap_block_pp0_stage0_11001;
wire  signed [49:0] conv7_i_2_cast_fu_183_p1;
reg  signed [49:0] conv7_i_2_cast_reg_289;
wire  signed [49:0] conv7_i_1_cast_fu_187_p1;
reg  signed [49:0] conv7_i_1_cast_reg_294;
wire  signed [49:0] conv7_i_cast_fu_191_p1;
reg  signed [49:0] conv7_i_cast_reg_299;
wire   [63:0] zext_ln71_fu_215_p1;
reg   [63:0] zext_ln71_reg_307;
wire    ap_block_pp0_stage0;
reg   [3:0] i_04_fu_70;
wire   [3:0] i_12_fu_209_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
reg    A_0_ce0_local;
reg    agg_result_0_we0_local;
reg    agg_result_0_ce0_local;
reg    agg_result_1_we0_local;
reg    agg_result_1_ce0_local;
reg    agg_result_2_we0_local;
reg    agg_result_2_ce0_local;
reg    agg_result_3_we0_local;
reg    agg_result_3_ce0_local;
wire  signed [24:0] mul_ln79_fu_163_p0;
wire  signed [49:0] conv_i_fu_225_p1;
wire  signed [24:0] mul_ln79_fu_163_p1;
wire  signed [24:0] mul_ln79_71_fu_167_p0;
wire  signed [24:0] mul_ln79_71_fu_167_p1;
wire  signed [24:0] mul_ln79_72_fu_171_p0;
wire  signed [24:0] mul_ln79_72_fu_171_p1;
wire  signed [24:0] mul_ln79_73_fu_175_p0;
wire  signed [24:0] mul_ln79_73_fu_175_p1;
wire   [49:0] mul_ln79_fu_163_p2;
wire   [49:0] mul_ln79_71_fu_167_p2;
wire   [49:0] mul_ln79_72_fu_171_p2;
wire   [49:0] mul_ln79_73_fu_175_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_04_fu_70 = 4'd0;
#0 ap_done_reg = 1'b0;
end

top_mul_25s_25s_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25s_25s_50_1_1_U734(
    .din0(mul_ln79_fu_163_p0),
    .din1(mul_ln79_fu_163_p1),
    .dout(mul_ln79_fu_163_p2)
);

top_mul_25s_25s_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25s_25s_50_1_1_U735(
    .din0(mul_ln79_71_fu_167_p0),
    .din1(mul_ln79_71_fu_167_p1),
    .dout(mul_ln79_71_fu_167_p2)
);

top_mul_25s_25s_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25s_25s_50_1_1_U736(
    .din0(mul_ln79_72_fu_171_p0),
    .din1(mul_ln79_72_fu_171_p1),
    .dout(mul_ln79_72_fu_171_p2)
);

top_mul_25s_25s_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25s_25s_50_1_1_U737(
    .din0(mul_ln79_73_fu_175_p0),
    .din1(mul_ln79_73_fu_175_p1),
    .dout(mul_ln79_73_fu_175_p2)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln71_fu_203_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_04_fu_70 <= i_12_fu_209_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_04_fu_70 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv7_i_1_cast_reg_294 <= conv7_i_1_cast_fu_187_p1;
        conv7_i_2_cast_reg_289 <= conv7_i_2_cast_fu_183_p1;
        conv7_i_3_cast_reg_284 <= conv7_i_3_cast_fu_179_p1;
        conv7_i_cast_reg_299 <= conv7_i_cast_fu_191_p1;
        zext_ln71_reg_307[3 : 0] <= zext_ln71_fu_215_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_0_ce0_local = 1'b1;
    end else begin
        A_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_0_ce0_local = 1'b1;
    end else begin
        agg_result_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_0_we0_local = 1'b1;
    end else begin
        agg_result_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_1_ce0_local = 1'b1;
    end else begin
        agg_result_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_1_we0_local = 1'b1;
    end else begin
        agg_result_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_2_ce0_local = 1'b1;
    end else begin
        agg_result_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_2_we0_local = 1'b1;
    end else begin
        agg_result_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_3_ce0_local = 1'b1;
    end else begin
        agg_result_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        agg_result_3_we0_local = 1'b1;
    end else begin
        agg_result_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_203_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_04_fu_70;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_address0 = zext_ln71_fu_215_p1;

assign A_0_ce0 = A_0_ce0_local;

assign agg_result_0_address0 = zext_ln71_reg_307;

assign agg_result_0_ce0 = agg_result_0_ce0_local;

assign agg_result_0_d0 = {{mul_ln79_fu_163_p2[41:17]}};

assign agg_result_0_we0 = agg_result_0_we0_local;

assign agg_result_1_address0 = zext_ln71_reg_307;

assign agg_result_1_ce0 = agg_result_1_ce0_local;

assign agg_result_1_d0 = {{mul_ln79_71_fu_167_p2[41:17]}};

assign agg_result_1_we0 = agg_result_1_we0_local;

assign agg_result_2_address0 = zext_ln71_reg_307;

assign agg_result_2_ce0 = agg_result_2_ce0_local;

assign agg_result_2_d0 = {{mul_ln79_72_fu_171_p2[41:17]}};

assign agg_result_2_we0 = agg_result_2_we0_local;

assign agg_result_3_address0 = zext_ln71_reg_307;

assign agg_result_3_ce0 = agg_result_3_ce0_local;

assign agg_result_3_d0 = {{mul_ln79_73_fu_175_p2[41:17]}};

assign agg_result_3_we0 = agg_result_3_we0_local;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign conv7_i_1_cast_fu_187_p1 = $signed(conv7_i_1);

assign conv7_i_2_cast_fu_183_p1 = $signed(conv7_i_2);

assign conv7_i_3_cast_fu_179_p1 = $signed(conv7_i_3);

assign conv7_i_cast_fu_191_p1 = $signed(conv7_i);

assign conv_i_fu_225_p1 = $signed(A_0_q0);

assign i_12_fu_209_p2 = (ap_sig_allocacmp_i + 4'd1);

assign icmp_ln71_fu_203_p2 = ((ap_sig_allocacmp_i == 4'd10) ? 1'b1 : 1'b0);

assign mul_ln79_71_fu_167_p0 = conv_i_fu_225_p1;

assign mul_ln79_71_fu_167_p1 = conv7_i_1_cast_reg_294;

assign mul_ln79_72_fu_171_p0 = conv_i_fu_225_p1;

assign mul_ln79_72_fu_171_p1 = conv7_i_2_cast_reg_289;

assign mul_ln79_73_fu_175_p0 = conv_i_fu_225_p1;

assign mul_ln79_73_fu_175_p1 = conv7_i_3_cast_reg_284;

assign mul_ln79_fu_163_p0 = conv_i_fu_225_p1;

assign mul_ln79_fu_163_p1 = conv7_i_cast_reg_299;

assign zext_ln71_fu_215_p1 = ap_sig_allocacmp_i;

always @ (posedge ap_clk) begin
    zext_ln71_reg_307[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //top_matmul_10ul_1ul_4ul_Pipeline_VITIS_LOOP_71_1
