// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_updateWeightBias_8_4_Pipeline_VITIS_LOOP_44_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        transposed_0_15_out,
        transposed_0_15_out_ap_vld,
        transposed_0_14_out,
        transposed_0_14_out_ap_vld,
        transposed_0_13_out,
        transposed_0_13_out_ap_vld,
        transposed_0_12_out,
        transposed_0_12_out_ap_vld,
        transposed_0_11_out,
        transposed_0_11_out_ap_vld,
        transposed_0_10_out,
        transposed_0_10_out_ap_vld,
        transposed_0_9_out,
        transposed_0_9_out_ap_vld,
        transposed_0_8_out,
        transposed_0_8_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] input_0_address0;
output   input_0_ce0;
input  [23:0] input_0_q0;
output  [24:0] transposed_0_15_out;
output   transposed_0_15_out_ap_vld;
output  [24:0] transposed_0_14_out;
output   transposed_0_14_out_ap_vld;
output  [24:0] transposed_0_13_out;
output   transposed_0_13_out_ap_vld;
output  [24:0] transposed_0_12_out;
output   transposed_0_12_out_ap_vld;
output  [24:0] transposed_0_11_out;
output   transposed_0_11_out_ap_vld;
output  [24:0] transposed_0_10_out;
output   transposed_0_10_out_ap_vld;
output  [24:0] transposed_0_9_out;
output   transposed_0_9_out_ap_vld;
output  [24:0] transposed_0_8_out;
output   transposed_0_8_out_ap_vld;

reg ap_idle;
reg transposed_0_15_out_ap_vld;
reg transposed_0_14_out_ap_vld;
reg transposed_0_13_out_ap_vld;
reg transposed_0_12_out_ap_vld;
reg transposed_0_11_out_ap_vld;
reg transposed_0_10_out_ap_vld;
reg transposed_0_9_out_ap_vld;
reg transposed_0_8_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln44_fu_173_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] trunc_ln44_fu_190_p1;
reg   [2:0] trunc_ln44_reg_333;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln44_fu_185_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_60;
wire   [3:0] i_4_fu_179_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_3;
reg   [24:0] transposed_0_8_fu_64;
wire   [24:0] zext_ln46_fu_199_p1;
reg   [24:0] transposed_0_9_fu_68;
reg   [24:0] transposed_0_10_fu_72;
reg   [24:0] transposed_0_11_fu_76;
reg   [24:0] transposed_0_12_fu_80;
reg   [24:0] transposed_0_13_fu_84;
reg   [24:0] transposed_0_14_fu_88;
reg   [24:0] transposed_0_15_fu_92;
wire    ap_block_pp0_stage0_01001;
reg    input_0_ce0_local;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_fu_60 = 4'd0;
#0 transposed_0_8_fu_64 = 25'd0;
#0 transposed_0_9_fu_68 = 25'd0;
#0 transposed_0_10_fu_72 = 25'd0;
#0 transposed_0_11_fu_76 = 25'd0;
#0 transposed_0_12_fu_80 = 25'd0;
#0 transposed_0_13_fu_84 = 25'd0;
#0 transposed_0_14_fu_88 = 25'd0;
#0 transposed_0_15_fu_92 = 25'd0;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln44_fu_173_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= i_4_fu_179_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_reg_333 == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_10_fu_72[23 : 0] <= zext_ln46_fu_199_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_reg_333 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_11_fu_76[23 : 0] <= zext_ln46_fu_199_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_reg_333 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_12_fu_80[23 : 0] <= zext_ln46_fu_199_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_reg_333 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_13_fu_84[23 : 0] <= zext_ln46_fu_199_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_reg_333 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_14_fu_88[23 : 0] <= zext_ln46_fu_199_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_reg_333 == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_15_fu_92[23 : 0] <= zext_ln46_fu_199_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_reg_333 == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_8_fu_64[23 : 0] <= zext_ln46_fu_199_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_reg_333 == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_9_fu_68[23 : 0] <= zext_ln46_fu_199_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln44_reg_333 <= trunc_ln44_fu_190_p1;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_ce0_local = 1'b1;
    end else begin
        input_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_10_out_ap_vld = 1'b1;
    end else begin
        transposed_0_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_11_out_ap_vld = 1'b1;
    end else begin
        transposed_0_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_12_out_ap_vld = 1'b1;
    end else begin
        transposed_0_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_13_out_ap_vld = 1'b1;
    end else begin
        transposed_0_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_14_out_ap_vld = 1'b1;
    end else begin
        transposed_0_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_15_out_ap_vld = 1'b1;
    end else begin
        transposed_0_15_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_8_out_ap_vld = 1'b1;
    end else begin
        transposed_0_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        transposed_0_9_out_ap_vld = 1'b1;
    end else begin
        transposed_0_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_4_fu_179_p2 = (ap_sig_allocacmp_i_3 + 4'd1);

assign icmp_ln44_fu_173_p2 = ((ap_sig_allocacmp_i_3 == 4'd8) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln44_fu_185_p1;

assign input_0_ce0 = input_0_ce0_local;

assign transposed_0_10_out = transposed_0_10_fu_72;

assign transposed_0_11_out = transposed_0_11_fu_76;

assign transposed_0_12_out = transposed_0_12_fu_80;

assign transposed_0_13_out = transposed_0_13_fu_84;

assign transposed_0_14_out = transposed_0_14_fu_88;

assign transposed_0_15_out = transposed_0_15_fu_92;

assign transposed_0_8_out = transposed_0_8_fu_64;

assign transposed_0_9_out = transposed_0_9_fu_68;

assign trunc_ln44_fu_190_p1 = ap_sig_allocacmp_i_3[2:0];

assign zext_ln44_fu_185_p1 = ap_sig_allocacmp_i_3;

assign zext_ln46_fu_199_p1 = input_0_q0;

always @ (posedge ap_clk) begin
    transposed_0_8_fu_64[24] <= 1'b0;
    transposed_0_9_fu_68[24] <= 1'b0;
    transposed_0_10_fu_72[24] <= 1'b0;
    transposed_0_11_fu_76[24] <= 1'b0;
    transposed_0_12_fu_80[24] <= 1'b0;
    transposed_0_13_fu_84[24] <= 1'b0;
    transposed_0_14_fu_88[24] <= 1'b0;
    transposed_0_15_fu_92[24] <= 1'b0;
end

endmodule //top_updateWeightBias_8_4_Pipeline_VITIS_LOOP_44_1
