// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_backProp_8_4_10_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        agg_result_0,
        agg_result_0_ap_vld,
        w_l_plus1_T_address0,
        w_l_plus1_T_ce0,
        w_l_plus1_T_q0,
        d_l_plus1_0_address0,
        d_l_plus1_0_ce0,
        d_l_plus1_0_q0,
        agg_result_1,
        agg_result_1_ap_vld,
        agg_result_2,
        agg_result_2_ap_vld,
        agg_result_3,
        agg_result_3_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [24:0] agg_result_0;
output   agg_result_0_ap_vld;
output  [5:0] w_l_plus1_T_address0;
output   w_l_plus1_T_ce0;
input  [24:0] w_l_plus1_T_q0;
output  [3:0] d_l_plus1_0_address0;
output   d_l_plus1_0_ce0;
input  [24:0] d_l_plus1_0_q0;
output  [24:0] agg_result_1;
output   agg_result_1_ap_vld;
output  [24:0] agg_result_2;
output   agg_result_2_ap_vld;
output  [24:0] agg_result_3;
output   agg_result_3_ap_vld;

reg ap_idle;
reg agg_result_0_ap_vld;
reg agg_result_1_ap_vld;
reg agg_result_2_ap_vld;
reg agg_result_3_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln71_fu_187_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln71_1_fu_193_p2;
reg   [5:0] add_ln71_1_reg_395;
wire   [0:0] icmp_ln74_fu_211_p2;
reg   [0:0] icmp_ln74_reg_400;
wire   [3:0] select_ln71_fu_217_p3;
reg   [3:0] select_ln71_reg_405;
wire   [2:0] select_ln71_7_fu_225_p3;
reg   [2:0] select_ln71_7_reg_410;
wire   [1:0] trunc_ln71_fu_259_p1;
reg   [1:0] trunc_ln71_reg_415;
wire   [63:0] zext_ln79_1_fu_278_p1;
wire   [63:0] zext_ln74_fu_263_p1;
reg   [24:0] temp_fu_90;
wire    ap_loop_init;
reg   [3:0] k_fu_94;
wire   [3:0] k_5_fu_335_p2;
reg   [3:0] ap_sig_allocacmp_k_load;
reg   [2:0] i_22_fu_98;
reg   [2:0] ap_sig_allocacmp_i_22_load;
reg   [5:0] indvar_flatten6_fu_102;
reg   [5:0] ap_sig_allocacmp_indvar_flatten6_load;
wire   [0:0] icmp_ln74_4_fu_340_p2;
reg    w_l_plus1_T_ce0_local;
reg    d_l_plus1_0_ce0_local;
wire   [2:0] i_fu_205_p2;
wire   [3:0] tmp_8_fu_241_p3;
wire   [5:0] tmp_fu_233_p3;
wire   [5:0] zext_ln71_fu_249_p1;
wire   [5:0] add_ln71_fu_253_p2;
wire   [5:0] zext_ln79_fu_268_p1;
wire   [5:0] add_ln79_1_fu_272_p2;
wire   [24:0] select_ln71_8_fu_296_p3;
wire   [49:0] mul_ln79_fu_160_p2;
wire   [41:0] add_ln79_fu_315_p0;
wire   [41:0] add_ln79_fu_315_p1;
wire   [41:0] add_ln79_fu_315_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 temp_fu_90 = 25'd0;
#0 k_fu_94 = 4'd0;
#0 i_22_fu_98 = 3'd0;
#0 indvar_flatten6_fu_102 = 6'd0;
#0 ap_done_reg = 1'b0;
end

top_mul_25s_25s_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25s_25s_50_1_1_U464(
    .din0(d_l_plus1_0_q0),
    .din1(w_l_plus1_T_q0),
    .dout(mul_ln79_fu_160_p2)
);

top_add_42ns_42ns_42_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 42 ),
    .din1_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
add_42ns_42ns_42_1_1_U465(
    .din0(add_ln79_fu_315_p0),
    .din1(add_ln79_fu_315_p1),
    .dout(add_ln79_fu_315_p2)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_22_fu_98 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_22_fu_98 <= select_ln71_7_reg_410;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten6_fu_102 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten6_fu_102 <= add_ln71_1_reg_395;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        k_fu_94 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_fu_94 <= k_5_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        temp_fu_90 <= 25'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_fu_90 <= {{add_ln79_fu_315_p2[41:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln71_1_reg_395 <= add_ln71_1_fu_193_p2;
        icmp_ln74_reg_400 <= icmp_ln74_fu_211_p2;
        select_ln71_7_reg_410 <= select_ln71_7_fu_225_p3;
        select_ln71_reg_405 <= select_ln71_fu_217_p3;
        trunc_ln71_reg_415 <= trunc_ln71_fu_259_p1;
    end
end

always @ (*) begin
    if (((trunc_ln71_reg_415 == 2'd0) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln74_4_fu_340_p2 == 1'd1))) begin
        agg_result_0_ap_vld = 1'b1;
    end else begin
        agg_result_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln71_reg_415 == 2'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln74_4_fu_340_p2 == 1'd1))) begin
        agg_result_1_ap_vld = 1'b1;
    end else begin
        agg_result_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln71_reg_415 == 2'd2) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln74_4_fu_340_p2 == 1'd1))) begin
        agg_result_2_ap_vld = 1'b1;
    end else begin
        agg_result_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln71_reg_415 == 2'd3) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln74_4_fu_340_p2 == 1'd1))) begin
        agg_result_3_ap_vld = 1'b1;
    end else begin
        agg_result_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln71_fu_187_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_22_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_22_load = i_22_fu_98;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_102;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_k_load = 4'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        d_l_plus1_0_ce0_local = 1'b1;
    end else begin
        d_l_plus1_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_l_plus1_T_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln71_fu_187_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_1_fu_193_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 6'd1);

assign add_ln71_fu_253_p2 = (tmp_fu_233_p3 + zext_ln71_fu_249_p1);

assign add_ln79_1_fu_272_p2 = (add_ln71_fu_253_p2 + zext_ln79_fu_268_p1);

assign add_ln79_fu_315_p0 = {{select_ln71_8_fu_296_p3}, {17'd0}};

assign add_ln79_fu_315_p1 = mul_ln79_fu_160_p2[41:0];

assign agg_result_0 = {{add_ln79_fu_315_p2[41:17]}};

assign agg_result_1 = {{add_ln79_fu_315_p2[41:17]}};

assign agg_result_2 = {{add_ln79_fu_315_p2[41:17]}};

assign agg_result_3 = {{add_ln79_fu_315_p2[41:17]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign d_l_plus1_0_address0 = zext_ln74_fu_263_p1;

assign d_l_plus1_0_ce0 = d_l_plus1_0_ce0_local;

assign i_fu_205_p2 = (ap_sig_allocacmp_i_22_load + 3'd1);

assign icmp_ln71_fu_187_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln74_4_fu_340_p2 = ((k_5_fu_335_p2 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_211_p2 = ((ap_sig_allocacmp_k_load == 4'd10) ? 1'b1 : 1'b0);

assign k_5_fu_335_p2 = (select_ln71_reg_405 + 4'd1);

assign select_ln71_7_fu_225_p3 = ((icmp_ln74_fu_211_p2[0:0] == 1'b1) ? i_fu_205_p2 : ap_sig_allocacmp_i_22_load);

assign select_ln71_8_fu_296_p3 = ((icmp_ln74_reg_400[0:0] == 1'b1) ? 25'd0 : temp_fu_90);

assign select_ln71_fu_217_p3 = ((icmp_ln74_fu_211_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_k_load);

assign tmp_8_fu_241_p3 = {{select_ln71_7_fu_225_p3}, {1'd0}};

assign tmp_fu_233_p3 = {{select_ln71_7_fu_225_p3}, {3'd0}};

assign trunc_ln71_fu_259_p1 = select_ln71_7_fu_225_p3[1:0];

assign w_l_plus1_T_address0 = zext_ln79_1_fu_278_p1;

assign w_l_plus1_T_ce0 = w_l_plus1_T_ce0_local;

assign zext_ln71_fu_249_p1 = tmp_8_fu_241_p3;

assign zext_ln74_fu_263_p1 = select_ln71_fu_217_p3;

assign zext_ln79_1_fu_278_p1 = add_ln79_1_fu_272_p2;

assign zext_ln79_fu_268_p1 = select_ln71_fu_217_p3;

endmodule //top_backProp_8_4_10_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3
