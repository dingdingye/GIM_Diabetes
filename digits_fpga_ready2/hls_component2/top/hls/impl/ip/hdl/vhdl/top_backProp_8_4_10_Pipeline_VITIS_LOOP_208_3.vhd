-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_backProp_8_4_10_Pipeline_VITIS_LOOP_208_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    agg_result_0_i : IN STD_LOGIC_VECTOR (24 downto 0);
    agg_result_0_o : OUT STD_LOGIC_VECTOR (24 downto 0);
    agg_result_0_o_ap_vld : OUT STD_LOGIC;
    agg_result_3_i : IN STD_LOGIC_VECTOR (24 downto 0);
    agg_result_3_o : OUT STD_LOGIC_VECTOR (24 downto 0);
    agg_result_3_o_ap_vld : OUT STD_LOGIC;
    agg_result_2_i : IN STD_LOGIC_VECTOR (24 downto 0);
    agg_result_2_o : OUT STD_LOGIC_VECTOR (24 downto 0);
    agg_result_2_o_ap_vld : OUT STD_LOGIC;
    agg_result_1_i : IN STD_LOGIC_VECTOR (24 downto 0);
    agg_result_1_o : OUT STD_LOGIC_VECTOR (24 downto 0);
    agg_result_1_o_ap_vld : OUT STD_LOGIC;
    output_load_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    output_10_load_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    output_13_load_1_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    output_16_load_reload : IN STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of top_backProp_8_4_10_Pipeline_VITIS_LOOP_208_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv43_0 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln208_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal trunc_ln208_fu_176_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln208_reg_273 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln_reg_280 : STD_LOGIC_VECTOR (24 downto 0);
    signal ii_fu_72 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln208_fu_170_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_ii_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln211_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_180_p9 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_fu_180_p11 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln211_1_fu_208_p9 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln211_1_fu_208_p11 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln211_fu_236_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln211_fu_236_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal mul_ln211_fu_236_p00 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_condition_240 : BOOLEAN;
    signal ap_condition_246 : BOOLEAN;
    signal ap_condition_252 : BOOLEAN;
    signal ap_condition_258 : BOOLEAN;
    signal tmp_3_fu_180_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_180_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_180_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_180_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln211_1_fu_208_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln211_1_fu_208_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln211_1_fu_208_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln211_1_fu_208_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_sparsemux_9_2_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        din3 : IN STD_LOGIC_VECTOR (24 downto 0);
        def : IN STD_LOGIC_VECTOR (24 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component top_sparsemux_9_2_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        din3 : IN STD_LOGIC_VECTOR (17 downto 0);
        def : IN STD_LOGIC_VECTOR (17 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component top_mul_18ns_25s_43_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_25_1_1_U511 : component top_sparsemux_9_2_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 25,
        CASE1 => "01",
        din1_WIDTH => 25,
        CASE2 => "10",
        din2_WIDTH => 25,
        CASE3 => "11",
        din3_WIDTH => 25,
        def_WIDTH => 25,
        sel_WIDTH => 2,
        dout_WIDTH => 25)
    port map (
        din0 => agg_result_0_i,
        din1 => agg_result_1_i,
        din2 => agg_result_2_i,
        din3 => agg_result_3_i,
        def => tmp_3_fu_180_p9,
        sel => trunc_ln208_fu_176_p1,
        dout => tmp_3_fu_180_p11);

    sparsemux_9_2_18_1_1_U512 : component top_sparsemux_9_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 18,
        CASE1 => "01",
        din1_WIDTH => 18,
        CASE2 => "10",
        din2_WIDTH => 18,
        CASE3 => "11",
        din3_WIDTH => 18,
        def_WIDTH => 18,
        sel_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => output_load_reload,
        din1 => output_10_load_reload,
        din2 => output_13_load_1_reload,
        din3 => output_16_load_reload,
        def => sext_ln211_1_fu_208_p9,
        sel => trunc_ln208_fu_176_p1,
        dout => sext_ln211_1_fu_208_p11);

    mul_18ns_25s_43_1_1_U513 : component top_mul_18ns_25s_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 25,
        dout_WIDTH => 43)
    port map (
        din0 => mul_ln211_fu_236_p0,
        din1 => tmp_3_fu_180_p11,
        dout => mul_ln211_fu_236_p2);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ii_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln208_fu_164_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ii_fu_72 <= add_ln208_fu_170_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ii_fu_72 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln208_reg_273 <= trunc_ln208_fu_176_p1;
                trunc_ln_reg_280 <= mul_ln211_fu_236_p2(41 downto 17);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln208_fu_170_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ii_1) + unsigned(ap_const_lv3_1));

    agg_result_0_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, agg_result_0_i, trunc_ln208_reg_273, trunc_ln_reg_280, ap_block_pp0_stage0_01001, ap_condition_240)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if (((trunc_ln208_reg_273 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                agg_result_0_o <= trunc_ln_reg_280;
            elsif ((ap_const_boolean_1 = ap_condition_240)) then 
                agg_result_0_o <= ap_const_lv25_0;
            else 
                agg_result_0_o <= agg_result_0_i;
            end if;
        else 
            agg_result_0_o <= agg_result_0_i;
        end if; 
    end process;


    agg_result_0_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln208_fu_164_p2, trunc_ln208_fu_176_p1, trunc_ln208_reg_273, ap_block_pp0_stage0_11001, icmp_ln211_fu_242_p2)
    begin
        if ((((trunc_ln208_reg_273 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln208_fu_176_p1 = ap_const_lv2_0) and (icmp_ln208_fu_164_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln211_fu_242_p2 = ap_const_lv1_1)))) then 
            agg_result_0_o_ap_vld <= ap_const_logic_1;
        else 
            agg_result_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_1_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, agg_result_1_i, trunc_ln208_reg_273, trunc_ln_reg_280, ap_block_pp0_stage0_01001, ap_condition_246)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if (((trunc_ln208_reg_273 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                agg_result_1_o <= trunc_ln_reg_280;
            elsif ((ap_const_boolean_1 = ap_condition_246)) then 
                agg_result_1_o <= ap_const_lv25_0;
            else 
                agg_result_1_o <= agg_result_1_i;
            end if;
        else 
            agg_result_1_o <= agg_result_1_i;
        end if; 
    end process;


    agg_result_1_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln208_fu_164_p2, trunc_ln208_fu_176_p1, trunc_ln208_reg_273, ap_block_pp0_stage0_11001, icmp_ln211_fu_242_p2)
    begin
        if ((((trunc_ln208_reg_273 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln208_fu_176_p1 = ap_const_lv2_1) and (icmp_ln208_fu_164_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln211_fu_242_p2 = ap_const_lv1_1)))) then 
            agg_result_1_o_ap_vld <= ap_const_logic_1;
        else 
            agg_result_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_2_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, agg_result_2_i, trunc_ln208_reg_273, trunc_ln_reg_280, ap_block_pp0_stage0_01001, ap_condition_252)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if (((trunc_ln208_reg_273 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                agg_result_2_o <= trunc_ln_reg_280;
            elsif ((ap_const_boolean_1 = ap_condition_252)) then 
                agg_result_2_o <= ap_const_lv25_0;
            else 
                agg_result_2_o <= agg_result_2_i;
            end if;
        else 
            agg_result_2_o <= agg_result_2_i;
        end if; 
    end process;


    agg_result_2_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln208_fu_164_p2, trunc_ln208_fu_176_p1, trunc_ln208_reg_273, ap_block_pp0_stage0_11001, icmp_ln211_fu_242_p2)
    begin
        if ((((trunc_ln208_reg_273 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln208_fu_176_p1 = ap_const_lv2_2) and (icmp_ln208_fu_164_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln211_fu_242_p2 = ap_const_lv1_1)))) then 
            agg_result_2_o_ap_vld <= ap_const_logic_1;
        else 
            agg_result_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_3_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, agg_result_3_i, trunc_ln208_reg_273, trunc_ln_reg_280, ap_block_pp0_stage0_01001, ap_condition_258)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if (((trunc_ln208_reg_273 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                agg_result_3_o <= trunc_ln_reg_280;
            elsif ((ap_const_boolean_1 = ap_condition_258)) then 
                agg_result_3_o <= ap_const_lv25_0;
            else 
                agg_result_3_o <= agg_result_3_i;
            end if;
        else 
            agg_result_3_o <= agg_result_3_i;
        end if; 
    end process;


    agg_result_3_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln208_fu_164_p2, trunc_ln208_fu_176_p1, trunc_ln208_reg_273, ap_block_pp0_stage0_11001, icmp_ln211_fu_242_p2)
    begin
        if ((((trunc_ln208_reg_273 = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((trunc_ln208_fu_176_p1 = ap_const_lv2_3) and (icmp_ln208_fu_164_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln211_fu_242_p2 = ap_const_lv1_1)))) then 
            agg_result_3_o_ap_vld <= ap_const_logic_1;
        else 
            agg_result_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_240_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln208_fu_164_p2, trunc_ln208_fu_176_p1, icmp_ln211_fu_242_p2)
    begin
                ap_condition_240 <= ((trunc_ln208_fu_176_p1 = ap_const_lv2_0) and (icmp_ln208_fu_164_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln211_fu_242_p2 = ap_const_lv1_1));
    end process;


    ap_condition_246_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln208_fu_164_p2, trunc_ln208_fu_176_p1, icmp_ln211_fu_242_p2)
    begin
                ap_condition_246 <= ((trunc_ln208_fu_176_p1 = ap_const_lv2_1) and (icmp_ln208_fu_164_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln211_fu_242_p2 = ap_const_lv1_1));
    end process;


    ap_condition_252_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln208_fu_164_p2, trunc_ln208_fu_176_p1, icmp_ln211_fu_242_p2)
    begin
                ap_condition_252 <= ((trunc_ln208_fu_176_p1 = ap_const_lv2_2) and (icmp_ln208_fu_164_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln211_fu_242_p2 = ap_const_lv1_1));
    end process;


    ap_condition_258_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln208_fu_164_p2, trunc_ln208_fu_176_p1, icmp_ln211_fu_242_p2)
    begin
                ap_condition_258 <= ((trunc_ln208_fu_176_p1 = ap_const_lv2_3) and (icmp_ln208_fu_164_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln211_fu_242_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln208_fu_164_p2)
    begin
        if (((icmp_ln208_fu_164_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ii_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ii_fu_72, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_ii_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_ii_1 <= ii_fu_72;
        end if; 
    end process;

    icmp_ln208_fu_164_p2 <= "1" when (ap_sig_allocacmp_ii_1 = ap_const_lv3_4) else "0";
    icmp_ln211_fu_242_p2 <= "1" when (mul_ln211_fu_236_p2 = ap_const_lv43_0) else "0";
    mul_ln211_fu_236_p0 <= mul_ln211_fu_236_p00(18 - 1 downto 0);
    mul_ln211_fu_236_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln211_1_fu_208_p11),43));
    sext_ln211_1_fu_208_p9 <= "XXXXXXXXXXXXXXXXXX";
    tmp_3_fu_180_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln208_fu_176_p1 <= ap_sig_allocacmp_ii_1(2 - 1 downto 0);
end behav;
