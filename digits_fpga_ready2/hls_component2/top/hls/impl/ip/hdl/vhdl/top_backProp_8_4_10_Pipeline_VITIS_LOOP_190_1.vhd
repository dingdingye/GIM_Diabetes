-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_backProp_8_4_10_Pipeline_VITIS_LOOP_190_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_load_reload : IN STD_LOGIC_VECTOR (24 downto 0);
    C_29_load_reload : IN STD_LOGIC_VECTOR (24 downto 0);
    C_31_load_reload : IN STD_LOGIC_VECTOR (24 downto 0);
    C_33_load_reload : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (24 downto 0);
    net_load_out : OUT STD_LOGIC_VECTOR (24 downto 0);
    net_load_out_ap_vld : OUT STD_LOGIC;
    net_1_load_out : OUT STD_LOGIC_VECTOR (24 downto 0);
    net_1_load_out_ap_vld : OUT STD_LOGIC;
    net_2_load_out : OUT STD_LOGIC_VECTOR (24 downto 0);
    net_2_load_out_ap_vld : OUT STD_LOGIC;
    net_3_load_out : OUT STD_LOGIC_VECTOR (24 downto 0);
    net_3_load_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of top_backProp_8_4_10_Pipeline_VITIS_LOOP_190_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln190_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_03_fu_68 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal i_29_fu_198_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal net_3_fu_72 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal net_5_fu_256_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln190_fu_204_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal net_2_fu_76 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal net_1_fu_80 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal net_fu_84 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal tmp_9_fu_208_p9 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_s_fu_232_p9 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_s_fu_232_p11 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_9_fu_208_p11 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_9_fu_208_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_208_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_208_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_208_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_232_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_232_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_232_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_232_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_sparsemux_9_2_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        din3 : IN STD_LOGIC_VECTOR (24 downto 0);
        def : IN STD_LOGIC_VECTOR (24 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_25_1_1_U488 : component top_sparsemux_9_2_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 25,
        CASE1 => "01",
        din1_WIDTH => 25,
        CASE2 => "10",
        din2_WIDTH => 25,
        CASE3 => "11",
        din3_WIDTH => 25,
        def_WIDTH => 25,
        sel_WIDTH => 2,
        dout_WIDTH => 25)
    port map (
        din0 => C_load_reload,
        din1 => C_29_load_reload,
        din2 => C_31_load_reload,
        din3 => C_33_load_reload,
        def => tmp_9_fu_208_p9,
        sel => trunc_ln190_fu_204_p1,
        dout => tmp_9_fu_208_p11);

    sparsemux_9_2_25_1_1_U489 : component top_sparsemux_9_2_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 25,
        CASE1 => "01",
        din1_WIDTH => 25,
        CASE2 => "10",
        din2_WIDTH => 25,
        CASE3 => "11",
        din3_WIDTH => 25,
        def_WIDTH => 25,
        sel_WIDTH => 2,
        dout_WIDTH => 25)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        def => tmp_s_fu_232_p9,
        sel => trunc_ln190_fu_204_p1,
        dout => tmp_s_fu_232_p11);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_03_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln190_fu_192_p2 = ap_const_lv1_0)) then 
                    i_03_fu_68 <= i_29_fu_198_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_03_fu_68 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    net_1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if (((trunc_ln190_fu_204_p1 = ap_const_lv2_1) and (icmp_ln190_fu_192_p2 = ap_const_lv1_0))) then 
                    net_1_fu_80 <= net_5_fu_256_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    net_1_fu_80 <= ap_const_lv25_0;
                end if;
            end if; 
        end if;
    end process;

    net_2_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if (((trunc_ln190_fu_204_p1 = ap_const_lv2_2) and (icmp_ln190_fu_192_p2 = ap_const_lv1_0))) then 
                    net_2_fu_76 <= net_5_fu_256_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    net_2_fu_76 <= ap_const_lv25_0;
                end if;
            end if; 
        end if;
    end process;

    net_3_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if (((trunc_ln190_fu_204_p1 = ap_const_lv2_3) and (icmp_ln190_fu_192_p2 = ap_const_lv1_0))) then 
                    net_3_fu_72 <= net_5_fu_256_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    net_3_fu_72 <= ap_const_lv25_0;
                end if;
            end if; 
        end if;
    end process;

    net_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if (((trunc_ln190_fu_204_p1 = ap_const_lv2_0) and (icmp_ln190_fu_192_p2 = ap_const_lv1_0))) then 
                    net_fu_84 <= net_5_fu_256_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    net_fu_84 <= ap_const_lv25_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln190_fu_192_p2)
    begin
        if (((icmp_ln190_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, i_03_fu_68, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_03_fu_68;
        end if; 
    end process;

    i_29_fu_198_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    icmp_ln190_fu_192_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_4) else "0";
    net_1_load_out <= net_1_fu_80;

    net_1_load_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln190_fu_192_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln190_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            net_1_load_out_ap_vld <= ap_const_logic_1;
        else 
            net_1_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    net_2_load_out <= net_2_fu_76;

    net_2_load_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln190_fu_192_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln190_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            net_2_load_out_ap_vld <= ap_const_logic_1;
        else 
            net_2_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    net_3_load_out <= net_3_fu_72;

    net_3_load_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln190_fu_192_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln190_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            net_3_load_out_ap_vld <= ap_const_logic_1;
        else 
            net_3_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    net_5_fu_256_p2 <= std_logic_vector(unsigned(tmp_s_fu_232_p11) + unsigned(tmp_9_fu_208_p11));
    net_load_out <= net_fu_84;

    net_load_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln190_fu_192_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln190_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            net_load_out_ap_vld <= ap_const_logic_1;
        else 
            net_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_9_fu_208_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_s_fu_232_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln190_fu_204_p1 <= ap_sig_allocacmp_i(2 - 1 downto 0);
end behav;
