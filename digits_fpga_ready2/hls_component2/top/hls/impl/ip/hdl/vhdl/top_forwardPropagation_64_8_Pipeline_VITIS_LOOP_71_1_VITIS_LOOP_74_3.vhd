-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_forwardPropagation_64_8_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_0_ce0 : OUT STD_LOGIC;
    weights_0_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_1_ce0 : OUT STD_LOGIC;
    weights_1_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_2_ce0 : OUT STD_LOGIC;
    weights_2_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_3_ce0 : OUT STD_LOGIC;
    weights_3_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_4_ce0 : OUT STD_LOGIC;
    weights_4_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_5_ce0 : OUT STD_LOGIC;
    weights_5_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_6_ce0 : OUT STD_LOGIC;
    weights_6_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_7_ce0 : OUT STD_LOGIC;
    weights_7_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_8_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_8_ce0 : OUT STD_LOGIC;
    weights_8_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_9_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_9_ce0 : OUT STD_LOGIC;
    weights_9_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_10_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_10_ce0 : OUT STD_LOGIC;
    weights_10_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_11_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_11_ce0 : OUT STD_LOGIC;
    weights_11_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_12_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_12_ce0 : OUT STD_LOGIC;
    weights_12_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_13_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_13_ce0 : OUT STD_LOGIC;
    weights_13_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_14_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_14_ce0 : OUT STD_LOGIC;
    weights_14_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_15_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_15_ce0 : OUT STD_LOGIC;
    weights_15_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_16_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_16_ce0 : OUT STD_LOGIC;
    weights_16_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_17_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_17_ce0 : OUT STD_LOGIC;
    weights_17_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_18_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_18_ce0 : OUT STD_LOGIC;
    weights_18_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_19_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_19_ce0 : OUT STD_LOGIC;
    weights_19_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_20_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_20_ce0 : OUT STD_LOGIC;
    weights_20_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_21_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_21_ce0 : OUT STD_LOGIC;
    weights_21_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_22_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_22_ce0 : OUT STD_LOGIC;
    weights_22_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_23_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_23_ce0 : OUT STD_LOGIC;
    weights_23_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_24_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_24_ce0 : OUT STD_LOGIC;
    weights_24_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_25_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_25_ce0 : OUT STD_LOGIC;
    weights_25_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_26_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_26_ce0 : OUT STD_LOGIC;
    weights_26_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_27_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_27_ce0 : OUT STD_LOGIC;
    weights_27_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_28_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_28_ce0 : OUT STD_LOGIC;
    weights_28_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_29_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_29_ce0 : OUT STD_LOGIC;
    weights_29_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_30_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_30_ce0 : OUT STD_LOGIC;
    weights_30_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_31_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_31_ce0 : OUT STD_LOGIC;
    weights_31_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_32_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_32_ce0 : OUT STD_LOGIC;
    weights_32_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_33_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_33_ce0 : OUT STD_LOGIC;
    weights_33_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_34_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_34_ce0 : OUT STD_LOGIC;
    weights_34_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_35_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_35_ce0 : OUT STD_LOGIC;
    weights_35_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_36_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_36_ce0 : OUT STD_LOGIC;
    weights_36_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_37_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_37_ce0 : OUT STD_LOGIC;
    weights_37_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_38_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_38_ce0 : OUT STD_LOGIC;
    weights_38_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_39_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_39_ce0 : OUT STD_LOGIC;
    weights_39_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_40_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_40_ce0 : OUT STD_LOGIC;
    weights_40_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_41_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_41_ce0 : OUT STD_LOGIC;
    weights_41_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_42_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_42_ce0 : OUT STD_LOGIC;
    weights_42_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_43_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_43_ce0 : OUT STD_LOGIC;
    weights_43_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_44_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_44_ce0 : OUT STD_LOGIC;
    weights_44_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_45_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_45_ce0 : OUT STD_LOGIC;
    weights_45_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_46_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_46_ce0 : OUT STD_LOGIC;
    weights_46_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_47_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_47_ce0 : OUT STD_LOGIC;
    weights_47_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_48_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_48_ce0 : OUT STD_LOGIC;
    weights_48_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_49_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_49_ce0 : OUT STD_LOGIC;
    weights_49_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_50_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_50_ce0 : OUT STD_LOGIC;
    weights_50_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_51_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_51_ce0 : OUT STD_LOGIC;
    weights_51_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_52_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_52_ce0 : OUT STD_LOGIC;
    weights_52_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_53_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_53_ce0 : OUT STD_LOGIC;
    weights_53_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_54_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_54_ce0 : OUT STD_LOGIC;
    weights_54_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_55_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_55_ce0 : OUT STD_LOGIC;
    weights_55_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_56_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_56_ce0 : OUT STD_LOGIC;
    weights_56_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_57_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_57_ce0 : OUT STD_LOGIC;
    weights_57_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_58_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_58_ce0 : OUT STD_LOGIC;
    weights_58_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_59_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_59_ce0 : OUT STD_LOGIC;
    weights_59_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_60_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_60_ce0 : OUT STD_LOGIC;
    weights_60_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_61_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_61_ce0 : OUT STD_LOGIC;
    weights_61_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_62_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_62_ce0 : OUT STD_LOGIC;
    weights_62_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_63_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    weights_63_ce0 : OUT STD_LOGIC;
    weights_63_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    input_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    C_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_0_ce0 : OUT STD_LOGIC;
    C_0_we0 : OUT STD_LOGIC;
    C_0_d0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of top_forwardPropagation_64_8_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln71_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln71_fu_1234_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln71_reg_1724 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln74_fu_1252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_1729 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_fu_1258_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln71_reg_1734 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln71_3_fu_1266_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln71_3_reg_1739 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln74_fu_1348_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln74_reg_2064 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_0_addr_reg_2074 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln71_fu_1274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_1343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_fu_328 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_332 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal k_2_fu_1664_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_336 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_340 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_0_ce0_local : STD_LOGIC;
    signal weights_1_ce0_local : STD_LOGIC;
    signal weights_2_ce0_local : STD_LOGIC;
    signal weights_3_ce0_local : STD_LOGIC;
    signal weights_4_ce0_local : STD_LOGIC;
    signal weights_5_ce0_local : STD_LOGIC;
    signal weights_6_ce0_local : STD_LOGIC;
    signal weights_7_ce0_local : STD_LOGIC;
    signal weights_8_ce0_local : STD_LOGIC;
    signal weights_9_ce0_local : STD_LOGIC;
    signal weights_10_ce0_local : STD_LOGIC;
    signal weights_11_ce0_local : STD_LOGIC;
    signal weights_12_ce0_local : STD_LOGIC;
    signal weights_13_ce0_local : STD_LOGIC;
    signal weights_14_ce0_local : STD_LOGIC;
    signal weights_15_ce0_local : STD_LOGIC;
    signal weights_16_ce0_local : STD_LOGIC;
    signal weights_17_ce0_local : STD_LOGIC;
    signal weights_18_ce0_local : STD_LOGIC;
    signal weights_19_ce0_local : STD_LOGIC;
    signal weights_20_ce0_local : STD_LOGIC;
    signal weights_21_ce0_local : STD_LOGIC;
    signal weights_22_ce0_local : STD_LOGIC;
    signal weights_23_ce0_local : STD_LOGIC;
    signal weights_24_ce0_local : STD_LOGIC;
    signal weights_25_ce0_local : STD_LOGIC;
    signal weights_26_ce0_local : STD_LOGIC;
    signal weights_27_ce0_local : STD_LOGIC;
    signal weights_28_ce0_local : STD_LOGIC;
    signal weights_29_ce0_local : STD_LOGIC;
    signal weights_30_ce0_local : STD_LOGIC;
    signal weights_31_ce0_local : STD_LOGIC;
    signal weights_32_ce0_local : STD_LOGIC;
    signal weights_33_ce0_local : STD_LOGIC;
    signal weights_34_ce0_local : STD_LOGIC;
    signal weights_35_ce0_local : STD_LOGIC;
    signal weights_36_ce0_local : STD_LOGIC;
    signal weights_37_ce0_local : STD_LOGIC;
    signal weights_38_ce0_local : STD_LOGIC;
    signal weights_39_ce0_local : STD_LOGIC;
    signal weights_40_ce0_local : STD_LOGIC;
    signal weights_41_ce0_local : STD_LOGIC;
    signal weights_42_ce0_local : STD_LOGIC;
    signal weights_43_ce0_local : STD_LOGIC;
    signal weights_44_ce0_local : STD_LOGIC;
    signal weights_45_ce0_local : STD_LOGIC;
    signal weights_46_ce0_local : STD_LOGIC;
    signal weights_47_ce0_local : STD_LOGIC;
    signal weights_48_ce0_local : STD_LOGIC;
    signal weights_49_ce0_local : STD_LOGIC;
    signal weights_50_ce0_local : STD_LOGIC;
    signal weights_51_ce0_local : STD_LOGIC;
    signal weights_52_ce0_local : STD_LOGIC;
    signal weights_53_ce0_local : STD_LOGIC;
    signal weights_54_ce0_local : STD_LOGIC;
    signal weights_55_ce0_local : STD_LOGIC;
    signal weights_56_ce0_local : STD_LOGIC;
    signal weights_57_ce0_local : STD_LOGIC;
    signal weights_58_ce0_local : STD_LOGIC;
    signal weights_59_ce0_local : STD_LOGIC;
    signal weights_60_ce0_local : STD_LOGIC;
    signal weights_61_ce0_local : STD_LOGIC;
    signal weights_62_ce0_local : STD_LOGIC;
    signal weights_63_ce0_local : STD_LOGIC;
    signal input_0_ce0_local : STD_LOGIC;
    signal C_0_we0_local : STD_LOGIC;
    signal icmp_ln74_2_fu_1669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_0_ce0_local : STD_LOGIC;
    signal mul_ln79_fu_1201_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_18_fu_1246_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1355_p129 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_1355_p131 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln71_4_fu_1628_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln79_fu_1201_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln79_fu_1647_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal add_ln79_fu_1647_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal add_ln79_fu_1647_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal mul_ln79_fu_1201_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_fu_1355_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p11 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p13 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p15 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p17 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p19 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p21 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p23 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p25 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p27 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p29 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p31 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p33 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p35 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p37 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p39 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p41 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p43 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p45 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p47 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p49 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p51 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p53 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p55 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p57 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p59 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p61 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p63 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p67 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p69 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p71 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p73 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p75 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p77 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p79 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p81 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p83 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p85 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p87 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p89 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p91 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p93 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p95 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p97 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p99 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p101 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p103 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p105 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p107 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p109 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p111 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p113 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p115 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p117 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p119 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p121 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p123 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p125 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1355_p127 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_22ns_25s_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component top_sparsemux_129_6_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (5 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (5 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (5 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (5 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (5 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (5 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (5 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (5 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (5 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (5 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (5 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (5 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (5 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (5 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (5 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (5 downto 0);
        din15_WIDTH : INTEGER;
        CASE16 : STD_LOGIC_VECTOR (5 downto 0);
        din16_WIDTH : INTEGER;
        CASE17 : STD_LOGIC_VECTOR (5 downto 0);
        din17_WIDTH : INTEGER;
        CASE18 : STD_LOGIC_VECTOR (5 downto 0);
        din18_WIDTH : INTEGER;
        CASE19 : STD_LOGIC_VECTOR (5 downto 0);
        din19_WIDTH : INTEGER;
        CASE20 : STD_LOGIC_VECTOR (5 downto 0);
        din20_WIDTH : INTEGER;
        CASE21 : STD_LOGIC_VECTOR (5 downto 0);
        din21_WIDTH : INTEGER;
        CASE22 : STD_LOGIC_VECTOR (5 downto 0);
        din22_WIDTH : INTEGER;
        CASE23 : STD_LOGIC_VECTOR (5 downto 0);
        din23_WIDTH : INTEGER;
        CASE24 : STD_LOGIC_VECTOR (5 downto 0);
        din24_WIDTH : INTEGER;
        CASE25 : STD_LOGIC_VECTOR (5 downto 0);
        din25_WIDTH : INTEGER;
        CASE26 : STD_LOGIC_VECTOR (5 downto 0);
        din26_WIDTH : INTEGER;
        CASE27 : STD_LOGIC_VECTOR (5 downto 0);
        din27_WIDTH : INTEGER;
        CASE28 : STD_LOGIC_VECTOR (5 downto 0);
        din28_WIDTH : INTEGER;
        CASE29 : STD_LOGIC_VECTOR (5 downto 0);
        din29_WIDTH : INTEGER;
        CASE30 : STD_LOGIC_VECTOR (5 downto 0);
        din30_WIDTH : INTEGER;
        CASE31 : STD_LOGIC_VECTOR (5 downto 0);
        din31_WIDTH : INTEGER;
        CASE32 : STD_LOGIC_VECTOR (5 downto 0);
        din32_WIDTH : INTEGER;
        CASE33 : STD_LOGIC_VECTOR (5 downto 0);
        din33_WIDTH : INTEGER;
        CASE34 : STD_LOGIC_VECTOR (5 downto 0);
        din34_WIDTH : INTEGER;
        CASE35 : STD_LOGIC_VECTOR (5 downto 0);
        din35_WIDTH : INTEGER;
        CASE36 : STD_LOGIC_VECTOR (5 downto 0);
        din36_WIDTH : INTEGER;
        CASE37 : STD_LOGIC_VECTOR (5 downto 0);
        din37_WIDTH : INTEGER;
        CASE38 : STD_LOGIC_VECTOR (5 downto 0);
        din38_WIDTH : INTEGER;
        CASE39 : STD_LOGIC_VECTOR (5 downto 0);
        din39_WIDTH : INTEGER;
        CASE40 : STD_LOGIC_VECTOR (5 downto 0);
        din40_WIDTH : INTEGER;
        CASE41 : STD_LOGIC_VECTOR (5 downto 0);
        din41_WIDTH : INTEGER;
        CASE42 : STD_LOGIC_VECTOR (5 downto 0);
        din42_WIDTH : INTEGER;
        CASE43 : STD_LOGIC_VECTOR (5 downto 0);
        din43_WIDTH : INTEGER;
        CASE44 : STD_LOGIC_VECTOR (5 downto 0);
        din44_WIDTH : INTEGER;
        CASE45 : STD_LOGIC_VECTOR (5 downto 0);
        din45_WIDTH : INTEGER;
        CASE46 : STD_LOGIC_VECTOR (5 downto 0);
        din46_WIDTH : INTEGER;
        CASE47 : STD_LOGIC_VECTOR (5 downto 0);
        din47_WIDTH : INTEGER;
        CASE48 : STD_LOGIC_VECTOR (5 downto 0);
        din48_WIDTH : INTEGER;
        CASE49 : STD_LOGIC_VECTOR (5 downto 0);
        din49_WIDTH : INTEGER;
        CASE50 : STD_LOGIC_VECTOR (5 downto 0);
        din50_WIDTH : INTEGER;
        CASE51 : STD_LOGIC_VECTOR (5 downto 0);
        din51_WIDTH : INTEGER;
        CASE52 : STD_LOGIC_VECTOR (5 downto 0);
        din52_WIDTH : INTEGER;
        CASE53 : STD_LOGIC_VECTOR (5 downto 0);
        din53_WIDTH : INTEGER;
        CASE54 : STD_LOGIC_VECTOR (5 downto 0);
        din54_WIDTH : INTEGER;
        CASE55 : STD_LOGIC_VECTOR (5 downto 0);
        din55_WIDTH : INTEGER;
        CASE56 : STD_LOGIC_VECTOR (5 downto 0);
        din56_WIDTH : INTEGER;
        CASE57 : STD_LOGIC_VECTOR (5 downto 0);
        din57_WIDTH : INTEGER;
        CASE58 : STD_LOGIC_VECTOR (5 downto 0);
        din58_WIDTH : INTEGER;
        CASE59 : STD_LOGIC_VECTOR (5 downto 0);
        din59_WIDTH : INTEGER;
        CASE60 : STD_LOGIC_VECTOR (5 downto 0);
        din60_WIDTH : INTEGER;
        CASE61 : STD_LOGIC_VECTOR (5 downto 0);
        din61_WIDTH : INTEGER;
        CASE62 : STD_LOGIC_VECTOR (5 downto 0);
        din62_WIDTH : INTEGER;
        CASE63 : STD_LOGIC_VECTOR (5 downto 0);
        din63_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        din3 : IN STD_LOGIC_VECTOR (24 downto 0);
        din4 : IN STD_LOGIC_VECTOR (24 downto 0);
        din5 : IN STD_LOGIC_VECTOR (24 downto 0);
        din6 : IN STD_LOGIC_VECTOR (24 downto 0);
        din7 : IN STD_LOGIC_VECTOR (24 downto 0);
        din8 : IN STD_LOGIC_VECTOR (24 downto 0);
        din9 : IN STD_LOGIC_VECTOR (24 downto 0);
        din10 : IN STD_LOGIC_VECTOR (24 downto 0);
        din11 : IN STD_LOGIC_VECTOR (24 downto 0);
        din12 : IN STD_LOGIC_VECTOR (24 downto 0);
        din13 : IN STD_LOGIC_VECTOR (24 downto 0);
        din14 : IN STD_LOGIC_VECTOR (24 downto 0);
        din15 : IN STD_LOGIC_VECTOR (24 downto 0);
        din16 : IN STD_LOGIC_VECTOR (24 downto 0);
        din17 : IN STD_LOGIC_VECTOR (24 downto 0);
        din18 : IN STD_LOGIC_VECTOR (24 downto 0);
        din19 : IN STD_LOGIC_VECTOR (24 downto 0);
        din20 : IN STD_LOGIC_VECTOR (24 downto 0);
        din21 : IN STD_LOGIC_VECTOR (24 downto 0);
        din22 : IN STD_LOGIC_VECTOR (24 downto 0);
        din23 : IN STD_LOGIC_VECTOR (24 downto 0);
        din24 : IN STD_LOGIC_VECTOR (24 downto 0);
        din25 : IN STD_LOGIC_VECTOR (24 downto 0);
        din26 : IN STD_LOGIC_VECTOR (24 downto 0);
        din27 : IN STD_LOGIC_VECTOR (24 downto 0);
        din28 : IN STD_LOGIC_VECTOR (24 downto 0);
        din29 : IN STD_LOGIC_VECTOR (24 downto 0);
        din30 : IN STD_LOGIC_VECTOR (24 downto 0);
        din31 : IN STD_LOGIC_VECTOR (24 downto 0);
        din32 : IN STD_LOGIC_VECTOR (24 downto 0);
        din33 : IN STD_LOGIC_VECTOR (24 downto 0);
        din34 : IN STD_LOGIC_VECTOR (24 downto 0);
        din35 : IN STD_LOGIC_VECTOR (24 downto 0);
        din36 : IN STD_LOGIC_VECTOR (24 downto 0);
        din37 : IN STD_LOGIC_VECTOR (24 downto 0);
        din38 : IN STD_LOGIC_VECTOR (24 downto 0);
        din39 : IN STD_LOGIC_VECTOR (24 downto 0);
        din40 : IN STD_LOGIC_VECTOR (24 downto 0);
        din41 : IN STD_LOGIC_VECTOR (24 downto 0);
        din42 : IN STD_LOGIC_VECTOR (24 downto 0);
        din43 : IN STD_LOGIC_VECTOR (24 downto 0);
        din44 : IN STD_LOGIC_VECTOR (24 downto 0);
        din45 : IN STD_LOGIC_VECTOR (24 downto 0);
        din46 : IN STD_LOGIC_VECTOR (24 downto 0);
        din47 : IN STD_LOGIC_VECTOR (24 downto 0);
        din48 : IN STD_LOGIC_VECTOR (24 downto 0);
        din49 : IN STD_LOGIC_VECTOR (24 downto 0);
        din50 : IN STD_LOGIC_VECTOR (24 downto 0);
        din51 : IN STD_LOGIC_VECTOR (24 downto 0);
        din52 : IN STD_LOGIC_VECTOR (24 downto 0);
        din53 : IN STD_LOGIC_VECTOR (24 downto 0);
        din54 : IN STD_LOGIC_VECTOR (24 downto 0);
        din55 : IN STD_LOGIC_VECTOR (24 downto 0);
        din56 : IN STD_LOGIC_VECTOR (24 downto 0);
        din57 : IN STD_LOGIC_VECTOR (24 downto 0);
        din58 : IN STD_LOGIC_VECTOR (24 downto 0);
        din59 : IN STD_LOGIC_VECTOR (24 downto 0);
        din60 : IN STD_LOGIC_VECTOR (24 downto 0);
        din61 : IN STD_LOGIC_VECTOR (24 downto 0);
        din62 : IN STD_LOGIC_VECTOR (24 downto 0);
        din63 : IN STD_LOGIC_VECTOR (24 downto 0);
        def : IN STD_LOGIC_VECTOR (24 downto 0);
        sel : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component top_add_42ns_42ns_42_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_22ns_25s_47_1_1_U194 : component top_mul_22ns_25s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 25,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln79_fu_1201_p0,
        din1 => tmp_fu_1355_p131,
        dout => mul_ln79_fu_1201_p2);

    sparsemux_129_6_25_1_1_U195 : component top_sparsemux_129_6_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000000",
        din0_WIDTH => 25,
        CASE1 => "000001",
        din1_WIDTH => 25,
        CASE2 => "000010",
        din2_WIDTH => 25,
        CASE3 => "000011",
        din3_WIDTH => 25,
        CASE4 => "000100",
        din4_WIDTH => 25,
        CASE5 => "000101",
        din5_WIDTH => 25,
        CASE6 => "000110",
        din6_WIDTH => 25,
        CASE7 => "000111",
        din7_WIDTH => 25,
        CASE8 => "001000",
        din8_WIDTH => 25,
        CASE9 => "001001",
        din9_WIDTH => 25,
        CASE10 => "001010",
        din10_WIDTH => 25,
        CASE11 => "001011",
        din11_WIDTH => 25,
        CASE12 => "001100",
        din12_WIDTH => 25,
        CASE13 => "001101",
        din13_WIDTH => 25,
        CASE14 => "001110",
        din14_WIDTH => 25,
        CASE15 => "001111",
        din15_WIDTH => 25,
        CASE16 => "010000",
        din16_WIDTH => 25,
        CASE17 => "010001",
        din17_WIDTH => 25,
        CASE18 => "010010",
        din18_WIDTH => 25,
        CASE19 => "010011",
        din19_WIDTH => 25,
        CASE20 => "010100",
        din20_WIDTH => 25,
        CASE21 => "010101",
        din21_WIDTH => 25,
        CASE22 => "010110",
        din22_WIDTH => 25,
        CASE23 => "010111",
        din23_WIDTH => 25,
        CASE24 => "011000",
        din24_WIDTH => 25,
        CASE25 => "011001",
        din25_WIDTH => 25,
        CASE26 => "011010",
        din26_WIDTH => 25,
        CASE27 => "011011",
        din27_WIDTH => 25,
        CASE28 => "011100",
        din28_WIDTH => 25,
        CASE29 => "011101",
        din29_WIDTH => 25,
        CASE30 => "011110",
        din30_WIDTH => 25,
        CASE31 => "011111",
        din31_WIDTH => 25,
        CASE32 => "100000",
        din32_WIDTH => 25,
        CASE33 => "100001",
        din33_WIDTH => 25,
        CASE34 => "100010",
        din34_WIDTH => 25,
        CASE35 => "100011",
        din35_WIDTH => 25,
        CASE36 => "100100",
        din36_WIDTH => 25,
        CASE37 => "100101",
        din37_WIDTH => 25,
        CASE38 => "100110",
        din38_WIDTH => 25,
        CASE39 => "100111",
        din39_WIDTH => 25,
        CASE40 => "101000",
        din40_WIDTH => 25,
        CASE41 => "101001",
        din41_WIDTH => 25,
        CASE42 => "101010",
        din42_WIDTH => 25,
        CASE43 => "101011",
        din43_WIDTH => 25,
        CASE44 => "101100",
        din44_WIDTH => 25,
        CASE45 => "101101",
        din45_WIDTH => 25,
        CASE46 => "101110",
        din46_WIDTH => 25,
        CASE47 => "101111",
        din47_WIDTH => 25,
        CASE48 => "110000",
        din48_WIDTH => 25,
        CASE49 => "110001",
        din49_WIDTH => 25,
        CASE50 => "110010",
        din50_WIDTH => 25,
        CASE51 => "110011",
        din51_WIDTH => 25,
        CASE52 => "110100",
        din52_WIDTH => 25,
        CASE53 => "110101",
        din53_WIDTH => 25,
        CASE54 => "110110",
        din54_WIDTH => 25,
        CASE55 => "110111",
        din55_WIDTH => 25,
        CASE56 => "111000",
        din56_WIDTH => 25,
        CASE57 => "111001",
        din57_WIDTH => 25,
        CASE58 => "111010",
        din58_WIDTH => 25,
        CASE59 => "111011",
        din59_WIDTH => 25,
        CASE60 => "111100",
        din60_WIDTH => 25,
        CASE61 => "111101",
        din61_WIDTH => 25,
        CASE62 => "111110",
        din62_WIDTH => 25,
        CASE63 => "111111",
        din63_WIDTH => 25,
        def_WIDTH => 25,
        sel_WIDTH => 6,
        dout_WIDTH => 25)
    port map (
        din0 => weights_0_q0,
        din1 => weights_1_q0,
        din2 => weights_2_q0,
        din3 => weights_3_q0,
        din4 => weights_4_q0,
        din5 => weights_5_q0,
        din6 => weights_6_q0,
        din7 => weights_7_q0,
        din8 => weights_8_q0,
        din9 => weights_9_q0,
        din10 => weights_10_q0,
        din11 => weights_11_q0,
        din12 => weights_12_q0,
        din13 => weights_13_q0,
        din14 => weights_14_q0,
        din15 => weights_15_q0,
        din16 => weights_16_q0,
        din17 => weights_17_q0,
        din18 => weights_18_q0,
        din19 => weights_19_q0,
        din20 => weights_20_q0,
        din21 => weights_21_q0,
        din22 => weights_22_q0,
        din23 => weights_23_q0,
        din24 => weights_24_q0,
        din25 => weights_25_q0,
        din26 => weights_26_q0,
        din27 => weights_27_q0,
        din28 => weights_28_q0,
        din29 => weights_29_q0,
        din30 => weights_30_q0,
        din31 => weights_31_q0,
        din32 => weights_32_q0,
        din33 => weights_33_q0,
        din34 => weights_34_q0,
        din35 => weights_35_q0,
        din36 => weights_36_q0,
        din37 => weights_37_q0,
        din38 => weights_38_q0,
        din39 => weights_39_q0,
        din40 => weights_40_q0,
        din41 => weights_41_q0,
        din42 => weights_42_q0,
        din43 => weights_43_q0,
        din44 => weights_44_q0,
        din45 => weights_45_q0,
        din46 => weights_46_q0,
        din47 => weights_47_q0,
        din48 => weights_48_q0,
        din49 => weights_49_q0,
        din50 => weights_50_q0,
        din51 => weights_51_q0,
        din52 => weights_52_q0,
        din53 => weights_53_q0,
        din54 => weights_54_q0,
        din55 => weights_55_q0,
        din56 => weights_56_q0,
        din57 => weights_57_q0,
        din58 => weights_58_q0,
        din59 => weights_59_q0,
        din60 => weights_60_q0,
        din61 => weights_61_q0,
        din62 => weights_62_q0,
        din63 => weights_63_q0,
        def => tmp_fu_1355_p129,
        sel => trunc_ln74_reg_2064,
        dout => tmp_fu_1355_p131);

    add_42ns_42ns_42_1_1_U196 : component top_add_42ns_42ns_42_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 42,
        din1_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        din0 => add_ln79_fu_1647_p0,
        din1 => add_ln79_fu_1647_p1,
        dout => add_ln79_fu_1647_p2);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_336 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_fu_336 <= select_ln71_3_reg_1739;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_340 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_fu_340 <= add_ln71_reg_1724;
            end if; 
        end if;
    end process;

    k_fu_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_fu_332 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                k_fu_332 <= k_2_fu_1664_p2;
            end if; 
        end if;
    end process;

    temp_fu_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                temp_fu_328 <= ap_const_lv25_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                temp_fu_328 <= add_ln79_fu_1647_p2(41 downto 17);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                C_0_addr_reg_2074 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
                add_ln71_reg_1724 <= add_ln71_fu_1234_p2;
                icmp_ln74_reg_1729 <= icmp_ln74_fu_1252_p2;
                select_ln71_3_reg_1739 <= select_ln71_3_fu_1266_p3;
                select_ln71_reg_1734 <= select_ln71_fu_1258_p3;
                trunc_ln74_reg_2064 <= trunc_ln74_fu_1348_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_1228_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln71_fu_1228_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    C_0_address0 <= C_0_addr_reg_2074;
    C_0_ce0 <= C_0_ce0_local;

    C_0_ce0_local_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_0_ce0_local <= ap_const_logic_1;
        else 
            C_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    C_0_d0 <= add_ln79_fu_1647_p2(41 downto 17);
    C_0_we0 <= C_0_we0_local;

    C_0_we0_local_assign_proc : process(ap_CS_fsm_state2, icmp_ln74_2_fu_1669_p2)
    begin
        if (((icmp_ln74_2_fu_1669_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            C_0_we0_local <= ap_const_logic_1;
        else 
            C_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln71_fu_1234_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln79_fu_1647_p0 <= (select_ln71_4_fu_1628_p3 & ap_const_lv17_0);
    add_ln79_fu_1647_p1 <= mul_ln79_fu_1201_p2(42 - 1 downto 0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_1228_p2)
    begin
        if (((icmp_ln71_fu_1228_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_336)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_336;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_340)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_340;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, k_fu_332)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_332;
        end if; 
    end process;

    i_18_fu_1246_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    icmp_ln71_fu_1228_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_200) else "0";
    icmp_ln74_2_fu_1669_p2 <= "1" when (k_2_fu_1664_p2 = ap_const_lv7_40) else "0";
    icmp_ln74_fu_1252_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv7_40) else "0";
    input_0_address0 <= zext_ln74_fu_1343_p1(6 - 1 downto 0);
    input_0_ce0 <= input_0_ce0_local;

    input_0_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_0_ce0_local <= ap_const_logic_1;
        else 
            input_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    k_2_fu_1664_p2 <= std_logic_vector(unsigned(select_ln71_reg_1734) + unsigned(ap_const_lv7_1));
    mul_ln79_fu_1201_p0 <= mul_ln79_fu_1201_p00(22 - 1 downto 0);
    mul_ln79_fu_1201_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_0_q0),47));
    select_ln71_3_fu_1266_p3 <= 
        i_18_fu_1246_p2 when (icmp_ln74_fu_1252_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln71_4_fu_1628_p3 <= 
        ap_const_lv25_0 when (icmp_ln74_reg_1729(0) = '1') else 
        temp_fu_328;
    select_ln71_fu_1258_p3 <= 
        ap_const_lv7_0 when (icmp_ln74_fu_1252_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    tmp_fu_1355_p129 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln74_fu_1348_p1 <= select_ln71_fu_1258_p3(6 - 1 downto 0);
    weights_0_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_0_ce0 <= weights_0_ce0_local;

    weights_0_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_0_ce0_local <= ap_const_logic_1;
        else 
            weights_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_10_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_10_ce0 <= weights_10_ce0_local;

    weights_10_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_10_ce0_local <= ap_const_logic_1;
        else 
            weights_10_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_11_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_11_ce0 <= weights_11_ce0_local;

    weights_11_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_11_ce0_local <= ap_const_logic_1;
        else 
            weights_11_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_12_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_12_ce0 <= weights_12_ce0_local;

    weights_12_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_12_ce0_local <= ap_const_logic_1;
        else 
            weights_12_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_13_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_13_ce0 <= weights_13_ce0_local;

    weights_13_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_13_ce0_local <= ap_const_logic_1;
        else 
            weights_13_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_14_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_14_ce0 <= weights_14_ce0_local;

    weights_14_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_14_ce0_local <= ap_const_logic_1;
        else 
            weights_14_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_15_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_15_ce0 <= weights_15_ce0_local;

    weights_15_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_15_ce0_local <= ap_const_logic_1;
        else 
            weights_15_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_16_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_16_ce0 <= weights_16_ce0_local;

    weights_16_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_16_ce0_local <= ap_const_logic_1;
        else 
            weights_16_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_17_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_17_ce0 <= weights_17_ce0_local;

    weights_17_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_17_ce0_local <= ap_const_logic_1;
        else 
            weights_17_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_18_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_18_ce0 <= weights_18_ce0_local;

    weights_18_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_18_ce0_local <= ap_const_logic_1;
        else 
            weights_18_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_19_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_19_ce0 <= weights_19_ce0_local;

    weights_19_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_19_ce0_local <= ap_const_logic_1;
        else 
            weights_19_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_1_ce0 <= weights_1_ce0_local;

    weights_1_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_1_ce0_local <= ap_const_logic_1;
        else 
            weights_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_20_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_20_ce0 <= weights_20_ce0_local;

    weights_20_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_20_ce0_local <= ap_const_logic_1;
        else 
            weights_20_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_21_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_21_ce0 <= weights_21_ce0_local;

    weights_21_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_21_ce0_local <= ap_const_logic_1;
        else 
            weights_21_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_22_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_22_ce0 <= weights_22_ce0_local;

    weights_22_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_22_ce0_local <= ap_const_logic_1;
        else 
            weights_22_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_23_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_23_ce0 <= weights_23_ce0_local;

    weights_23_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_23_ce0_local <= ap_const_logic_1;
        else 
            weights_23_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_24_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_24_ce0 <= weights_24_ce0_local;

    weights_24_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_24_ce0_local <= ap_const_logic_1;
        else 
            weights_24_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_25_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_25_ce0 <= weights_25_ce0_local;

    weights_25_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_25_ce0_local <= ap_const_logic_1;
        else 
            weights_25_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_26_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_26_ce0 <= weights_26_ce0_local;

    weights_26_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_26_ce0_local <= ap_const_logic_1;
        else 
            weights_26_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_27_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_27_ce0 <= weights_27_ce0_local;

    weights_27_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_27_ce0_local <= ap_const_logic_1;
        else 
            weights_27_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_28_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_28_ce0 <= weights_28_ce0_local;

    weights_28_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_28_ce0_local <= ap_const_logic_1;
        else 
            weights_28_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_29_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_29_ce0 <= weights_29_ce0_local;

    weights_29_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_29_ce0_local <= ap_const_logic_1;
        else 
            weights_29_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_2_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_2_ce0 <= weights_2_ce0_local;

    weights_2_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_2_ce0_local <= ap_const_logic_1;
        else 
            weights_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_30_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_30_ce0 <= weights_30_ce0_local;

    weights_30_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_30_ce0_local <= ap_const_logic_1;
        else 
            weights_30_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_31_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_31_ce0 <= weights_31_ce0_local;

    weights_31_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_31_ce0_local <= ap_const_logic_1;
        else 
            weights_31_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_32_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_32_ce0 <= weights_32_ce0_local;

    weights_32_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_32_ce0_local <= ap_const_logic_1;
        else 
            weights_32_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_33_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_33_ce0 <= weights_33_ce0_local;

    weights_33_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_33_ce0_local <= ap_const_logic_1;
        else 
            weights_33_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_34_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_34_ce0 <= weights_34_ce0_local;

    weights_34_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_34_ce0_local <= ap_const_logic_1;
        else 
            weights_34_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_35_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_35_ce0 <= weights_35_ce0_local;

    weights_35_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_35_ce0_local <= ap_const_logic_1;
        else 
            weights_35_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_36_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_36_ce0 <= weights_36_ce0_local;

    weights_36_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_36_ce0_local <= ap_const_logic_1;
        else 
            weights_36_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_37_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_37_ce0 <= weights_37_ce0_local;

    weights_37_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_37_ce0_local <= ap_const_logic_1;
        else 
            weights_37_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_38_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_38_ce0 <= weights_38_ce0_local;

    weights_38_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_38_ce0_local <= ap_const_logic_1;
        else 
            weights_38_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_39_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_39_ce0 <= weights_39_ce0_local;

    weights_39_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_39_ce0_local <= ap_const_logic_1;
        else 
            weights_39_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_3_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_3_ce0 <= weights_3_ce0_local;

    weights_3_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_3_ce0_local <= ap_const_logic_1;
        else 
            weights_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_40_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_40_ce0 <= weights_40_ce0_local;

    weights_40_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_40_ce0_local <= ap_const_logic_1;
        else 
            weights_40_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_41_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_41_ce0 <= weights_41_ce0_local;

    weights_41_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_41_ce0_local <= ap_const_logic_1;
        else 
            weights_41_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_42_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_42_ce0 <= weights_42_ce0_local;

    weights_42_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_42_ce0_local <= ap_const_logic_1;
        else 
            weights_42_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_43_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_43_ce0 <= weights_43_ce0_local;

    weights_43_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_43_ce0_local <= ap_const_logic_1;
        else 
            weights_43_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_44_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_44_ce0 <= weights_44_ce0_local;

    weights_44_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_44_ce0_local <= ap_const_logic_1;
        else 
            weights_44_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_45_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_45_ce0 <= weights_45_ce0_local;

    weights_45_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_45_ce0_local <= ap_const_logic_1;
        else 
            weights_45_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_46_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_46_ce0 <= weights_46_ce0_local;

    weights_46_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_46_ce0_local <= ap_const_logic_1;
        else 
            weights_46_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_47_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_47_ce0 <= weights_47_ce0_local;

    weights_47_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_47_ce0_local <= ap_const_logic_1;
        else 
            weights_47_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_48_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_48_ce0 <= weights_48_ce0_local;

    weights_48_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_48_ce0_local <= ap_const_logic_1;
        else 
            weights_48_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_49_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_49_ce0 <= weights_49_ce0_local;

    weights_49_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_49_ce0_local <= ap_const_logic_1;
        else 
            weights_49_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_4_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_4_ce0 <= weights_4_ce0_local;

    weights_4_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_4_ce0_local <= ap_const_logic_1;
        else 
            weights_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_50_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_50_ce0 <= weights_50_ce0_local;

    weights_50_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_50_ce0_local <= ap_const_logic_1;
        else 
            weights_50_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_51_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_51_ce0 <= weights_51_ce0_local;

    weights_51_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_51_ce0_local <= ap_const_logic_1;
        else 
            weights_51_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_52_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_52_ce0 <= weights_52_ce0_local;

    weights_52_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_52_ce0_local <= ap_const_logic_1;
        else 
            weights_52_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_53_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_53_ce0 <= weights_53_ce0_local;

    weights_53_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_53_ce0_local <= ap_const_logic_1;
        else 
            weights_53_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_54_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_54_ce0 <= weights_54_ce0_local;

    weights_54_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_54_ce0_local <= ap_const_logic_1;
        else 
            weights_54_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_55_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_55_ce0 <= weights_55_ce0_local;

    weights_55_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_55_ce0_local <= ap_const_logic_1;
        else 
            weights_55_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_56_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_56_ce0 <= weights_56_ce0_local;

    weights_56_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_56_ce0_local <= ap_const_logic_1;
        else 
            weights_56_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_57_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_57_ce0 <= weights_57_ce0_local;

    weights_57_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_57_ce0_local <= ap_const_logic_1;
        else 
            weights_57_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_58_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_58_ce0 <= weights_58_ce0_local;

    weights_58_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_58_ce0_local <= ap_const_logic_1;
        else 
            weights_58_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_59_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_59_ce0 <= weights_59_ce0_local;

    weights_59_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_59_ce0_local <= ap_const_logic_1;
        else 
            weights_59_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_5_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_5_ce0 <= weights_5_ce0_local;

    weights_5_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_5_ce0_local <= ap_const_logic_1;
        else 
            weights_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_60_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_60_ce0 <= weights_60_ce0_local;

    weights_60_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_60_ce0_local <= ap_const_logic_1;
        else 
            weights_60_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_61_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_61_ce0 <= weights_61_ce0_local;

    weights_61_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_61_ce0_local <= ap_const_logic_1;
        else 
            weights_61_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_62_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_62_ce0 <= weights_62_ce0_local;

    weights_62_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_62_ce0_local <= ap_const_logic_1;
        else 
            weights_62_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_63_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_63_ce0 <= weights_63_ce0_local;

    weights_63_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_63_ce0_local <= ap_const_logic_1;
        else 
            weights_63_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_6_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_6_ce0 <= weights_6_ce0_local;

    weights_6_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_6_ce0_local <= ap_const_logic_1;
        else 
            weights_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_7_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_7_ce0 <= weights_7_ce0_local;

    weights_7_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_7_ce0_local <= ap_const_logic_1;
        else 
            weights_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_8_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_8_ce0 <= weights_8_ce0_local;

    weights_8_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_8_ce0_local <= ap_const_logic_1;
        else 
            weights_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_9_address0 <= zext_ln71_fu_1274_p1(3 - 1 downto 0);
    weights_9_ce0 <= weights_9_ce0_local;

    weights_9_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_9_ce0_local <= ap_const_logic_1;
        else 
            weights_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln71_fu_1274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln71_3_fu_1266_p3),64));
    zext_ln74_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln71_fu_1258_p3),64));
end behav;
