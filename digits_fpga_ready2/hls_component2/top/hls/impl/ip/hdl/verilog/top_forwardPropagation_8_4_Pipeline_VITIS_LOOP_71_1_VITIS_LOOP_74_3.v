// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_forwardPropagation_8_4_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights_0_address0,
        weights_0_ce0,
        weights_0_q0,
        weights_1_address0,
        weights_1_ce0,
        weights_1_q0,
        weights_2_address0,
        weights_2_ce0,
        weights_2_q0,
        weights_3_address0,
        weights_3_ce0,
        weights_3_q0,
        weights_4_address0,
        weights_4_ce0,
        weights_4_q0,
        weights_5_address0,
        weights_5_ce0,
        weights_5_q0,
        weights_6_address0,
        weights_6_ce0,
        weights_6_q0,
        weights_7_address0,
        weights_7_ce0,
        weights_7_q0,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        C_16_load_out,
        C_16_load_out_ap_vld,
        C_14_load_out,
        C_14_load_out_ap_vld,
        C_12_load_out,
        C_12_load_out_ap_vld,
        C_load_out,
        C_load_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] weights_0_address0;
output   weights_0_ce0;
input  [24:0] weights_0_q0;
output  [1:0] weights_1_address0;
output   weights_1_ce0;
input  [24:0] weights_1_q0;
output  [1:0] weights_2_address0;
output   weights_2_ce0;
input  [24:0] weights_2_q0;
output  [1:0] weights_3_address0;
output   weights_3_ce0;
input  [24:0] weights_3_q0;
output  [1:0] weights_4_address0;
output   weights_4_ce0;
input  [24:0] weights_4_q0;
output  [1:0] weights_5_address0;
output   weights_5_ce0;
input  [24:0] weights_5_q0;
output  [1:0] weights_6_address0;
output   weights_6_ce0;
input  [24:0] weights_6_q0;
output  [1:0] weights_7_address0;
output   weights_7_ce0;
input  [24:0] weights_7_q0;
output  [2:0] input_0_address0;
output   input_0_ce0;
input  [23:0] input_0_q0;
output  [24:0] C_16_load_out;
output   C_16_load_out_ap_vld;
output  [24:0] C_14_load_out;
output   C_14_load_out_ap_vld;
output  [24:0] C_12_load_out;
output   C_12_load_out_ap_vld;
output  [24:0] C_load_out;
output   C_load_out_ap_vld;

reg ap_idle;
reg C_16_load_out_ap_vld;
reg C_14_load_out_ap_vld;
reg C_12_load_out_ap_vld;
reg C_load_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln71_fu_338_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln71_fu_344_p2;
reg   [5:0] add_ln71_reg_620;
wire   [0:0] icmp_ln74_fu_362_p2;
reg   [0:0] icmp_ln74_reg_625;
wire   [3:0] select_ln71_fu_368_p3;
reg   [3:0] select_ln71_reg_630;
wire   [2:0] select_ln71_1_fu_376_p3;
reg   [2:0] select_ln71_1_reg_635;
wire   [1:0] trunc_ln71_fu_396_p1;
reg   [1:0] trunc_ln71_reg_640;
wire   [2:0] trunc_ln74_fu_405_p1;
reg   [2:0] trunc_ln74_reg_684;
wire   [63:0] zext_ln71_fu_384_p1;
wire   [63:0] zext_ln74_fu_400_p1;
reg   [24:0] C_fu_114;
wire    ap_loop_init;
reg   [3:0] k_fu_118;
wire   [3:0] k_1_fu_496_p2;
reg   [3:0] ap_sig_allocacmp_k_load;
reg   [2:0] i_fu_122;
reg   [2:0] ap_sig_allocacmp_i_load;
reg   [5:0] indvar_flatten_fu_126;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [24:0] C_load_fu_130;
wire   [0:0] icmp_ln74_1_fu_501_p2;
reg   [24:0] C_12_load_fu_134;
reg   [24:0] C_14_load_fu_138;
reg   [24:0] C_16_load_fu_142;
reg    weights_0_ce0_local;
reg    weights_1_ce0_local;
reg    weights_2_ce0_local;
reg    weights_3_ce0_local;
reg    weights_4_ce0_local;
reg    weights_5_ce0_local;
reg    weights_6_ce0_local;
reg    weights_7_ce0_local;
reg    input_0_ce0_local;
wire   [23:0] mul_ln79_fu_291_p0;
wire   [2:0] i_14_fu_356_p2;
wire   [24:0] tmp_6_fu_412_p17;
wire  signed [24:0] tmp_6_fu_412_p19;
wire   [24:0] select_ln71_2_fu_461_p3;
wire   [48:0] mul_ln79_fu_291_p2;
wire   [41:0] add_ln79_fu_480_p0;
wire   [41:0] add_ln79_fu_480_p1;
wire   [41:0] add_ln79_fu_480_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [48:0] mul_ln79_fu_291_p00;
wire   [2:0] tmp_6_fu_412_p1;
wire   [2:0] tmp_6_fu_412_p3;
wire   [2:0] tmp_6_fu_412_p5;
wire   [2:0] tmp_6_fu_412_p7;
wire  signed [2:0] tmp_6_fu_412_p9;
wire  signed [2:0] tmp_6_fu_412_p11;
wire  signed [2:0] tmp_6_fu_412_p13;
wire  signed [2:0] tmp_6_fu_412_p15;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 C_fu_114 = 25'd0;
#0 k_fu_118 = 4'd0;
#0 i_fu_122 = 3'd0;
#0 indvar_flatten_fu_126 = 6'd0;
#0 C_load_fu_130 = 25'd0;
#0 C_12_load_fu_134 = 25'd0;
#0 C_14_load_fu_138 = 25'd0;
#0 C_16_load_fu_142 = 25'd0;
#0 ap_done_reg = 1'b0;
end

top_mul_24ns_25s_49_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 49 ))
mul_24ns_25s_49_1_1_U340(
    .din0(mul_ln79_fu_291_p0),
    .din1(tmp_6_fu_412_p19),
    .dout(mul_ln79_fu_291_p2)
);

(* dissolve_hierarchy = "yes" *) top_sparsemux_17_3_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 25 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 25 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 25 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 25 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 25 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 25 ),
    .CASE6( 3'h6 ),
    .din6_WIDTH( 25 ),
    .CASE7( 3'h7 ),
    .din7_WIDTH( 25 ),
    .def_WIDTH( 25 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 25 ))
sparsemux_17_3_25_1_1_U341(
    .din0(weights_0_q0),
    .din1(weights_1_q0),
    .din2(weights_2_q0),
    .din3(weights_3_q0),
    .din4(weights_4_q0),
    .din5(weights_5_q0),
    .din6(weights_6_q0),
    .din7(weights_7_q0),
    .def(tmp_6_fu_412_p17),
    .sel(trunc_ln74_reg_684),
    .dout(tmp_6_fu_412_p19)
);

top_add_42ns_42ns_42_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 42 ),
    .din1_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
add_42ns_42ns_42_1_1_U342(
    .din0(add_ln79_fu_480_p0),
    .din1(add_ln79_fu_480_p1),
    .dout(add_ln79_fu_480_p2)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        C_12_load_fu_134 <= 25'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln74_1_fu_501_p2 == 1'd1) & (trunc_ln71_reg_640 == 2'd1))) begin
        C_12_load_fu_134 <= {{add_ln79_fu_480_p2[41:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        C_14_load_fu_138 <= 25'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln74_1_fu_501_p2 == 1'd1) & (trunc_ln71_reg_640 == 2'd2))) begin
        C_14_load_fu_138 <= {{add_ln79_fu_480_p2[41:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        C_16_load_fu_142 <= 25'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln74_1_fu_501_p2 == 1'd1) & (trunc_ln71_reg_640 == 2'd3))) begin
        C_16_load_fu_142 <= {{add_ln79_fu_480_p2[41:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        C_fu_114 <= 25'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C_fu_114 <= {{add_ln79_fu_480_p2[41:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        C_load_fu_130 <= 25'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln74_1_fu_501_p2 == 1'd1) & (trunc_ln71_reg_640 == 2'd0))) begin
        C_load_fu_130 <= {{add_ln79_fu_480_p2[41:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_122 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_fu_122 <= select_ln71_1_reg_635;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_126 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_fu_126 <= add_ln71_reg_620;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        k_fu_118 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_fu_118 <= k_1_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln71_reg_620 <= add_ln71_fu_344_p2;
        icmp_ln74_reg_625 <= icmp_ln74_fu_362_p2;
        select_ln71_1_reg_635 <= select_ln71_1_fu_376_p3;
        select_ln71_reg_630 <= select_ln71_fu_368_p3;
        trunc_ln71_reg_640 <= trunc_ln71_fu_396_p1;
        trunc_ln74_reg_684 <= trunc_ln74_fu_405_p1;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln71_fu_338_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        C_12_load_out_ap_vld = 1'b1;
    end else begin
        C_12_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln71_fu_338_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        C_14_load_out_ap_vld = 1'b1;
    end else begin
        C_14_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln71_fu_338_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        C_16_load_out_ap_vld = 1'b1;
    end else begin
        C_16_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln71_fu_338_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        C_load_out_ap_vld = 1'b1;
    end else begin
        C_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln71_fu_338_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_122;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_126;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_load = 4'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_0_ce0_local = 1'b1;
    end else begin
        input_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_0_ce0_local = 1'b1;
    end else begin
        weights_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_ce0_local = 1'b1;
    end else begin
        weights_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_2_ce0_local = 1'b1;
    end else begin
        weights_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_3_ce0_local = 1'b1;
    end else begin
        weights_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_4_ce0_local = 1'b1;
    end else begin
        weights_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_5_ce0_local = 1'b1;
    end else begin
        weights_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_6_ce0_local = 1'b1;
    end else begin
        weights_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_7_ce0_local = 1'b1;
    end else begin
        weights_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln71_fu_338_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_12_load_out = C_12_load_fu_134;

assign C_14_load_out = C_14_load_fu_138;

assign C_16_load_out = C_16_load_fu_142;

assign C_load_out = C_load_fu_130;

assign add_ln71_fu_344_p2 = (ap_sig_allocacmp_indvar_flatten_load + 6'd1);

assign add_ln79_fu_480_p0 = {{select_ln71_2_fu_461_p3}, {17'd0}};

assign add_ln79_fu_480_p1 = mul_ln79_fu_291_p2[41:0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_14_fu_356_p2 = (ap_sig_allocacmp_i_load + 3'd1);

assign icmp_ln71_fu_338_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln74_1_fu_501_p2 = ((k_1_fu_496_p2 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_362_p2 = ((ap_sig_allocacmp_k_load == 4'd8) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln74_fu_400_p1;

assign input_0_ce0 = input_0_ce0_local;

assign k_1_fu_496_p2 = (select_ln71_reg_630 + 4'd1);

assign mul_ln79_fu_291_p0 = mul_ln79_fu_291_p00;

assign mul_ln79_fu_291_p00 = input_0_q0;

assign select_ln71_1_fu_376_p3 = ((icmp_ln74_fu_362_p2[0:0] == 1'b1) ? i_14_fu_356_p2 : ap_sig_allocacmp_i_load);

assign select_ln71_2_fu_461_p3 = ((icmp_ln74_reg_625[0:0] == 1'b1) ? 25'd0 : C_fu_114);

assign select_ln71_fu_368_p3 = ((icmp_ln74_fu_362_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_k_load);

assign tmp_6_fu_412_p17 = 'bx;

assign trunc_ln71_fu_396_p1 = select_ln71_1_fu_376_p3[1:0];

assign trunc_ln74_fu_405_p1 = select_ln71_fu_368_p3[2:0];

assign weights_0_address0 = zext_ln71_fu_384_p1;

assign weights_0_ce0 = weights_0_ce0_local;

assign weights_1_address0 = zext_ln71_fu_384_p1;

assign weights_1_ce0 = weights_1_ce0_local;

assign weights_2_address0 = zext_ln71_fu_384_p1;

assign weights_2_ce0 = weights_2_ce0_local;

assign weights_3_address0 = zext_ln71_fu_384_p1;

assign weights_3_ce0 = weights_3_ce0_local;

assign weights_4_address0 = zext_ln71_fu_384_p1;

assign weights_4_ce0 = weights_4_ce0_local;

assign weights_5_address0 = zext_ln71_fu_384_p1;

assign weights_5_ce0 = weights_5_ce0_local;

assign weights_6_address0 = zext_ln71_fu_384_p1;

assign weights_6_ce0 = weights_6_ce0_local;

assign weights_7_address0 = zext_ln71_fu_384_p1;

assign weights_7_ce0 = weights_7_ce0_local;

assign zext_ln71_fu_384_p1 = select_ln71_1_fu_376_p3;

assign zext_ln74_fu_400_p1 = select_ln71_fu_368_p3;

endmodule //top_forwardPropagation_8_4_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3
