// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_backProp_64_8_4_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_l_plus1_T_address0,
        w_l_plus1_T_ce0,
        w_l_plus1_T_q0,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        agg_result_0_address0,
        agg_result_0_ce0,
        agg_result_0_we0,
        agg_result_0_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] w_l_plus1_T_address0;
output   w_l_plus1_T_ce0;
input  [24:0] w_l_plus1_T_q0;
input  [24:0] p_read;
input  [24:0] p_read1;
input  [24:0] p_read2;
input  [24:0] p_read3;
output  [2:0] agg_result_0_address0;
output   agg_result_0_ce0;
output   agg_result_0_we0;
output  [24:0] agg_result_0_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln71_fu_185_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln71_fu_191_p2;
reg   [5:0] add_ln71_reg_398;
wire   [0:0] icmp_ln74_fu_209_p2;
reg   [0:0] icmp_ln74_reg_403;
wire   [2:0] select_ln71_fu_215_p3;
reg   [2:0] select_ln71_reg_408;
wire   [3:0] select_ln71_11_fu_223_p3;
reg   [3:0] select_ln71_11_reg_413;
wire   [24:0] tmp_s_fu_262_p11;
reg  signed [24:0] tmp_s_reg_424;
wire   [63:0] zext_ln79_2_fu_253_p1;
wire   [63:0] zext_ln71_fu_289_p1;
reg   [24:0] temp_fu_92;
wire    ap_loop_init;
reg   [2:0] k_fu_96;
wire   [2:0] k_7_fu_338_p2;
reg   [2:0] ap_sig_allocacmp_k_load;
reg   [3:0] i_30_fu_100;
reg   [3:0] ap_sig_allocacmp_i_30_load;
reg   [5:0] indvar_flatten6_fu_104;
reg   [5:0] ap_sig_allocacmp_indvar_flatten6_load;
reg    w_l_plus1_T_ce0_local;
reg    agg_result_0_we0_local;
wire   [0:0] icmp_ln74_6_fu_343_p2;
reg    agg_result_0_ce0_local;
wire   [3:0] i_fu_203_p2;
wire   [2:0] trunc_ln71_fu_231_p1;
wire   [4:0] tmp_3_fu_235_p3;
wire   [4:0] zext_ln79_fu_243_p1;
wire   [4:0] add_ln79_2_fu_247_p2;
wire   [24:0] tmp_s_fu_262_p9;
wire   [1:0] tmp_s_fu_262_p10;
wire   [24:0] select_ln71_12_fu_302_p3;
wire   [49:0] mul_ln79_fu_158_p2;
wire   [41:0] add_ln79_fu_321_p0;
wire   [41:0] add_ln79_fu_321_p1;
wire   [41:0] add_ln79_fu_321_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] tmp_s_fu_262_p1;
wire   [1:0] tmp_s_fu_262_p3;
wire  signed [1:0] tmp_s_fu_262_p5;
wire  signed [1:0] tmp_s_fu_262_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 temp_fu_92 = 25'd0;
#0 k_fu_96 = 3'd0;
#0 i_30_fu_100 = 4'd0;
#0 indvar_flatten6_fu_104 = 6'd0;
#0 ap_done_reg = 1'b0;
end

top_mul_25s_25s_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25s_25s_50_1_1_U557(
    .din0(tmp_s_reg_424),
    .din1(w_l_plus1_T_q0),
    .dout(mul_ln79_fu_158_p2)
);

(* dissolve_hierarchy = "yes" *) top_sparsemux_9_2_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 25 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 25 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 25 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 25 ),
    .def_WIDTH( 25 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 25 ))
sparsemux_9_2_25_1_1_U558(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .def(tmp_s_fu_262_p9),
    .sel(tmp_s_fu_262_p10),
    .dout(tmp_s_fu_262_p11)
);

top_add_42ns_42ns_42_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 42 ),
    .din1_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
add_42ns_42ns_42_1_1_U559(
    .din0(add_ln79_fu_321_p0),
    .din1(add_ln79_fu_321_p1),
    .dout(add_ln79_fu_321_p2)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_30_fu_100 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_30_fu_100 <= select_ln71_11_reg_413;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten6_fu_104 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten6_fu_104 <= add_ln71_reg_398;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        k_fu_96 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_fu_96 <= k_7_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        temp_fu_92 <= 25'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_fu_92 <= {{add_ln79_fu_321_p2[41:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln71_reg_398 <= add_ln71_fu_191_p2;
        icmp_ln74_reg_403 <= icmp_ln74_fu_209_p2;
        select_ln71_11_reg_413 <= select_ln71_11_fu_223_p3;
        select_ln71_reg_408 <= select_ln71_fu_215_p3;
        tmp_s_reg_424 <= tmp_s_fu_262_p11;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        agg_result_0_ce0_local = 1'b1;
    end else begin
        agg_result_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln74_6_fu_343_p2 == 1'd1))) begin
        agg_result_0_we0_local = 1'b1;
    end else begin
        agg_result_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln71_fu_185_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_30_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_30_load = i_30_fu_100;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_104;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_k_load = 3'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        w_l_plus1_T_ce0_local = 1'b1;
    end else begin
        w_l_plus1_T_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln71_fu_185_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_fu_191_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 6'd1);

assign add_ln79_2_fu_247_p2 = (tmp_3_fu_235_p3 + zext_ln79_fu_243_p1);

assign add_ln79_fu_321_p0 = {{select_ln71_12_fu_302_p3}, {17'd0}};

assign add_ln79_fu_321_p1 = mul_ln79_fu_158_p2[41:0];

assign agg_result_0_address0 = zext_ln71_fu_289_p1;

assign agg_result_0_ce0 = agg_result_0_ce0_local;

assign agg_result_0_d0 = {{add_ln79_fu_321_p2[41:17]}};

assign agg_result_0_we0 = agg_result_0_we0_local;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_fu_203_p2 = (ap_sig_allocacmp_i_30_load + 4'd1);

assign icmp_ln71_fu_185_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln74_6_fu_343_p2 = ((k_7_fu_338_p2 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_209_p2 = ((ap_sig_allocacmp_k_load == 3'd4) ? 1'b1 : 1'b0);

assign k_7_fu_338_p2 = (select_ln71_reg_408 + 3'd1);

assign select_ln71_11_fu_223_p3 = ((icmp_ln74_fu_209_p2[0:0] == 1'b1) ? i_fu_203_p2 : ap_sig_allocacmp_i_30_load);

assign select_ln71_12_fu_302_p3 = ((icmp_ln74_reg_403[0:0] == 1'b1) ? 25'd0 : temp_fu_92);

assign select_ln71_fu_215_p3 = ((icmp_ln74_fu_209_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_k_load);

assign tmp_3_fu_235_p3 = {{trunc_ln71_fu_231_p1}, {2'd0}};

assign tmp_s_fu_262_p10 = select_ln71_fu_215_p3[1:0];

assign tmp_s_fu_262_p9 = 'bx;

assign trunc_ln71_fu_231_p1 = select_ln71_11_fu_223_p3[2:0];

assign w_l_plus1_T_address0 = zext_ln79_2_fu_253_p1;

assign w_l_plus1_T_ce0 = w_l_plus1_T_ce0_local;

assign zext_ln71_fu_289_p1 = select_ln71_11_reg_413;

assign zext_ln79_2_fu_253_p1 = add_ln79_2_fu_247_p2;

assign zext_ln79_fu_243_p1 = select_ln71_fu_215_p3;

endmodule //top_backProp_64_8_4_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3
