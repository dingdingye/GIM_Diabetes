// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_forwardPropagation_64_8_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights_0_address0,
        weights_0_ce0,
        weights_0_q0,
        weights_1_address0,
        weights_1_ce0,
        weights_1_q0,
        weights_2_address0,
        weights_2_ce0,
        weights_2_q0,
        weights_3_address0,
        weights_3_ce0,
        weights_3_q0,
        weights_4_address0,
        weights_4_ce0,
        weights_4_q0,
        weights_5_address0,
        weights_5_ce0,
        weights_5_q0,
        weights_6_address0,
        weights_6_ce0,
        weights_6_q0,
        weights_7_address0,
        weights_7_ce0,
        weights_7_q0,
        weights_8_address0,
        weights_8_ce0,
        weights_8_q0,
        weights_9_address0,
        weights_9_ce0,
        weights_9_q0,
        weights_10_address0,
        weights_10_ce0,
        weights_10_q0,
        weights_11_address0,
        weights_11_ce0,
        weights_11_q0,
        weights_12_address0,
        weights_12_ce0,
        weights_12_q0,
        weights_13_address0,
        weights_13_ce0,
        weights_13_q0,
        weights_14_address0,
        weights_14_ce0,
        weights_14_q0,
        weights_15_address0,
        weights_15_ce0,
        weights_15_q0,
        weights_16_address0,
        weights_16_ce0,
        weights_16_q0,
        weights_17_address0,
        weights_17_ce0,
        weights_17_q0,
        weights_18_address0,
        weights_18_ce0,
        weights_18_q0,
        weights_19_address0,
        weights_19_ce0,
        weights_19_q0,
        weights_20_address0,
        weights_20_ce0,
        weights_20_q0,
        weights_21_address0,
        weights_21_ce0,
        weights_21_q0,
        weights_22_address0,
        weights_22_ce0,
        weights_22_q0,
        weights_23_address0,
        weights_23_ce0,
        weights_23_q0,
        weights_24_address0,
        weights_24_ce0,
        weights_24_q0,
        weights_25_address0,
        weights_25_ce0,
        weights_25_q0,
        weights_26_address0,
        weights_26_ce0,
        weights_26_q0,
        weights_27_address0,
        weights_27_ce0,
        weights_27_q0,
        weights_28_address0,
        weights_28_ce0,
        weights_28_q0,
        weights_29_address0,
        weights_29_ce0,
        weights_29_q0,
        weights_30_address0,
        weights_30_ce0,
        weights_30_q0,
        weights_31_address0,
        weights_31_ce0,
        weights_31_q0,
        weights_32_address0,
        weights_32_ce0,
        weights_32_q0,
        weights_33_address0,
        weights_33_ce0,
        weights_33_q0,
        weights_34_address0,
        weights_34_ce0,
        weights_34_q0,
        weights_35_address0,
        weights_35_ce0,
        weights_35_q0,
        weights_36_address0,
        weights_36_ce0,
        weights_36_q0,
        weights_37_address0,
        weights_37_ce0,
        weights_37_q0,
        weights_38_address0,
        weights_38_ce0,
        weights_38_q0,
        weights_39_address0,
        weights_39_ce0,
        weights_39_q0,
        weights_40_address0,
        weights_40_ce0,
        weights_40_q0,
        weights_41_address0,
        weights_41_ce0,
        weights_41_q0,
        weights_42_address0,
        weights_42_ce0,
        weights_42_q0,
        weights_43_address0,
        weights_43_ce0,
        weights_43_q0,
        weights_44_address0,
        weights_44_ce0,
        weights_44_q0,
        weights_45_address0,
        weights_45_ce0,
        weights_45_q0,
        weights_46_address0,
        weights_46_ce0,
        weights_46_q0,
        weights_47_address0,
        weights_47_ce0,
        weights_47_q0,
        weights_48_address0,
        weights_48_ce0,
        weights_48_q0,
        weights_49_address0,
        weights_49_ce0,
        weights_49_q0,
        weights_50_address0,
        weights_50_ce0,
        weights_50_q0,
        weights_51_address0,
        weights_51_ce0,
        weights_51_q0,
        weights_52_address0,
        weights_52_ce0,
        weights_52_q0,
        weights_53_address0,
        weights_53_ce0,
        weights_53_q0,
        weights_54_address0,
        weights_54_ce0,
        weights_54_q0,
        weights_55_address0,
        weights_55_ce0,
        weights_55_q0,
        weights_56_address0,
        weights_56_ce0,
        weights_56_q0,
        weights_57_address0,
        weights_57_ce0,
        weights_57_q0,
        weights_58_address0,
        weights_58_ce0,
        weights_58_q0,
        weights_59_address0,
        weights_59_ce0,
        weights_59_q0,
        weights_60_address0,
        weights_60_ce0,
        weights_60_q0,
        weights_61_address0,
        weights_61_ce0,
        weights_61_q0,
        weights_62_address0,
        weights_62_ce0,
        weights_62_q0,
        weights_63_address0,
        weights_63_ce0,
        weights_63_q0,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        C_0_address0,
        C_0_ce0,
        C_0_we0,
        C_0_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] weights_0_address0;
output   weights_0_ce0;
input  [24:0] weights_0_q0;
output  [2:0] weights_1_address0;
output   weights_1_ce0;
input  [24:0] weights_1_q0;
output  [2:0] weights_2_address0;
output   weights_2_ce0;
input  [24:0] weights_2_q0;
output  [2:0] weights_3_address0;
output   weights_3_ce0;
input  [24:0] weights_3_q0;
output  [2:0] weights_4_address0;
output   weights_4_ce0;
input  [24:0] weights_4_q0;
output  [2:0] weights_5_address0;
output   weights_5_ce0;
input  [24:0] weights_5_q0;
output  [2:0] weights_6_address0;
output   weights_6_ce0;
input  [24:0] weights_6_q0;
output  [2:0] weights_7_address0;
output   weights_7_ce0;
input  [24:0] weights_7_q0;
output  [2:0] weights_8_address0;
output   weights_8_ce0;
input  [24:0] weights_8_q0;
output  [2:0] weights_9_address0;
output   weights_9_ce0;
input  [24:0] weights_9_q0;
output  [2:0] weights_10_address0;
output   weights_10_ce0;
input  [24:0] weights_10_q0;
output  [2:0] weights_11_address0;
output   weights_11_ce0;
input  [24:0] weights_11_q0;
output  [2:0] weights_12_address0;
output   weights_12_ce0;
input  [24:0] weights_12_q0;
output  [2:0] weights_13_address0;
output   weights_13_ce0;
input  [24:0] weights_13_q0;
output  [2:0] weights_14_address0;
output   weights_14_ce0;
input  [24:0] weights_14_q0;
output  [2:0] weights_15_address0;
output   weights_15_ce0;
input  [24:0] weights_15_q0;
output  [2:0] weights_16_address0;
output   weights_16_ce0;
input  [24:0] weights_16_q0;
output  [2:0] weights_17_address0;
output   weights_17_ce0;
input  [24:0] weights_17_q0;
output  [2:0] weights_18_address0;
output   weights_18_ce0;
input  [24:0] weights_18_q0;
output  [2:0] weights_19_address0;
output   weights_19_ce0;
input  [24:0] weights_19_q0;
output  [2:0] weights_20_address0;
output   weights_20_ce0;
input  [24:0] weights_20_q0;
output  [2:0] weights_21_address0;
output   weights_21_ce0;
input  [24:0] weights_21_q0;
output  [2:0] weights_22_address0;
output   weights_22_ce0;
input  [24:0] weights_22_q0;
output  [2:0] weights_23_address0;
output   weights_23_ce0;
input  [24:0] weights_23_q0;
output  [2:0] weights_24_address0;
output   weights_24_ce0;
input  [24:0] weights_24_q0;
output  [2:0] weights_25_address0;
output   weights_25_ce0;
input  [24:0] weights_25_q0;
output  [2:0] weights_26_address0;
output   weights_26_ce0;
input  [24:0] weights_26_q0;
output  [2:0] weights_27_address0;
output   weights_27_ce0;
input  [24:0] weights_27_q0;
output  [2:0] weights_28_address0;
output   weights_28_ce0;
input  [24:0] weights_28_q0;
output  [2:0] weights_29_address0;
output   weights_29_ce0;
input  [24:0] weights_29_q0;
output  [2:0] weights_30_address0;
output   weights_30_ce0;
input  [24:0] weights_30_q0;
output  [2:0] weights_31_address0;
output   weights_31_ce0;
input  [24:0] weights_31_q0;
output  [2:0] weights_32_address0;
output   weights_32_ce0;
input  [24:0] weights_32_q0;
output  [2:0] weights_33_address0;
output   weights_33_ce0;
input  [24:0] weights_33_q0;
output  [2:0] weights_34_address0;
output   weights_34_ce0;
input  [24:0] weights_34_q0;
output  [2:0] weights_35_address0;
output   weights_35_ce0;
input  [24:0] weights_35_q0;
output  [2:0] weights_36_address0;
output   weights_36_ce0;
input  [24:0] weights_36_q0;
output  [2:0] weights_37_address0;
output   weights_37_ce0;
input  [24:0] weights_37_q0;
output  [2:0] weights_38_address0;
output   weights_38_ce0;
input  [24:0] weights_38_q0;
output  [2:0] weights_39_address0;
output   weights_39_ce0;
input  [24:0] weights_39_q0;
output  [2:0] weights_40_address0;
output   weights_40_ce0;
input  [24:0] weights_40_q0;
output  [2:0] weights_41_address0;
output   weights_41_ce0;
input  [24:0] weights_41_q0;
output  [2:0] weights_42_address0;
output   weights_42_ce0;
input  [24:0] weights_42_q0;
output  [2:0] weights_43_address0;
output   weights_43_ce0;
input  [24:0] weights_43_q0;
output  [2:0] weights_44_address0;
output   weights_44_ce0;
input  [24:0] weights_44_q0;
output  [2:0] weights_45_address0;
output   weights_45_ce0;
input  [24:0] weights_45_q0;
output  [2:0] weights_46_address0;
output   weights_46_ce0;
input  [24:0] weights_46_q0;
output  [2:0] weights_47_address0;
output   weights_47_ce0;
input  [24:0] weights_47_q0;
output  [2:0] weights_48_address0;
output   weights_48_ce0;
input  [24:0] weights_48_q0;
output  [2:0] weights_49_address0;
output   weights_49_ce0;
input  [24:0] weights_49_q0;
output  [2:0] weights_50_address0;
output   weights_50_ce0;
input  [24:0] weights_50_q0;
output  [2:0] weights_51_address0;
output   weights_51_ce0;
input  [24:0] weights_51_q0;
output  [2:0] weights_52_address0;
output   weights_52_ce0;
input  [24:0] weights_52_q0;
output  [2:0] weights_53_address0;
output   weights_53_ce0;
input  [24:0] weights_53_q0;
output  [2:0] weights_54_address0;
output   weights_54_ce0;
input  [24:0] weights_54_q0;
output  [2:0] weights_55_address0;
output   weights_55_ce0;
input  [24:0] weights_55_q0;
output  [2:0] weights_56_address0;
output   weights_56_ce0;
input  [24:0] weights_56_q0;
output  [2:0] weights_57_address0;
output   weights_57_ce0;
input  [24:0] weights_57_q0;
output  [2:0] weights_58_address0;
output   weights_58_ce0;
input  [24:0] weights_58_q0;
output  [2:0] weights_59_address0;
output   weights_59_ce0;
input  [24:0] weights_59_q0;
output  [2:0] weights_60_address0;
output   weights_60_ce0;
input  [24:0] weights_60_q0;
output  [2:0] weights_61_address0;
output   weights_61_ce0;
input  [24:0] weights_61_q0;
output  [2:0] weights_62_address0;
output   weights_62_ce0;
input  [24:0] weights_62_q0;
output  [2:0] weights_63_address0;
output   weights_63_ce0;
input  [24:0] weights_63_q0;
output  [5:0] input_0_address0;
output   input_0_ce0;
input  [21:0] input_0_q0;
output  [2:0] C_0_address0;
output   C_0_ce0;
output   C_0_we0;
output  [24:0] C_0_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln71_fu_1228_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln71_fu_1234_p2;
reg   [9:0] add_ln71_reg_1724;
wire   [0:0] icmp_ln74_fu_1252_p2;
reg   [0:0] icmp_ln74_reg_1729;
wire   [6:0] select_ln71_fu_1258_p3;
reg   [6:0] select_ln71_reg_1734;
wire   [3:0] select_ln71_3_fu_1266_p3;
reg   [3:0] select_ln71_3_reg_1739;
wire   [5:0] trunc_ln74_fu_1348_p1;
reg   [5:0] trunc_ln74_reg_2064;
reg   [2:0] C_0_addr_reg_2074;
wire   [63:0] zext_ln71_fu_1274_p1;
wire   [63:0] zext_ln74_fu_1343_p1;
reg   [24:0] temp_fu_328;
wire    ap_loop_init;
reg   [6:0] k_fu_332;
wire   [6:0] k_2_fu_1664_p2;
reg   [6:0] ap_sig_allocacmp_k_load;
reg   [3:0] i_fu_336;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [9:0] indvar_flatten_fu_340;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg    weights_0_ce0_local;
reg    weights_1_ce0_local;
reg    weights_2_ce0_local;
reg    weights_3_ce0_local;
reg    weights_4_ce0_local;
reg    weights_5_ce0_local;
reg    weights_6_ce0_local;
reg    weights_7_ce0_local;
reg    weights_8_ce0_local;
reg    weights_9_ce0_local;
reg    weights_10_ce0_local;
reg    weights_11_ce0_local;
reg    weights_12_ce0_local;
reg    weights_13_ce0_local;
reg    weights_14_ce0_local;
reg    weights_15_ce0_local;
reg    weights_16_ce0_local;
reg    weights_17_ce0_local;
reg    weights_18_ce0_local;
reg    weights_19_ce0_local;
reg    weights_20_ce0_local;
reg    weights_21_ce0_local;
reg    weights_22_ce0_local;
reg    weights_23_ce0_local;
reg    weights_24_ce0_local;
reg    weights_25_ce0_local;
reg    weights_26_ce0_local;
reg    weights_27_ce0_local;
reg    weights_28_ce0_local;
reg    weights_29_ce0_local;
reg    weights_30_ce0_local;
reg    weights_31_ce0_local;
reg    weights_32_ce0_local;
reg    weights_33_ce0_local;
reg    weights_34_ce0_local;
reg    weights_35_ce0_local;
reg    weights_36_ce0_local;
reg    weights_37_ce0_local;
reg    weights_38_ce0_local;
reg    weights_39_ce0_local;
reg    weights_40_ce0_local;
reg    weights_41_ce0_local;
reg    weights_42_ce0_local;
reg    weights_43_ce0_local;
reg    weights_44_ce0_local;
reg    weights_45_ce0_local;
reg    weights_46_ce0_local;
reg    weights_47_ce0_local;
reg    weights_48_ce0_local;
reg    weights_49_ce0_local;
reg    weights_50_ce0_local;
reg    weights_51_ce0_local;
reg    weights_52_ce0_local;
reg    weights_53_ce0_local;
reg    weights_54_ce0_local;
reg    weights_55_ce0_local;
reg    weights_56_ce0_local;
reg    weights_57_ce0_local;
reg    weights_58_ce0_local;
reg    weights_59_ce0_local;
reg    weights_60_ce0_local;
reg    weights_61_ce0_local;
reg    weights_62_ce0_local;
reg    weights_63_ce0_local;
reg    input_0_ce0_local;
reg    C_0_we0_local;
wire   [0:0] icmp_ln74_2_fu_1669_p2;
reg    C_0_ce0_local;
wire   [21:0] mul_ln79_fu_1201_p0;
wire   [3:0] i_18_fu_1246_p2;
wire   [24:0] tmp_fu_1355_p129;
wire  signed [24:0] tmp_fu_1355_p131;
wire   [24:0] select_ln71_4_fu_1628_p3;
wire   [46:0] mul_ln79_fu_1201_p2;
wire   [41:0] add_ln79_fu_1647_p0;
wire   [41:0] add_ln79_fu_1647_p1;
wire   [41:0] add_ln79_fu_1647_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [46:0] mul_ln79_fu_1201_p00;
wire   [5:0] tmp_fu_1355_p1;
wire   [5:0] tmp_fu_1355_p3;
wire   [5:0] tmp_fu_1355_p5;
wire   [5:0] tmp_fu_1355_p7;
wire   [5:0] tmp_fu_1355_p9;
wire   [5:0] tmp_fu_1355_p11;
wire   [5:0] tmp_fu_1355_p13;
wire   [5:0] tmp_fu_1355_p15;
wire   [5:0] tmp_fu_1355_p17;
wire   [5:0] tmp_fu_1355_p19;
wire   [5:0] tmp_fu_1355_p21;
wire   [5:0] tmp_fu_1355_p23;
wire   [5:0] tmp_fu_1355_p25;
wire   [5:0] tmp_fu_1355_p27;
wire   [5:0] tmp_fu_1355_p29;
wire   [5:0] tmp_fu_1355_p31;
wire   [5:0] tmp_fu_1355_p33;
wire   [5:0] tmp_fu_1355_p35;
wire   [5:0] tmp_fu_1355_p37;
wire   [5:0] tmp_fu_1355_p39;
wire   [5:0] tmp_fu_1355_p41;
wire   [5:0] tmp_fu_1355_p43;
wire   [5:0] tmp_fu_1355_p45;
wire   [5:0] tmp_fu_1355_p47;
wire   [5:0] tmp_fu_1355_p49;
wire   [5:0] tmp_fu_1355_p51;
wire   [5:0] tmp_fu_1355_p53;
wire   [5:0] tmp_fu_1355_p55;
wire   [5:0] tmp_fu_1355_p57;
wire   [5:0] tmp_fu_1355_p59;
wire   [5:0] tmp_fu_1355_p61;
wire   [5:0] tmp_fu_1355_p63;
wire  signed [5:0] tmp_fu_1355_p65;
wire  signed [5:0] tmp_fu_1355_p67;
wire  signed [5:0] tmp_fu_1355_p69;
wire  signed [5:0] tmp_fu_1355_p71;
wire  signed [5:0] tmp_fu_1355_p73;
wire  signed [5:0] tmp_fu_1355_p75;
wire  signed [5:0] tmp_fu_1355_p77;
wire  signed [5:0] tmp_fu_1355_p79;
wire  signed [5:0] tmp_fu_1355_p81;
wire  signed [5:0] tmp_fu_1355_p83;
wire  signed [5:0] tmp_fu_1355_p85;
wire  signed [5:0] tmp_fu_1355_p87;
wire  signed [5:0] tmp_fu_1355_p89;
wire  signed [5:0] tmp_fu_1355_p91;
wire  signed [5:0] tmp_fu_1355_p93;
wire  signed [5:0] tmp_fu_1355_p95;
wire  signed [5:0] tmp_fu_1355_p97;
wire  signed [5:0] tmp_fu_1355_p99;
wire  signed [5:0] tmp_fu_1355_p101;
wire  signed [5:0] tmp_fu_1355_p103;
wire  signed [5:0] tmp_fu_1355_p105;
wire  signed [5:0] tmp_fu_1355_p107;
wire  signed [5:0] tmp_fu_1355_p109;
wire  signed [5:0] tmp_fu_1355_p111;
wire  signed [5:0] tmp_fu_1355_p113;
wire  signed [5:0] tmp_fu_1355_p115;
wire  signed [5:0] tmp_fu_1355_p117;
wire  signed [5:0] tmp_fu_1355_p119;
wire  signed [5:0] tmp_fu_1355_p121;
wire  signed [5:0] tmp_fu_1355_p123;
wire  signed [5:0] tmp_fu_1355_p125;
wire  signed [5:0] tmp_fu_1355_p127;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 temp_fu_328 = 25'd0;
#0 k_fu_332 = 7'd0;
#0 i_fu_336 = 4'd0;
#0 indvar_flatten_fu_340 = 10'd0;
#0 ap_done_reg = 1'b0;
end

top_mul_22ns_25s_47_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 47 ))
mul_22ns_25s_47_1_1_U194(
    .din0(mul_ln79_fu_1201_p0),
    .din1(tmp_fu_1355_p131),
    .dout(mul_ln79_fu_1201_p2)
);

(* dissolve_hierarchy = "yes" *) top_sparsemux_129_6_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 6'h0 ),
    .din0_WIDTH( 25 ),
    .CASE1( 6'h1 ),
    .din1_WIDTH( 25 ),
    .CASE2( 6'h2 ),
    .din2_WIDTH( 25 ),
    .CASE3( 6'h3 ),
    .din3_WIDTH( 25 ),
    .CASE4( 6'h4 ),
    .din4_WIDTH( 25 ),
    .CASE5( 6'h5 ),
    .din5_WIDTH( 25 ),
    .CASE6( 6'h6 ),
    .din6_WIDTH( 25 ),
    .CASE7( 6'h7 ),
    .din7_WIDTH( 25 ),
    .CASE8( 6'h8 ),
    .din8_WIDTH( 25 ),
    .CASE9( 6'h9 ),
    .din9_WIDTH( 25 ),
    .CASE10( 6'hA ),
    .din10_WIDTH( 25 ),
    .CASE11( 6'hB ),
    .din11_WIDTH( 25 ),
    .CASE12( 6'hC ),
    .din12_WIDTH( 25 ),
    .CASE13( 6'hD ),
    .din13_WIDTH( 25 ),
    .CASE14( 6'hE ),
    .din14_WIDTH( 25 ),
    .CASE15( 6'hF ),
    .din15_WIDTH( 25 ),
    .CASE16( 6'h10 ),
    .din16_WIDTH( 25 ),
    .CASE17( 6'h11 ),
    .din17_WIDTH( 25 ),
    .CASE18( 6'h12 ),
    .din18_WIDTH( 25 ),
    .CASE19( 6'h13 ),
    .din19_WIDTH( 25 ),
    .CASE20( 6'h14 ),
    .din20_WIDTH( 25 ),
    .CASE21( 6'h15 ),
    .din21_WIDTH( 25 ),
    .CASE22( 6'h16 ),
    .din22_WIDTH( 25 ),
    .CASE23( 6'h17 ),
    .din23_WIDTH( 25 ),
    .CASE24( 6'h18 ),
    .din24_WIDTH( 25 ),
    .CASE25( 6'h19 ),
    .din25_WIDTH( 25 ),
    .CASE26( 6'h1A ),
    .din26_WIDTH( 25 ),
    .CASE27( 6'h1B ),
    .din27_WIDTH( 25 ),
    .CASE28( 6'h1C ),
    .din28_WIDTH( 25 ),
    .CASE29( 6'h1D ),
    .din29_WIDTH( 25 ),
    .CASE30( 6'h1E ),
    .din30_WIDTH( 25 ),
    .CASE31( 6'h1F ),
    .din31_WIDTH( 25 ),
    .CASE32( 6'h20 ),
    .din32_WIDTH( 25 ),
    .CASE33( 6'h21 ),
    .din33_WIDTH( 25 ),
    .CASE34( 6'h22 ),
    .din34_WIDTH( 25 ),
    .CASE35( 6'h23 ),
    .din35_WIDTH( 25 ),
    .CASE36( 6'h24 ),
    .din36_WIDTH( 25 ),
    .CASE37( 6'h25 ),
    .din37_WIDTH( 25 ),
    .CASE38( 6'h26 ),
    .din38_WIDTH( 25 ),
    .CASE39( 6'h27 ),
    .din39_WIDTH( 25 ),
    .CASE40( 6'h28 ),
    .din40_WIDTH( 25 ),
    .CASE41( 6'h29 ),
    .din41_WIDTH( 25 ),
    .CASE42( 6'h2A ),
    .din42_WIDTH( 25 ),
    .CASE43( 6'h2B ),
    .din43_WIDTH( 25 ),
    .CASE44( 6'h2C ),
    .din44_WIDTH( 25 ),
    .CASE45( 6'h2D ),
    .din45_WIDTH( 25 ),
    .CASE46( 6'h2E ),
    .din46_WIDTH( 25 ),
    .CASE47( 6'h2F ),
    .din47_WIDTH( 25 ),
    .CASE48( 6'h30 ),
    .din48_WIDTH( 25 ),
    .CASE49( 6'h31 ),
    .din49_WIDTH( 25 ),
    .CASE50( 6'h32 ),
    .din50_WIDTH( 25 ),
    .CASE51( 6'h33 ),
    .din51_WIDTH( 25 ),
    .CASE52( 6'h34 ),
    .din52_WIDTH( 25 ),
    .CASE53( 6'h35 ),
    .din53_WIDTH( 25 ),
    .CASE54( 6'h36 ),
    .din54_WIDTH( 25 ),
    .CASE55( 6'h37 ),
    .din55_WIDTH( 25 ),
    .CASE56( 6'h38 ),
    .din56_WIDTH( 25 ),
    .CASE57( 6'h39 ),
    .din57_WIDTH( 25 ),
    .CASE58( 6'h3A ),
    .din58_WIDTH( 25 ),
    .CASE59( 6'h3B ),
    .din59_WIDTH( 25 ),
    .CASE60( 6'h3C ),
    .din60_WIDTH( 25 ),
    .CASE61( 6'h3D ),
    .din61_WIDTH( 25 ),
    .CASE62( 6'h3E ),
    .din62_WIDTH( 25 ),
    .CASE63( 6'h3F ),
    .din63_WIDTH( 25 ),
    .def_WIDTH( 25 ),
    .sel_WIDTH( 6 ),
    .dout_WIDTH( 25 ))
sparsemux_129_6_25_1_1_U195(
    .din0(weights_0_q0),
    .din1(weights_1_q0),
    .din2(weights_2_q0),
    .din3(weights_3_q0),
    .din4(weights_4_q0),
    .din5(weights_5_q0),
    .din6(weights_6_q0),
    .din7(weights_7_q0),
    .din8(weights_8_q0),
    .din9(weights_9_q0),
    .din10(weights_10_q0),
    .din11(weights_11_q0),
    .din12(weights_12_q0),
    .din13(weights_13_q0),
    .din14(weights_14_q0),
    .din15(weights_15_q0),
    .din16(weights_16_q0),
    .din17(weights_17_q0),
    .din18(weights_18_q0),
    .din19(weights_19_q0),
    .din20(weights_20_q0),
    .din21(weights_21_q0),
    .din22(weights_22_q0),
    .din23(weights_23_q0),
    .din24(weights_24_q0),
    .din25(weights_25_q0),
    .din26(weights_26_q0),
    .din27(weights_27_q0),
    .din28(weights_28_q0),
    .din29(weights_29_q0),
    .din30(weights_30_q0),
    .din31(weights_31_q0),
    .din32(weights_32_q0),
    .din33(weights_33_q0),
    .din34(weights_34_q0),
    .din35(weights_35_q0),
    .din36(weights_36_q0),
    .din37(weights_37_q0),
    .din38(weights_38_q0),
    .din39(weights_39_q0),
    .din40(weights_40_q0),
    .din41(weights_41_q0),
    .din42(weights_42_q0),
    .din43(weights_43_q0),
    .din44(weights_44_q0),
    .din45(weights_45_q0),
    .din46(weights_46_q0),
    .din47(weights_47_q0),
    .din48(weights_48_q0),
    .din49(weights_49_q0),
    .din50(weights_50_q0),
    .din51(weights_51_q0),
    .din52(weights_52_q0),
    .din53(weights_53_q0),
    .din54(weights_54_q0),
    .din55(weights_55_q0),
    .din56(weights_56_q0),
    .din57(weights_57_q0),
    .din58(weights_58_q0),
    .din59(weights_59_q0),
    .din60(weights_60_q0),
    .din61(weights_61_q0),
    .din62(weights_62_q0),
    .din63(weights_63_q0),
    .def(tmp_fu_1355_p129),
    .sel(trunc_ln74_reg_2064),
    .dout(tmp_fu_1355_p131)
);

top_add_42ns_42ns_42_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 42 ),
    .din1_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
add_42ns_42ns_42_1_1_U196(
    .din0(add_ln79_fu_1647_p0),
    .din1(add_ln79_fu_1647_p1),
    .dout(add_ln79_fu_1647_p2)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_336 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_fu_336 <= select_ln71_3_reg_1739;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_340 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_fu_340 <= add_ln71_reg_1724;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        k_fu_332 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_fu_332 <= k_2_fu_1664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        temp_fu_328 <= 25'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_fu_328 <= {{add_ln79_fu_1647_p2[41:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        C_0_addr_reg_2074 <= zext_ln71_fu_1274_p1;
        add_ln71_reg_1724 <= add_ln71_fu_1234_p2;
        icmp_ln74_reg_1729 <= icmp_ln74_fu_1252_p2;
        select_ln71_3_reg_1739 <= select_ln71_3_fu_1266_p3;
        select_ln71_reg_1734 <= select_ln71_fu_1258_p3;
        trunc_ln74_reg_2064 <= trunc_ln74_fu_1348_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        C_0_ce0_local = 1'b1;
    end else begin
        C_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_2_fu_1669_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        C_0_we0_local = 1'b1;
    end else begin
        C_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln71_fu_1228_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_336;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_340;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_k_load = 7'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_332;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_0_ce0_local = 1'b1;
    end else begin
        input_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_0_ce0_local = 1'b1;
    end else begin
        weights_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_10_ce0_local = 1'b1;
    end else begin
        weights_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_11_ce0_local = 1'b1;
    end else begin
        weights_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_12_ce0_local = 1'b1;
    end else begin
        weights_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_13_ce0_local = 1'b1;
    end else begin
        weights_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_14_ce0_local = 1'b1;
    end else begin
        weights_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_15_ce0_local = 1'b1;
    end else begin
        weights_15_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_16_ce0_local = 1'b1;
    end else begin
        weights_16_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_17_ce0_local = 1'b1;
    end else begin
        weights_17_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_18_ce0_local = 1'b1;
    end else begin
        weights_18_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_19_ce0_local = 1'b1;
    end else begin
        weights_19_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_ce0_local = 1'b1;
    end else begin
        weights_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_20_ce0_local = 1'b1;
    end else begin
        weights_20_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_21_ce0_local = 1'b1;
    end else begin
        weights_21_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_22_ce0_local = 1'b1;
    end else begin
        weights_22_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_23_ce0_local = 1'b1;
    end else begin
        weights_23_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_24_ce0_local = 1'b1;
    end else begin
        weights_24_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_25_ce0_local = 1'b1;
    end else begin
        weights_25_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_26_ce0_local = 1'b1;
    end else begin
        weights_26_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_27_ce0_local = 1'b1;
    end else begin
        weights_27_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_28_ce0_local = 1'b1;
    end else begin
        weights_28_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_29_ce0_local = 1'b1;
    end else begin
        weights_29_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_2_ce0_local = 1'b1;
    end else begin
        weights_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_30_ce0_local = 1'b1;
    end else begin
        weights_30_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_31_ce0_local = 1'b1;
    end else begin
        weights_31_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_32_ce0_local = 1'b1;
    end else begin
        weights_32_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_33_ce0_local = 1'b1;
    end else begin
        weights_33_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_34_ce0_local = 1'b1;
    end else begin
        weights_34_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_35_ce0_local = 1'b1;
    end else begin
        weights_35_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_36_ce0_local = 1'b1;
    end else begin
        weights_36_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_37_ce0_local = 1'b1;
    end else begin
        weights_37_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_38_ce0_local = 1'b1;
    end else begin
        weights_38_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_39_ce0_local = 1'b1;
    end else begin
        weights_39_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_3_ce0_local = 1'b1;
    end else begin
        weights_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_40_ce0_local = 1'b1;
    end else begin
        weights_40_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_41_ce0_local = 1'b1;
    end else begin
        weights_41_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_42_ce0_local = 1'b1;
    end else begin
        weights_42_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_43_ce0_local = 1'b1;
    end else begin
        weights_43_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_44_ce0_local = 1'b1;
    end else begin
        weights_44_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_45_ce0_local = 1'b1;
    end else begin
        weights_45_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_46_ce0_local = 1'b1;
    end else begin
        weights_46_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_47_ce0_local = 1'b1;
    end else begin
        weights_47_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_48_ce0_local = 1'b1;
    end else begin
        weights_48_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_49_ce0_local = 1'b1;
    end else begin
        weights_49_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_4_ce0_local = 1'b1;
    end else begin
        weights_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_50_ce0_local = 1'b1;
    end else begin
        weights_50_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_51_ce0_local = 1'b1;
    end else begin
        weights_51_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_52_ce0_local = 1'b1;
    end else begin
        weights_52_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_53_ce0_local = 1'b1;
    end else begin
        weights_53_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_54_ce0_local = 1'b1;
    end else begin
        weights_54_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_55_ce0_local = 1'b1;
    end else begin
        weights_55_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_56_ce0_local = 1'b1;
    end else begin
        weights_56_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_57_ce0_local = 1'b1;
    end else begin
        weights_57_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_58_ce0_local = 1'b1;
    end else begin
        weights_58_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_59_ce0_local = 1'b1;
    end else begin
        weights_59_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_5_ce0_local = 1'b1;
    end else begin
        weights_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_60_ce0_local = 1'b1;
    end else begin
        weights_60_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_61_ce0_local = 1'b1;
    end else begin
        weights_61_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_62_ce0_local = 1'b1;
    end else begin
        weights_62_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_63_ce0_local = 1'b1;
    end else begin
        weights_63_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_6_ce0_local = 1'b1;
    end else begin
        weights_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_7_ce0_local = 1'b1;
    end else begin
        weights_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_8_ce0_local = 1'b1;
    end else begin
        weights_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_9_ce0_local = 1'b1;
    end else begin
        weights_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln71_fu_1228_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_0_address0 = C_0_addr_reg_2074;

assign C_0_ce0 = C_0_ce0_local;

assign C_0_d0 = {{add_ln79_fu_1647_p2[41:17]}};

assign C_0_we0 = C_0_we0_local;

assign add_ln71_fu_1234_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln79_fu_1647_p0 = {{select_ln71_4_fu_1628_p3}, {17'd0}};

assign add_ln79_fu_1647_p1 = mul_ln79_fu_1201_p2[41:0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_18_fu_1246_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign icmp_ln71_fu_1228_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln74_2_fu_1669_p2 = ((k_2_fu_1664_p2 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_1252_p2 = ((ap_sig_allocacmp_k_load == 7'd64) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln74_fu_1343_p1;

assign input_0_ce0 = input_0_ce0_local;

assign k_2_fu_1664_p2 = (select_ln71_reg_1734 + 7'd1);

assign mul_ln79_fu_1201_p0 = mul_ln79_fu_1201_p00;

assign mul_ln79_fu_1201_p00 = input_0_q0;

assign select_ln71_3_fu_1266_p3 = ((icmp_ln74_fu_1252_p2[0:0] == 1'b1) ? i_18_fu_1246_p2 : ap_sig_allocacmp_i_load);

assign select_ln71_4_fu_1628_p3 = ((icmp_ln74_reg_1729[0:0] == 1'b1) ? 25'd0 : temp_fu_328);

assign select_ln71_fu_1258_p3 = ((icmp_ln74_fu_1252_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_k_load);

assign tmp_fu_1355_p129 = 'bx;

assign trunc_ln74_fu_1348_p1 = select_ln71_fu_1258_p3[5:0];

assign weights_0_address0 = zext_ln71_fu_1274_p1;

assign weights_0_ce0 = weights_0_ce0_local;

assign weights_10_address0 = zext_ln71_fu_1274_p1;

assign weights_10_ce0 = weights_10_ce0_local;

assign weights_11_address0 = zext_ln71_fu_1274_p1;

assign weights_11_ce0 = weights_11_ce0_local;

assign weights_12_address0 = zext_ln71_fu_1274_p1;

assign weights_12_ce0 = weights_12_ce0_local;

assign weights_13_address0 = zext_ln71_fu_1274_p1;

assign weights_13_ce0 = weights_13_ce0_local;

assign weights_14_address0 = zext_ln71_fu_1274_p1;

assign weights_14_ce0 = weights_14_ce0_local;

assign weights_15_address0 = zext_ln71_fu_1274_p1;

assign weights_15_ce0 = weights_15_ce0_local;

assign weights_16_address0 = zext_ln71_fu_1274_p1;

assign weights_16_ce0 = weights_16_ce0_local;

assign weights_17_address0 = zext_ln71_fu_1274_p1;

assign weights_17_ce0 = weights_17_ce0_local;

assign weights_18_address0 = zext_ln71_fu_1274_p1;

assign weights_18_ce0 = weights_18_ce0_local;

assign weights_19_address0 = zext_ln71_fu_1274_p1;

assign weights_19_ce0 = weights_19_ce0_local;

assign weights_1_address0 = zext_ln71_fu_1274_p1;

assign weights_1_ce0 = weights_1_ce0_local;

assign weights_20_address0 = zext_ln71_fu_1274_p1;

assign weights_20_ce0 = weights_20_ce0_local;

assign weights_21_address0 = zext_ln71_fu_1274_p1;

assign weights_21_ce0 = weights_21_ce0_local;

assign weights_22_address0 = zext_ln71_fu_1274_p1;

assign weights_22_ce0 = weights_22_ce0_local;

assign weights_23_address0 = zext_ln71_fu_1274_p1;

assign weights_23_ce0 = weights_23_ce0_local;

assign weights_24_address0 = zext_ln71_fu_1274_p1;

assign weights_24_ce0 = weights_24_ce0_local;

assign weights_25_address0 = zext_ln71_fu_1274_p1;

assign weights_25_ce0 = weights_25_ce0_local;

assign weights_26_address0 = zext_ln71_fu_1274_p1;

assign weights_26_ce0 = weights_26_ce0_local;

assign weights_27_address0 = zext_ln71_fu_1274_p1;

assign weights_27_ce0 = weights_27_ce0_local;

assign weights_28_address0 = zext_ln71_fu_1274_p1;

assign weights_28_ce0 = weights_28_ce0_local;

assign weights_29_address0 = zext_ln71_fu_1274_p1;

assign weights_29_ce0 = weights_29_ce0_local;

assign weights_2_address0 = zext_ln71_fu_1274_p1;

assign weights_2_ce0 = weights_2_ce0_local;

assign weights_30_address0 = zext_ln71_fu_1274_p1;

assign weights_30_ce0 = weights_30_ce0_local;

assign weights_31_address0 = zext_ln71_fu_1274_p1;

assign weights_31_ce0 = weights_31_ce0_local;

assign weights_32_address0 = zext_ln71_fu_1274_p1;

assign weights_32_ce0 = weights_32_ce0_local;

assign weights_33_address0 = zext_ln71_fu_1274_p1;

assign weights_33_ce0 = weights_33_ce0_local;

assign weights_34_address0 = zext_ln71_fu_1274_p1;

assign weights_34_ce0 = weights_34_ce0_local;

assign weights_35_address0 = zext_ln71_fu_1274_p1;

assign weights_35_ce0 = weights_35_ce0_local;

assign weights_36_address0 = zext_ln71_fu_1274_p1;

assign weights_36_ce0 = weights_36_ce0_local;

assign weights_37_address0 = zext_ln71_fu_1274_p1;

assign weights_37_ce0 = weights_37_ce0_local;

assign weights_38_address0 = zext_ln71_fu_1274_p1;

assign weights_38_ce0 = weights_38_ce0_local;

assign weights_39_address0 = zext_ln71_fu_1274_p1;

assign weights_39_ce0 = weights_39_ce0_local;

assign weights_3_address0 = zext_ln71_fu_1274_p1;

assign weights_3_ce0 = weights_3_ce0_local;

assign weights_40_address0 = zext_ln71_fu_1274_p1;

assign weights_40_ce0 = weights_40_ce0_local;

assign weights_41_address0 = zext_ln71_fu_1274_p1;

assign weights_41_ce0 = weights_41_ce0_local;

assign weights_42_address0 = zext_ln71_fu_1274_p1;

assign weights_42_ce0 = weights_42_ce0_local;

assign weights_43_address0 = zext_ln71_fu_1274_p1;

assign weights_43_ce0 = weights_43_ce0_local;

assign weights_44_address0 = zext_ln71_fu_1274_p1;

assign weights_44_ce0 = weights_44_ce0_local;

assign weights_45_address0 = zext_ln71_fu_1274_p1;

assign weights_45_ce0 = weights_45_ce0_local;

assign weights_46_address0 = zext_ln71_fu_1274_p1;

assign weights_46_ce0 = weights_46_ce0_local;

assign weights_47_address0 = zext_ln71_fu_1274_p1;

assign weights_47_ce0 = weights_47_ce0_local;

assign weights_48_address0 = zext_ln71_fu_1274_p1;

assign weights_48_ce0 = weights_48_ce0_local;

assign weights_49_address0 = zext_ln71_fu_1274_p1;

assign weights_49_ce0 = weights_49_ce0_local;

assign weights_4_address0 = zext_ln71_fu_1274_p1;

assign weights_4_ce0 = weights_4_ce0_local;

assign weights_50_address0 = zext_ln71_fu_1274_p1;

assign weights_50_ce0 = weights_50_ce0_local;

assign weights_51_address0 = zext_ln71_fu_1274_p1;

assign weights_51_ce0 = weights_51_ce0_local;

assign weights_52_address0 = zext_ln71_fu_1274_p1;

assign weights_52_ce0 = weights_52_ce0_local;

assign weights_53_address0 = zext_ln71_fu_1274_p1;

assign weights_53_ce0 = weights_53_ce0_local;

assign weights_54_address0 = zext_ln71_fu_1274_p1;

assign weights_54_ce0 = weights_54_ce0_local;

assign weights_55_address0 = zext_ln71_fu_1274_p1;

assign weights_55_ce0 = weights_55_ce0_local;

assign weights_56_address0 = zext_ln71_fu_1274_p1;

assign weights_56_ce0 = weights_56_ce0_local;

assign weights_57_address0 = zext_ln71_fu_1274_p1;

assign weights_57_ce0 = weights_57_ce0_local;

assign weights_58_address0 = zext_ln71_fu_1274_p1;

assign weights_58_ce0 = weights_58_ce0_local;

assign weights_59_address0 = zext_ln71_fu_1274_p1;

assign weights_59_ce0 = weights_59_ce0_local;

assign weights_5_address0 = zext_ln71_fu_1274_p1;

assign weights_5_ce0 = weights_5_ce0_local;

assign weights_60_address0 = zext_ln71_fu_1274_p1;

assign weights_60_ce0 = weights_60_ce0_local;

assign weights_61_address0 = zext_ln71_fu_1274_p1;

assign weights_61_ce0 = weights_61_ce0_local;

assign weights_62_address0 = zext_ln71_fu_1274_p1;

assign weights_62_ce0 = weights_62_ce0_local;

assign weights_63_address0 = zext_ln71_fu_1274_p1;

assign weights_63_ce0 = weights_63_ce0_local;

assign weights_6_address0 = zext_ln71_fu_1274_p1;

assign weights_6_ce0 = weights_6_ce0_local;

assign weights_7_address0 = zext_ln71_fu_1274_p1;

assign weights_7_ce0 = weights_7_ce0_local;

assign weights_8_address0 = zext_ln71_fu_1274_p1;

assign weights_8_ce0 = weights_8_ce0_local;

assign weights_9_address0 = zext_ln71_fu_1274_p1;

assign weights_9_ce0 = weights_9_ce0_local;

assign zext_ln71_fu_1274_p1 = select_ln71_3_fu_1266_p3;

assign zext_ln74_fu_1343_p1 = select_ln71_fu_1258_p3;

endmodule //top_forwardPropagation_64_8_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3
