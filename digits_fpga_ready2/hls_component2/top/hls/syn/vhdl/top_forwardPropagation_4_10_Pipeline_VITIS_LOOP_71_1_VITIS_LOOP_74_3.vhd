-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_forwardPropagation_4_10_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_0_ce0 : OUT STD_LOGIC;
    weights_0_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_1_ce0 : OUT STD_LOGIC;
    weights_1_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_2_ce0 : OUT STD_LOGIC;
    weights_2_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_3_ce0 : OUT STD_LOGIC;
    weights_3_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (24 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (24 downto 0);
    C_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    C_0_ce0 : OUT STD_LOGIC;
    C_0_we0 : OUT STD_LOGIC;
    C_0_d0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of top_forwardPropagation_4_10_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln71_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln71_fu_233_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln71_reg_441 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln74_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_fu_257_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln71_reg_451 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln71_5_fu_265_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln71_5_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln74_fu_282_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln74_reg_481 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_286_p11 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_8_reg_486 : STD_LOGIC_VECTOR (24 downto 0);
    signal C_0_addr_reg_491 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln71_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_fu_96 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_100 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal k_3_fu_381_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_104 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_108 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal weights_0_ce0_local : STD_LOGIC;
    signal weights_1_ce0_local : STD_LOGIC;
    signal weights_2_ce0_local : STD_LOGIC;
    signal weights_3_ce0_local : STD_LOGIC;
    signal C_0_we0_local : STD_LOGIC;
    signal icmp_ln74_3_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_0_ce0_local : STD_LOGIC;
    signal i_22_fu_245_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_286_p9 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_8_fu_286_p10 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_313_p9 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_313_p11 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln71_6_fu_345_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln79_fu_200_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal add_ln79_fu_364_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal add_ln79_fu_364_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal add_ln79_fu_364_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_8_fu_286_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_286_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_286_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_286_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_313_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_313_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_313_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_313_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_25s_25s_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component top_sparsemux_9_2_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        din3 : IN STD_LOGIC_VECTOR (24 downto 0);
        def : IN STD_LOGIC_VECTOR (24 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component top_add_42ns_42ns_42_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_25s_25s_50_1_1_U395 : component top_mul_25s_25s_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => tmp_8_reg_486,
        din1 => tmp_fu_313_p11,
        dout => mul_ln79_fu_200_p2);

    sparsemux_9_2_25_1_1_U396 : component top_sparsemux_9_2_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 25,
        CASE1 => "01",
        din1_WIDTH => 25,
        CASE2 => "10",
        din2_WIDTH => 25,
        CASE3 => "11",
        din3_WIDTH => 25,
        def_WIDTH => 25,
        sel_WIDTH => 2,
        dout_WIDTH => 25)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        def => tmp_8_fu_286_p9,
        sel => tmp_8_fu_286_p10,
        dout => tmp_8_fu_286_p11);

    sparsemux_9_2_25_1_1_U397 : component top_sparsemux_9_2_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 25,
        CASE1 => "01",
        din1_WIDTH => 25,
        CASE2 => "10",
        din2_WIDTH => 25,
        CASE3 => "11",
        din3_WIDTH => 25,
        def_WIDTH => 25,
        sel_WIDTH => 2,
        dout_WIDTH => 25)
    port map (
        din0 => weights_0_q0,
        din1 => weights_1_q0,
        din2 => weights_2_q0,
        din3 => weights_3_q0,
        def => tmp_fu_313_p9,
        sel => trunc_ln74_reg_481,
        dout => tmp_fu_313_p11);

    add_42ns_42ns_42_1_1_U398 : component top_add_42ns_42ns_42_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 42,
        din1_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        din0 => add_ln79_fu_364_p0,
        din1 => add_ln79_fu_364_p1,
        dout => add_ln79_fu_364_p2);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_104 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_fu_104 <= select_ln71_5_reg_456;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten_fu_108 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_fu_108 <= add_ln71_reg_441;
            end if; 
        end if;
    end process;

    k_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                k_fu_100 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                k_fu_100 <= k_3_fu_381_p2;
            end if; 
        end if;
    end process;

    temp_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                temp_fu_96 <= ap_const_lv25_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                temp_fu_96 <= add_ln79_fu_364_p2(41 downto 17);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                C_0_addr_reg_491 <= zext_ln71_fu_273_p1(4 - 1 downto 0);
                add_ln71_reg_441 <= add_ln71_fu_233_p2;
                icmp_ln74_reg_446 <= icmp_ln74_fu_251_p2;
                select_ln71_5_reg_456 <= select_ln71_5_fu_265_p3;
                select_ln71_reg_451 <= select_ln71_fu_257_p3;
                tmp_8_reg_486 <= tmp_8_fu_286_p11;
                trunc_ln74_reg_481 <= trunc_ln74_fu_282_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_227_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln71_fu_227_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    C_0_address0 <= C_0_addr_reg_491;
    C_0_ce0 <= C_0_ce0_local;

    C_0_ce0_local_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            C_0_ce0_local <= ap_const_logic_1;
        else 
            C_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    C_0_d0 <= add_ln79_fu_364_p2(41 downto 17);
    C_0_we0 <= C_0_we0_local;

    C_0_we0_local_assign_proc : process(ap_CS_fsm_state2, icmp_ln74_3_fu_386_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln74_3_fu_386_p2 = ap_const_lv1_1))) then 
            C_0_we0_local <= ap_const_logic_1;
        else 
            C_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln71_fu_233_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    add_ln79_fu_364_p0 <= (select_ln71_6_fu_345_p3 & ap_const_lv17_0);
    add_ln79_fu_364_p1 <= mul_ln79_fu_200_p2(42 - 1 downto 0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln71_fu_227_p2)
    begin
        if (((icmp_ln71_fu_227_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_108;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, k_fu_100)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_100;
        end if; 
    end process;

    i_22_fu_245_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    icmp_ln71_fu_227_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv6_28) else "0";
    icmp_ln74_3_fu_386_p2 <= "1" when (k_3_fu_381_p2 = ap_const_lv3_4) else "0";
    icmp_ln74_fu_251_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv3_4) else "0";
    k_3_fu_381_p2 <= std_logic_vector(unsigned(select_ln71_reg_451) + unsigned(ap_const_lv3_1));
    select_ln71_5_fu_265_p3 <= 
        i_22_fu_245_p2 when (icmp_ln74_fu_251_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln71_6_fu_345_p3 <= 
        ap_const_lv25_0 when (icmp_ln74_reg_446(0) = '1') else 
        temp_fu_96;
    select_ln71_fu_257_p3 <= 
        ap_const_lv3_0 when (icmp_ln74_fu_251_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    tmp_8_fu_286_p10 <= select_ln71_fu_257_p3(2 - 1 downto 0);
    tmp_8_fu_286_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_fu_313_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln74_fu_282_p1 <= select_ln71_fu_257_p3(2 - 1 downto 0);
    weights_0_address0 <= zext_ln71_fu_273_p1(4 - 1 downto 0);
    weights_0_ce0 <= weights_0_ce0_local;

    weights_0_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_0_ce0_local <= ap_const_logic_1;
        else 
            weights_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_1_address0 <= zext_ln71_fu_273_p1(4 - 1 downto 0);
    weights_1_ce0 <= weights_1_ce0_local;

    weights_1_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_1_ce0_local <= ap_const_logic_1;
        else 
            weights_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_2_address0 <= zext_ln71_fu_273_p1(4 - 1 downto 0);
    weights_2_ce0 <= weights_2_ce0_local;

    weights_2_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_2_ce0_local <= ap_const_logic_1;
        else 
            weights_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_3_address0 <= zext_ln71_fu_273_p1(4 - 1 downto 0);
    weights_3_ce0 <= weights_3_ce0_local;

    weights_3_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_3_ce0_local <= ap_const_logic_1;
        else 
            weights_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln71_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln71_5_fu_265_p3),64));
end behav;
