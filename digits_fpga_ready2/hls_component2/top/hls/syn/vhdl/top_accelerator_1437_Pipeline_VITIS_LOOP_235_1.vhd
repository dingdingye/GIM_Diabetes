-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_accelerator_1437_Pipeline_VITIS_LOOP_235_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_l3_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_l3_3_ce0 : OUT STD_LOGIC;
    weights_l3_3_we0 : OUT STD_LOGIC;
    weights_l3_3_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_l3_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_l3_3_ce1 : OUT STD_LOGIC;
    weights_l3_3_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_l3_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_l3_2_ce0 : OUT STD_LOGIC;
    weights_l3_2_we0 : OUT STD_LOGIC;
    weights_l3_2_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_l3_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_l3_2_ce1 : OUT STD_LOGIC;
    weights_l3_2_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_l3_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_l3_1_ce0 : OUT STD_LOGIC;
    weights_l3_1_we0 : OUT STD_LOGIC;
    weights_l3_1_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_l3_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_l3_1_ce1 : OUT STD_LOGIC;
    weights_l3_1_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    weights_l3_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_l3_0_ce0 : OUT STD_LOGIC;
    weights_l3_0_we0 : OUT STD_LOGIC;
    weights_l3_0_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    weights_l3_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    weights_l3_0_ce1 : OUT STD_LOGIC;
    weights_l3_0_q1 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_78_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_78_ce0 : OUT STD_LOGIC;
    update_temp_mat_78_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_79_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_79_ce0 : OUT STD_LOGIC;
    update_temp_mat_79_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_80_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_80_ce0 : OUT STD_LOGIC;
    update_temp_mat_80_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    update_temp_mat_81_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    update_temp_mat_81_ce0 : OUT STD_LOGIC;
    update_temp_mat_81_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    final_error_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    final_error_0_ce0 : OUT STD_LOGIC;
    final_error_0_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    biases_l3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    biases_l3_ce0 : OUT STD_LOGIC;
    biases_l3_we0 : OUT STD_LOGIC;
    biases_l3_d0 : OUT STD_LOGIC_VECTOR (24 downto 0);
    biases_l3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    biases_l3_ce1 : OUT STD_LOGIC;
    biases_l3_q1 : IN STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of top_accelerator_1437_Pipeline_VITIS_LOOP_235_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv34_83 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln235_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal weights_l3_0_addr_reg_417 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_0_addr_reg_417_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_0_addr_reg_417_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_0_addr_reg_417_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_1_addr_reg_428 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_1_addr_reg_428_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_1_addr_reg_428_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_1_addr_reg_428_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_2_addr_reg_439 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_2_addr_reg_439_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_2_addr_reg_439_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_2_addr_reg_439_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_3_addr_reg_450 : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_3_addr_reg_450_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_3_addr_reg_450_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal weights_l3_3_addr_reg_450_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal biases_l3_addr_reg_461 : STD_LOGIC_VECTOR (3 downto 0);
    signal biases_l3_addr_reg_461_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal biases_l3_addr_reg_461_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal biases_l3_addr_reg_461_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln235_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_41_fu_58 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln235_fu_221_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal update_temp_mat_78_ce0_local : STD_LOGIC;
    signal update_temp_mat_79_ce0_local : STD_LOGIC;
    signal update_temp_mat_80_ce0_local : STD_LOGIC;
    signal update_temp_mat_81_ce0_local : STD_LOGIC;
    signal final_error_0_ce0_local : STD_LOGIC;
    signal weights_l3_0_ce1_local : STD_LOGIC;
    signal weights_l3_0_we0_local : STD_LOGIC;
    signal weights_l3_0_ce0_local : STD_LOGIC;
    signal weights_l3_1_ce1_local : STD_LOGIC;
    signal weights_l3_1_we0_local : STD_LOGIC;
    signal weights_l3_1_ce0_local : STD_LOGIC;
    signal weights_l3_2_ce1_local : STD_LOGIC;
    signal weights_l3_2_we0_local : STD_LOGIC;
    signal weights_l3_2_ce0_local : STD_LOGIC;
    signal weights_l3_3_ce1_local : STD_LOGIC;
    signal weights_l3_3_we0_local : STD_LOGIC;
    signal weights_l3_3_ce0_local : STD_LOGIC;
    signal biases_l3_ce1_local : STD_LOGIC;
    signal biases_l3_we0_local : STD_LOGIC;
    signal biases_l3_ce0_local : STD_LOGIC;
    signal grp_fu_356_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_365_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_374_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_383_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_392_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_356_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_374_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_383_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_mac_mulsub_25s_8ns_42s_42_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_mulsub_25s_8ns_42s_42_4_1_U756 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_78_q0,
        din1 => grp_fu_356_p1,
        din2 => grp_fu_356_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_356_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U757 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_79_q0,
        din1 => grp_fu_365_p1,
        din2 => grp_fu_365_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U758 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_80_q0,
        din1 => grp_fu_374_p1,
        din2 => grp_fu_374_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_374_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U759 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => update_temp_mat_81_q0,
        din1 => grp_fu_383_p1,
        din2 => grp_fu_383_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_383_p3);

    mac_mulsub_25s_8ns_42s_42_4_1_U760 : component top_mac_mulsub_25s_8ns_42s_42_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 8,
        din2_WIDTH => 42,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => final_error_0_q0,
        din1 => grp_fu_392_p1,
        din2 => grp_fu_392_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_392_p3);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_41_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln235_fu_215_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_41_fu_58 <= add_ln235_fu_221_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_41_fu_58 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                biases_l3_addr_reg_461 <= zext_ln235_fu_227_p1(4 - 1 downto 0);
                biases_l3_addr_reg_461_pp0_iter1_reg <= biases_l3_addr_reg_461;
                weights_l3_0_addr_reg_417 <= zext_ln235_fu_227_p1(4 - 1 downto 0);
                weights_l3_0_addr_reg_417_pp0_iter1_reg <= weights_l3_0_addr_reg_417;
                weights_l3_1_addr_reg_428 <= zext_ln235_fu_227_p1(4 - 1 downto 0);
                weights_l3_1_addr_reg_428_pp0_iter1_reg <= weights_l3_1_addr_reg_428;
                weights_l3_2_addr_reg_439 <= zext_ln235_fu_227_p1(4 - 1 downto 0);
                weights_l3_2_addr_reg_439_pp0_iter1_reg <= weights_l3_2_addr_reg_439;
                weights_l3_3_addr_reg_450 <= zext_ln235_fu_227_p1(4 - 1 downto 0);
                weights_l3_3_addr_reg_450_pp0_iter1_reg <= weights_l3_3_addr_reg_450;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                biases_l3_addr_reg_461_pp0_iter2_reg <= biases_l3_addr_reg_461_pp0_iter1_reg;
                biases_l3_addr_reg_461_pp0_iter3_reg <= biases_l3_addr_reg_461_pp0_iter2_reg;
                weights_l3_0_addr_reg_417_pp0_iter2_reg <= weights_l3_0_addr_reg_417_pp0_iter1_reg;
                weights_l3_0_addr_reg_417_pp0_iter3_reg <= weights_l3_0_addr_reg_417_pp0_iter2_reg;
                weights_l3_1_addr_reg_428_pp0_iter2_reg <= weights_l3_1_addr_reg_428_pp0_iter1_reg;
                weights_l3_1_addr_reg_428_pp0_iter3_reg <= weights_l3_1_addr_reg_428_pp0_iter2_reg;
                weights_l3_2_addr_reg_439_pp0_iter2_reg <= weights_l3_2_addr_reg_439_pp0_iter1_reg;
                weights_l3_2_addr_reg_439_pp0_iter3_reg <= weights_l3_2_addr_reg_439_pp0_iter2_reg;
                weights_l3_3_addr_reg_450_pp0_iter2_reg <= weights_l3_3_addr_reg_450_pp0_iter1_reg;
                weights_l3_3_addr_reg_450_pp0_iter3_reg <= weights_l3_3_addr_reg_450_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln235_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln235_fu_215_p2)
    begin
        if (((icmp_ln235_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_41_fu_58, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_41_fu_58;
        end if; 
    end process;

    biases_l3_address0 <= biases_l3_addr_reg_461_pp0_iter3_reg;
    biases_l3_address1 <= biases_l3_addr_reg_461_pp0_iter1_reg;
    biases_l3_ce0 <= biases_l3_ce0_local;

    biases_l3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            biases_l3_ce0_local <= ap_const_logic_1;
        else 
            biases_l3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    biases_l3_ce1 <= biases_l3_ce1_local;

    biases_l3_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            biases_l3_ce1_local <= ap_const_logic_1;
        else 
            biases_l3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    biases_l3_d0 <= grp_fu_392_p3(41 downto 17);
    biases_l3_we0 <= biases_l3_we0_local;

    biases_l3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            biases_l3_we0_local <= ap_const_logic_1;
        else 
            biases_l3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    final_error_0_address0 <= zext_ln235_fu_227_p1(4 - 1 downto 0);
    final_error_0_ce0 <= final_error_0_ce0_local;

    final_error_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            final_error_0_ce0_local <= ap_const_logic_1;
        else 
            final_error_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_356_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_356_p2 <= (weights_l3_0_q1 & ap_const_lv17_0);
    grp_fu_365_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_365_p2 <= (weights_l3_1_q1 & ap_const_lv17_0);
    grp_fu_374_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_374_p2 <= (weights_l3_2_q1 & ap_const_lv17_0);
    grp_fu_383_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_383_p2 <= (weights_l3_3_q1 & ap_const_lv17_0);
    grp_fu_392_p1 <= ap_const_lv34_83(8 - 1 downto 0);
    grp_fu_392_p2 <= (biases_l3_q1 & ap_const_lv17_0);
    icmp_ln235_fu_215_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_A) else "0";
    update_temp_mat_78_address0 <= zext_ln235_fu_227_p1(4 - 1 downto 0);
    update_temp_mat_78_ce0 <= update_temp_mat_78_ce0_local;

    update_temp_mat_78_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_78_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_78_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_79_address0 <= zext_ln235_fu_227_p1(4 - 1 downto 0);
    update_temp_mat_79_ce0 <= update_temp_mat_79_ce0_local;

    update_temp_mat_79_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_79_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_79_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_80_address0 <= zext_ln235_fu_227_p1(4 - 1 downto 0);
    update_temp_mat_80_ce0 <= update_temp_mat_80_ce0_local;

    update_temp_mat_80_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_80_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_80_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    update_temp_mat_81_address0 <= zext_ln235_fu_227_p1(4 - 1 downto 0);
    update_temp_mat_81_ce0 <= update_temp_mat_81_ce0_local;

    update_temp_mat_81_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            update_temp_mat_81_ce0_local <= ap_const_logic_1;
        else 
            update_temp_mat_81_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_0_address0 <= weights_l3_0_addr_reg_417_pp0_iter3_reg;
    weights_l3_0_address1 <= weights_l3_0_addr_reg_417_pp0_iter1_reg;
    weights_l3_0_ce0 <= weights_l3_0_ce0_local;

    weights_l3_0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_l3_0_ce0_local <= ap_const_logic_1;
        else 
            weights_l3_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_0_ce1 <= weights_l3_0_ce1_local;

    weights_l3_0_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_l3_0_ce1_local <= ap_const_logic_1;
        else 
            weights_l3_0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_0_d0 <= grp_fu_356_p3(41 downto 17);
    weights_l3_0_we0 <= weights_l3_0_we0_local;

    weights_l3_0_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_l3_0_we0_local <= ap_const_logic_1;
        else 
            weights_l3_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_1_address0 <= weights_l3_1_addr_reg_428_pp0_iter3_reg;
    weights_l3_1_address1 <= weights_l3_1_addr_reg_428_pp0_iter1_reg;
    weights_l3_1_ce0 <= weights_l3_1_ce0_local;

    weights_l3_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_l3_1_ce0_local <= ap_const_logic_1;
        else 
            weights_l3_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_1_ce1 <= weights_l3_1_ce1_local;

    weights_l3_1_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_l3_1_ce1_local <= ap_const_logic_1;
        else 
            weights_l3_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_1_d0 <= grp_fu_365_p3(41 downto 17);
    weights_l3_1_we0 <= weights_l3_1_we0_local;

    weights_l3_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_l3_1_we0_local <= ap_const_logic_1;
        else 
            weights_l3_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_2_address0 <= weights_l3_2_addr_reg_439_pp0_iter3_reg;
    weights_l3_2_address1 <= weights_l3_2_addr_reg_439_pp0_iter1_reg;
    weights_l3_2_ce0 <= weights_l3_2_ce0_local;

    weights_l3_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_l3_2_ce0_local <= ap_const_logic_1;
        else 
            weights_l3_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_2_ce1 <= weights_l3_2_ce1_local;

    weights_l3_2_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_l3_2_ce1_local <= ap_const_logic_1;
        else 
            weights_l3_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_2_d0 <= grp_fu_374_p3(41 downto 17);
    weights_l3_2_we0 <= weights_l3_2_we0_local;

    weights_l3_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_l3_2_we0_local <= ap_const_logic_1;
        else 
            weights_l3_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_3_address0 <= weights_l3_3_addr_reg_450_pp0_iter3_reg;
    weights_l3_3_address1 <= weights_l3_3_addr_reg_450_pp0_iter1_reg;
    weights_l3_3_ce0 <= weights_l3_3_ce0_local;

    weights_l3_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_l3_3_ce0_local <= ap_const_logic_1;
        else 
            weights_l3_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_3_ce1 <= weights_l3_3_ce1_local;

    weights_l3_3_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            weights_l3_3_ce1_local <= ap_const_logic_1;
        else 
            weights_l3_3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    weights_l3_3_d0 <= grp_fu_383_p3(41 downto 17);
    weights_l3_3_we0 <= weights_l3_3_we0_local;

    weights_l3_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_l3_3_we0_local <= ap_const_logic_1;
        else 
            weights_l3_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln235_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
end behav;
