-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_backProp_8_4_10_Pipeline_VITIS_LOOP_44_1_VITIS_LOOP_45_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w_l_plus1_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_l_plus1_0_ce0 : OUT STD_LOGIC;
    w_l_plus1_0_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    w_l_plus1_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_l_plus1_1_ce0 : OUT STD_LOGIC;
    w_l_plus1_1_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    w_l_plus1_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_l_plus1_2_ce0 : OUT STD_LOGIC;
    w_l_plus1_2_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    w_l_plus1_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    w_l_plus1_3_ce0 : OUT STD_LOGIC;
    w_l_plus1_3_q0 : IN STD_LOGIC_VECTOR (24 downto 0);
    w_l_plus1_T_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    w_l_plus1_T_ce0 : OUT STD_LOGIC;
    w_l_plus1_T_we0 : OUT STD_LOGIC;
    w_l_plus1_T_d0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
end;


architecture behav of top_backProp_8_4_10_Pipeline_VITIS_LOOP_44_1_VITIS_LOOP_45_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln44_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln46_fu_243_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln46_reg_346 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln45_fu_249_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln45_reg_351 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln44_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln46_1_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_64 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal j_1_fu_253_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_68 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln44_1_fu_197_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_72 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln44_fu_165_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal w_l_plus1_0_ce0_local : STD_LOGIC;
    signal w_l_plus1_1_ce0_local : STD_LOGIC;
    signal w_l_plus1_2_ce0_local : STD_LOGIC;
    signal w_l_plus1_3_ce0_local : STD_LOGIC;
    signal w_l_plus1_T_we0_local : STD_LOGIC;
    signal tmp_fu_278_p11 : STD_LOGIC_VECTOR (24 downto 0);
    signal w_l_plus1_T_ce0_local : STD_LOGIC;
    signal icmp_ln45_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_27_fu_177_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln44_fu_189_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_225_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_217_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln46_fu_233_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln46_1_fu_237_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln44_1_cast_fu_213_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_278_p9 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_278_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_278_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_278_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_278_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_sparsemux_9_2_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        din3 : IN STD_LOGIC_VECTOR (24 downto 0);
        def : IN STD_LOGIC_VECTOR (24 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_25_1_1_U458 : component top_sparsemux_9_2_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 25,
        CASE1 => "01",
        din1_WIDTH => 25,
        CASE2 => "10",
        din2_WIDTH => 25,
        CASE3 => "11",
        din3_WIDTH => 25,
        def_WIDTH => 25,
        sel_WIDTH => 2,
        dout_WIDTH => 25)
    port map (
        din0 => w_l_plus1_0_q0,
        din1 => w_l_plus1_1_q0,
        din2 => w_l_plus1_2_q0,
        din3 => w_l_plus1_3_q0,
        def => tmp_fu_278_p9,
        sel => trunc_ln45_reg_351,
        dout => tmp_fu_278_p11);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln44_fu_159_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_68 <= select_ln44_1_fu_197_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_68 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln44_fu_159_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_72 <= add_ln44_fu_165_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_72 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln44_fu_159_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_64 <= j_1_fu_253_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_64 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln46_reg_346 <= add_ln46_fu_243_p2;
                trunc_ln45_reg_351 <= trunc_ln45_fu_249_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln44_fu_165_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    add_ln46_1_fu_237_p2 <= std_logic_vector(unsigned(tmp_9_fu_217_p3) + unsigned(zext_ln46_fu_233_p1));
    add_ln46_fu_243_p2 <= std_logic_vector(unsigned(add_ln46_1_fu_237_p2) + unsigned(select_ln44_1_cast_fu_213_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln44_fu_159_p2)
    begin
        if (((icmp_ln44_fu_159_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_64, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_64;
        end if; 
    end process;

    i_27_fu_177_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    icmp_ln44_fu_159_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv6_28) else "0";
    icmp_ln45_fu_183_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv3_4) else "0";
    j_1_fu_253_p2 <= std_logic_vector(unsigned(select_ln44_fu_189_p3) + unsigned(ap_const_lv3_1));
    select_ln44_1_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln44_1_fu_197_p3),6));
    select_ln44_1_fu_197_p3 <= 
        i_27_fu_177_p2 when (icmp_ln45_fu_183_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln44_fu_189_p3 <= 
        ap_const_lv3_0 when (icmp_ln45_fu_183_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_10_fu_225_p3 <= (select_ln44_fu_189_p3 & ap_const_lv1_0);
    tmp_9_fu_217_p3 <= (select_ln44_fu_189_p3 & ap_const_lv3_0);
    tmp_fu_278_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln45_fu_249_p1 <= select_ln44_fu_189_p3(2 - 1 downto 0);
    w_l_plus1_0_address0 <= zext_ln44_fu_205_p1(4 - 1 downto 0);
    w_l_plus1_0_ce0 <= w_l_plus1_0_ce0_local;

    w_l_plus1_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_0_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_1_address0 <= zext_ln44_fu_205_p1(4 - 1 downto 0);
    w_l_plus1_1_ce0 <= w_l_plus1_1_ce0_local;

    w_l_plus1_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_1_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_2_address0 <= zext_ln44_fu_205_p1(4 - 1 downto 0);
    w_l_plus1_2_ce0 <= w_l_plus1_2_ce0_local;

    w_l_plus1_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_2_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_3_address0 <= zext_ln44_fu_205_p1(4 - 1 downto 0);
    w_l_plus1_3_ce0 <= w_l_plus1_3_ce0_local;

    w_l_plus1_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_3_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_address0 <= zext_ln46_1_fu_274_p1(6 - 1 downto 0);
    w_l_plus1_T_ce0 <= w_l_plus1_T_ce0_local;

    w_l_plus1_T_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_T_ce0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    w_l_plus1_T_d0 <= tmp_fu_278_p11;
    w_l_plus1_T_we0 <= w_l_plus1_T_we0_local;

    w_l_plus1_T_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_l_plus1_T_we0_local <= ap_const_logic_1;
        else 
            w_l_plus1_T_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln44_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln44_1_fu_197_p3),64));
    zext_ln46_1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_reg_346),64));
    zext_ln46_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_225_p3),6));
end behav;
