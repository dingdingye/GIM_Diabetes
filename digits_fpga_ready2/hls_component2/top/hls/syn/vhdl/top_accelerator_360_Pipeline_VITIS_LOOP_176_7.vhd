-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_accelerator_360_Pipeline_VITIS_LOOP_176_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul_ln177 : IN STD_LOGIC_VECTOR (10 downto 0);
    input_0_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_0_0_ce0 : OUT STD_LOGIC;
    input_0_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_1_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_1_0_ce0 : OUT STD_LOGIC;
    input_1_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_2_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_2_0_ce0 : OUT STD_LOGIC;
    input_2_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_3_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_3_0_ce0 : OUT STD_LOGIC;
    input_3_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_4_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_4_0_ce0 : OUT STD_LOGIC;
    input_4_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_5_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_5_0_ce0 : OUT STD_LOGIC;
    input_5_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_6_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_6_0_ce0 : OUT STD_LOGIC;
    input_6_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_7_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_7_0_ce0 : OUT STD_LOGIC;
    input_7_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_8_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_8_0_ce0 : OUT STD_LOGIC;
    input_8_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_9_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_9_0_ce0 : OUT STD_LOGIC;
    input_9_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_10_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_10_0_ce0 : OUT STD_LOGIC;
    input_10_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_11_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_11_0_ce0 : OUT STD_LOGIC;
    input_11_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_12_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_12_0_ce0 : OUT STD_LOGIC;
    input_12_0_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    input_ref_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_ref_0_ce0 : OUT STD_LOGIC;
    input_ref_0_we0 : OUT STD_LOGIC;
    input_ref_0_d0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
end;


architecture behav of top_accelerator_360_Pipeline_VITIS_LOOP_176_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv14_9E : STD_LOGIC_VECTOR (13 downto 0) := "00000010011110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_D : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln176_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_37_reg_516 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln177_1_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln176_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_urem_fu_104 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal select_ln176_fu_405_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul_fu_108 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln176_2_fu_337_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_phi_mul_load : STD_LOGIC_VECTOR (13 downto 0);
    signal i_fu_112 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln176_fu_328_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_37 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_0_0_ce0_local : STD_LOGIC;
    signal input_1_0_ce0_local : STD_LOGIC;
    signal input_2_0_ce0_local : STD_LOGIC;
    signal input_3_0_ce0_local : STD_LOGIC;
    signal input_4_0_ce0_local : STD_LOGIC;
    signal input_5_0_ce0_local : STD_LOGIC;
    signal input_6_0_ce0_local : STD_LOGIC;
    signal input_7_0_ce0_local : STD_LOGIC;
    signal input_8_0_ce0_local : STD_LOGIC;
    signal input_9_0_ce0_local : STD_LOGIC;
    signal input_10_0_ce0_local : STD_LOGIC;
    signal input_11_0_ce0_local : STD_LOGIC;
    signal input_12_0_ce0_local : STD_LOGIC;
    signal input_ref_0_we0_local : STD_LOGIC;
    signal shl_ln_fu_481_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal input_ref_0_ce0_local : STD_LOGIC;
    signal tmp_fu_343_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln177_fu_353_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln177_fu_357_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln176_1_fu_393_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln176_1_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln_fu_421_p27 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln_fu_421_p28 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p29 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal sext_ln_fu_421_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln_fu_421_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_sparsemux_27_4_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        din4 : IN STD_LOGIC_VECTOR (4 downto 0);
        din5 : IN STD_LOGIC_VECTOR (4 downto 0);
        din6 : IN STD_LOGIC_VECTOR (4 downto 0);
        din7 : IN STD_LOGIC_VECTOR (4 downto 0);
        din8 : IN STD_LOGIC_VECTOR (4 downto 0);
        din9 : IN STD_LOGIC_VECTOR (4 downto 0);
        din10 : IN STD_LOGIC_VECTOR (4 downto 0);
        din11 : IN STD_LOGIC_VECTOR (4 downto 0);
        din12 : IN STD_LOGIC_VECTOR (4 downto 0);
        def : IN STD_LOGIC_VECTOR (4 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_27_4_5_1_1_U1551 : component top_sparsemux_27_4_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 5,
        CASE1 => "0001",
        din1_WIDTH => 5,
        CASE2 => "0010",
        din2_WIDTH => 5,
        CASE3 => "0011",
        din3_WIDTH => 5,
        CASE4 => "0100",
        din4_WIDTH => 5,
        CASE5 => "0101",
        din5_WIDTH => 5,
        CASE6 => "0110",
        din6_WIDTH => 5,
        CASE7 => "0111",
        din7_WIDTH => 5,
        CASE8 => "1000",
        din8_WIDTH => 5,
        CASE9 => "1001",
        din9_WIDTH => 5,
        CASE10 => "1010",
        din10_WIDTH => 5,
        CASE11 => "1011",
        din11_WIDTH => 5,
        CASE12 => "1100",
        din12_WIDTH => 5,
        def_WIDTH => 5,
        sel_WIDTH => 4,
        dout_WIDTH => 5)
    port map (
        din0 => input_0_0_q0,
        din1 => input_1_0_q0,
        din2 => input_2_0_q0,
        din3 => input_3_0_q0,
        din4 => input_4_0_q0,
        din5 => input_5_0_q0,
        din6 => input_6_0_q0,
        din7 => input_7_0_q0,
        din8 => input_8_0_q0,
        din9 => input_9_0_q0,
        din10 => input_10_0_q0,
        din11 => input_11_0_q0,
        din12 => input_12_0_q0,
        def => sext_ln_fu_421_p27,
        sel => sext_ln_fu_421_p28,
        dout => sext_ln_fu_421_p29);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln176_fu_322_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_112 <= add_ln176_fu_328_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_112 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln176_fu_322_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    phi_mul_fu_108 <= add_ln176_2_fu_337_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul_fu_108 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    phi_urem_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_urem_fu_104 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    phi_urem_fu_104 <= select_ln176_fu_405_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_37_reg_516 <= ap_sig_allocacmp_i_37;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln176_1_fu_393_p2 <= std_logic_vector(unsigned(phi_urem_fu_104) + unsigned(ap_const_lv7_1));
    add_ln176_2_fu_337_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_mul_load) + unsigned(ap_const_lv14_9E));
    add_ln176_fu_328_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_37) + unsigned(ap_const_lv7_1));
    add_ln177_fu_357_p2 <= std_logic_vector(unsigned(mul_ln177) + unsigned(zext_ln177_fu_353_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln176_fu_322_p2)
    begin
        if (((icmp_ln176_fu_322_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_37_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_37 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_37 <= i_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_phi_mul_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, phi_mul_fu_108)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_phi_mul_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_phi_mul_load <= phi_mul_fu_108;
        end if; 
    end process;

    icmp_ln176_1_fu_399_p2 <= "1" when (unsigned(add_ln176_1_fu_393_p2) < unsigned(ap_const_lv7_D)) else "0";
    icmp_ln176_fu_322_p2 <= "1" when (ap_sig_allocacmp_i_37 = ap_const_lv7_40) else "0";
    input_0_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_0_0_ce0 <= input_0_0_ce0_local;

    input_0_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_0_ce0_local <= ap_const_logic_1;
        else 
            input_0_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_10_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_10_0_ce0 <= input_10_0_ce0_local;

    input_10_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_10_0_ce0_local <= ap_const_logic_1;
        else 
            input_10_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_11_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_11_0_ce0 <= input_11_0_ce0_local;

    input_11_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_11_0_ce0_local <= ap_const_logic_1;
        else 
            input_11_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_12_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_12_0_ce0 <= input_12_0_ce0_local;

    input_12_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_12_0_ce0_local <= ap_const_logic_1;
        else 
            input_12_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_1_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_1_0_ce0 <= input_1_0_ce0_local;

    input_1_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_1_0_ce0_local <= ap_const_logic_1;
        else 
            input_1_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_2_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_2_0_ce0 <= input_2_0_ce0_local;

    input_2_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_2_0_ce0_local <= ap_const_logic_1;
        else 
            input_2_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_3_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_3_0_ce0 <= input_3_0_ce0_local;

    input_3_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_3_0_ce0_local <= ap_const_logic_1;
        else 
            input_3_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_4_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_4_0_ce0 <= input_4_0_ce0_local;

    input_4_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_4_0_ce0_local <= ap_const_logic_1;
        else 
            input_4_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_5_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_5_0_ce0 <= input_5_0_ce0_local;

    input_5_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_5_0_ce0_local <= ap_const_logic_1;
        else 
            input_5_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_6_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_6_0_ce0 <= input_6_0_ce0_local;

    input_6_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_6_0_ce0_local <= ap_const_logic_1;
        else 
            input_6_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_7_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_7_0_ce0 <= input_7_0_ce0_local;

    input_7_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_7_0_ce0_local <= ap_const_logic_1;
        else 
            input_7_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_8_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_8_0_ce0 <= input_8_0_ce0_local;

    input_8_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_8_0_ce0_local <= ap_const_logic_1;
        else 
            input_8_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_9_0_address0 <= zext_ln177_1_fu_363_p1(11 - 1 downto 0);
    input_9_0_ce0 <= input_9_0_ce0_local;

    input_9_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_9_0_ce0_local <= ap_const_logic_1;
        else 
            input_9_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_ref_0_address0 <= zext_ln176_fu_413_p1(6 - 1 downto 0);
    input_ref_0_ce0 <= input_ref_0_ce0_local;

    input_ref_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_ref_0_ce0_local <= ap_const_logic_1;
        else 
            input_ref_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_ref_0_d0 <= shl_ln_fu_481_p3;
    input_ref_0_we0 <= input_ref_0_we0_local;

    input_ref_0_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_ref_0_we0_local <= ap_const_logic_1;
        else 
            input_ref_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln176_fu_405_p3 <= 
        add_ln176_1_fu_393_p2 when (icmp_ln176_1_fu_399_p2(0) = '1') else 
        ap_const_lv7_0;
    sext_ln_fu_421_p27 <= "XXXXX";
    sext_ln_fu_421_p28 <= phi_urem_fu_104(4 - 1 downto 0);
    shl_ln_fu_481_p3 <= (sext_ln_fu_421_p29 & ap_const_lv17_0);
    tmp_fu_343_p4 <= ap_sig_allocacmp_phi_mul_load(13 downto 11);
    zext_ln176_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_37_reg_516),64));
    zext_ln177_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_fu_357_p2),64));
    zext_ln177_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_343_p4),11));
end behav;
