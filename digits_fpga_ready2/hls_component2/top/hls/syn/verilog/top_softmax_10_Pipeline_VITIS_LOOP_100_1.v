// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_softmax_10_Pipeline_VITIS_LOOP_100_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        trunc_ln95_1,
        int_part,
        phi_ln102_out,
        phi_ln102_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [22:0] trunc_ln95_1;
input  [6:0] int_part;
output  [24:0] phi_ln102_out;
output   phi_ln102_out_ap_vld;

reg ap_idle;
reg phi_ln102_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln100_fu_95_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [24:0] phi_ln102_fu_46;
wire   [24:0] shl_ln3_fu_110_p3;
wire    ap_loop_init;
reg   [6:0] i_8_fu_50;
wire   [6:0] add_ln100_fu_101_p2;
reg   [6:0] ap_sig_allocacmp_i_8_load;
reg   [22:0] empty_fu_54;
wire   [22:0] shl_ln100_fu_118_p2;
reg   [22:0] ap_sig_allocacmp_p_load;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 phi_ln102_fu_46 = 25'd0;
#0 i_8_fu_50 = 7'd0;
#0 empty_fu_54 = 23'd0;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln100_fu_95_p2 == 1'd0)) begin
            empty_fu_54 <= shl_ln100_fu_118_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            empty_fu_54 <= trunc_ln95_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln100_fu_95_p2 == 1'd0)) begin
            i_8_fu_50 <= add_ln100_fu_101_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_8_fu_50 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln100_fu_95_p2 == 1'd0)) begin
                        phi_ln102_fu_46[24 : 2] <= shl_ln3_fu_110_p3[24 : 2];
        end else if ((ap_loop_init == 1'b1)) begin
                        phi_ln102_fu_46[2] <= 1'b0;
            phi_ln102_fu_46[3] <= 1'b0;
            phi_ln102_fu_46[4] <= 1'b0;
            phi_ln102_fu_46[5] <= 1'b0;
            phi_ln102_fu_46[6] <= 1'b0;
            phi_ln102_fu_46[7] <= 1'b0;
            phi_ln102_fu_46[8] <= 1'b0;
            phi_ln102_fu_46[9] <= 1'b0;
            phi_ln102_fu_46[10] <= 1'b0;
            phi_ln102_fu_46[11] <= 1'b0;
            phi_ln102_fu_46[12] <= 1'b0;
            phi_ln102_fu_46[13] <= 1'b0;
            phi_ln102_fu_46[14] <= 1'b0;
            phi_ln102_fu_46[15] <= 1'b0;
            phi_ln102_fu_46[16] <= 1'b0;
            phi_ln102_fu_46[17] <= 1'b0;
            phi_ln102_fu_46[18] <= 1'b0;
            phi_ln102_fu_46[19] <= 1'b0;
            phi_ln102_fu_46[20] <= 1'b0;
            phi_ln102_fu_46[21] <= 1'b0;
            phi_ln102_fu_46[22] <= 1'b0;
            phi_ln102_fu_46[23] <= 1'b0;
            phi_ln102_fu_46[24] <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_95_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_8_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_8_load = i_8_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_p_load = trunc_ln95_1;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln100_fu_95_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln102_out_ap_vld = 1'b1;
    end else begin
        phi_ln102_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_101_p2 = (ap_sig_allocacmp_i_8_load + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln100_fu_95_p2 = ((ap_sig_allocacmp_i_8_load == int_part) ? 1'b1 : 1'b0);

assign phi_ln102_out = phi_ln102_fu_46;

assign shl_ln100_fu_118_p2 = ap_sig_allocacmp_p_load << 23'd2;

assign shl_ln3_fu_110_p3 = {{ap_sig_allocacmp_p_load}, {2'd0}};

always @ (posedge ap_clk) begin
    phi_ln102_fu_46[1:0] <= 2'b00;
end

endmodule //top_softmax_10_Pipeline_VITIS_LOOP_100_1
