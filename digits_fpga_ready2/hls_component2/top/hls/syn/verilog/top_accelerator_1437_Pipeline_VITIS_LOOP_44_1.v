// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_accelerator_1437_Pipeline_VITIS_LOOP_44_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        result_l2_load,
        result_l2_11_load,
        result_l2_12_load,
        result_l2_13_load,
        input_T_load_out,
        input_T_load_out_ap_vld,
        input_T_6_load_out,
        input_T_6_load_out_ap_vld,
        input_T_9_load_1_out,
        input_T_9_load_1_out_ap_vld,
        input_T_12_load_out,
        input_T_12_load_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [24:0] result_l2_load;
input  [24:0] result_l2_11_load;
input  [24:0] result_l2_12_load;
input  [24:0] result_l2_13_load;
output  [24:0] input_T_load_out;
output   input_T_load_out_ap_vld;
output  [24:0] input_T_6_load_out;
output   input_T_6_load_out_ap_vld;
output  [24:0] input_T_9_load_1_out;
output   input_T_9_load_1_out_ap_vld;
output  [24:0] input_T_12_load_out;
output   input_T_12_load_out_ap_vld;

reg ap_idle;
reg input_T_load_out_ap_vld;
reg input_T_6_load_out_ap_vld;
reg input_T_9_load_1_out_ap_vld;
reg input_T_12_load_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln44_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] i_40_fu_56;
wire   [2:0] i_41_fu_142_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
reg   [24:0] transposed_6_06_fu_60;
wire   [24:0] input_T_fu_152_p11;
wire   [1:0] trunc_ln44_fu_148_p1;
reg   [24:0] transposed_5_07_fu_64;
reg   [24:0] transposed_4_08_fu_68;
reg   [24:0] transposed_09_fu_72;
wire   [24:0] input_T_fu_152_p9;
wire   [1:0] input_T_fu_152_p10;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] input_T_fu_152_p1;
wire   [1:0] input_T_fu_152_p3;
wire  signed [1:0] input_T_fu_152_p5;
wire  signed [1:0] input_T_fu_152_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_40_fu_56 = 3'd0;
#0 transposed_6_06_fu_60 = 25'd0;
#0 transposed_5_07_fu_64 = 25'd0;
#0 transposed_4_08_fu_68 = 25'd0;
#0 transposed_09_fu_72 = 25'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) top_sparsemux_9_2_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 25 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 25 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 25 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 25 ),
    .def_WIDTH( 25 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 25 ))
sparsemux_9_2_25_1_1_U725(
    .din0(result_l2_load),
    .din1(result_l2_11_load),
    .din2(result_l2_12_load),
    .din3(result_l2_13_load),
    .def(input_T_fu_152_p9),
    .sel(input_T_fu_152_p10),
    .dout(input_T_fu_152_p11)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln44_fu_136_p2 == 1'd0)) begin
            i_40_fu_56 <= i_41_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_40_fu_56 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_fu_148_p1 == 2'd0) & (icmp_ln44_fu_136_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        transposed_09_fu_72 <= input_T_fu_152_p11;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_fu_148_p1 == 2'd1) & (icmp_ln44_fu_136_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        transposed_4_08_fu_68 <= input_T_fu_152_p11;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_fu_148_p1 == 2'd2) & (icmp_ln44_fu_136_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        transposed_5_07_fu_64 <= input_T_fu_152_p11;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln44_fu_148_p1 == 2'd3) & (icmp_ln44_fu_136_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        transposed_6_06_fu_60 <= input_T_fu_152_p11;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_136_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_40_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_136_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_T_12_load_out_ap_vld = 1'b1;
    end else begin
        input_T_12_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_136_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_T_6_load_out_ap_vld = 1'b1;
    end else begin
        input_T_6_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_136_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_T_9_load_1_out_ap_vld = 1'b1;
    end else begin
        input_T_9_load_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln44_fu_136_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        input_T_load_out_ap_vld = 1'b1;
    end else begin
        input_T_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_41_fu_142_p2 = (ap_sig_allocacmp_i + 3'd1);

assign icmp_ln44_fu_136_p2 = ((ap_sig_allocacmp_i == 3'd4) ? 1'b1 : 1'b0);

assign input_T_12_load_out = transposed_6_06_fu_60;

assign input_T_6_load_out = transposed_4_08_fu_68;

assign input_T_9_load_1_out = transposed_5_07_fu_64;

assign input_T_fu_152_p10 = ap_sig_allocacmp_i[1:0];

assign input_T_fu_152_p9 = 'bx;

assign input_T_load_out = transposed_09_fu_72;

assign trunc_ln44_fu_148_p1 = ap_sig_allocacmp_i[1:0];

endmodule //top_accelerator_1437_Pipeline_VITIS_LOOP_44_1
