// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_forwardPropagation_4_10_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights_0_address0,
        weights_0_ce0,
        weights_0_q0,
        weights_1_address0,
        weights_1_ce0,
        weights_1_q0,
        weights_2_address0,
        weights_2_ce0,
        weights_2_q0,
        weights_3_address0,
        weights_3_ce0,
        weights_3_q0,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        C_0_address0,
        C_0_ce0,
        C_0_we0,
        C_0_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] weights_0_address0;
output   weights_0_ce0;
input  [24:0] weights_0_q0;
output  [3:0] weights_1_address0;
output   weights_1_ce0;
input  [24:0] weights_1_q0;
output  [3:0] weights_2_address0;
output   weights_2_ce0;
input  [24:0] weights_2_q0;
output  [3:0] weights_3_address0;
output   weights_3_ce0;
input  [24:0] weights_3_q0;
input  [24:0] p_read;
input  [24:0] p_read1;
input  [24:0] p_read2;
input  [24:0] p_read3;
output  [3:0] C_0_address0;
output   C_0_ce0;
output   C_0_we0;
output  [24:0] C_0_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln71_fu_227_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln71_fu_233_p2;
reg   [5:0] add_ln71_reg_441;
wire   [0:0] icmp_ln74_fu_251_p2;
reg   [0:0] icmp_ln74_reg_446;
wire   [2:0] select_ln71_fu_257_p3;
reg   [2:0] select_ln71_reg_451;
wire   [3:0] select_ln71_5_fu_265_p3;
reg   [3:0] select_ln71_5_reg_456;
wire   [1:0] trunc_ln74_fu_282_p1;
reg   [1:0] trunc_ln74_reg_481;
wire   [24:0] tmp_8_fu_286_p11;
reg  signed [24:0] tmp_8_reg_486;
reg   [3:0] C_0_addr_reg_491;
wire   [63:0] zext_ln71_fu_273_p1;
reg   [24:0] temp_fu_96;
wire    ap_loop_init;
reg   [2:0] k_fu_100;
wire   [2:0] k_3_fu_381_p2;
reg   [2:0] ap_sig_allocacmp_k_load;
reg   [3:0] i_fu_104;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [5:0] indvar_flatten_fu_108;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
reg    weights_0_ce0_local;
reg    weights_1_ce0_local;
reg    weights_2_ce0_local;
reg    weights_3_ce0_local;
reg    C_0_we0_local;
wire   [0:0] icmp_ln74_3_fu_386_p2;
reg    C_0_ce0_local;
wire   [3:0] i_22_fu_245_p2;
wire   [24:0] tmp_8_fu_286_p9;
wire   [1:0] tmp_8_fu_286_p10;
wire   [24:0] tmp_fu_313_p9;
wire  signed [24:0] tmp_fu_313_p11;
wire   [24:0] select_ln71_6_fu_345_p3;
wire   [49:0] mul_ln79_fu_200_p2;
wire   [41:0] add_ln79_fu_364_p0;
wire   [41:0] add_ln79_fu_364_p1;
wire   [41:0] add_ln79_fu_364_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] tmp_8_fu_286_p1;
wire   [1:0] tmp_8_fu_286_p3;
wire  signed [1:0] tmp_8_fu_286_p5;
wire  signed [1:0] tmp_8_fu_286_p7;
wire   [1:0] tmp_fu_313_p1;
wire   [1:0] tmp_fu_313_p3;
wire  signed [1:0] tmp_fu_313_p5;
wire  signed [1:0] tmp_fu_313_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 temp_fu_96 = 25'd0;
#0 k_fu_100 = 3'd0;
#0 i_fu_104 = 4'd0;
#0 indvar_flatten_fu_108 = 6'd0;
#0 ap_done_reg = 1'b0;
end

top_mul_25s_25s_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25s_25s_50_1_1_U395(
    .din0(tmp_8_reg_486),
    .din1(tmp_fu_313_p11),
    .dout(mul_ln79_fu_200_p2)
);

(* dissolve_hierarchy = "yes" *) top_sparsemux_9_2_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 25 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 25 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 25 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 25 ),
    .def_WIDTH( 25 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 25 ))
sparsemux_9_2_25_1_1_U396(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .def(tmp_8_fu_286_p9),
    .sel(tmp_8_fu_286_p10),
    .dout(tmp_8_fu_286_p11)
);

(* dissolve_hierarchy = "yes" *) top_sparsemux_9_2_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 25 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 25 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 25 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 25 ),
    .def_WIDTH( 25 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 25 ))
sparsemux_9_2_25_1_1_U397(
    .din0(weights_0_q0),
    .din1(weights_1_q0),
    .din2(weights_2_q0),
    .din3(weights_3_q0),
    .def(tmp_fu_313_p9),
    .sel(trunc_ln74_reg_481),
    .dout(tmp_fu_313_p11)
);

top_add_42ns_42ns_42_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 42 ),
    .din1_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
add_42ns_42ns_42_1_1_U398(
    .din0(add_ln79_fu_364_p0),
    .din1(add_ln79_fu_364_p1),
    .dout(add_ln79_fu_364_p2)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_104 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_fu_104 <= select_ln71_5_reg_456;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_108 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_fu_108 <= add_ln71_reg_441;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        k_fu_100 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_fu_100 <= k_3_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        temp_fu_96 <= 25'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_fu_96 <= {{add_ln79_fu_364_p2[41:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        C_0_addr_reg_491 <= zext_ln71_fu_273_p1;
        add_ln71_reg_441 <= add_ln71_fu_233_p2;
        icmp_ln74_reg_446 <= icmp_ln74_fu_251_p2;
        select_ln71_5_reg_456 <= select_ln71_5_fu_265_p3;
        select_ln71_reg_451 <= select_ln71_fu_257_p3;
        tmp_8_reg_486 <= tmp_8_fu_286_p11;
        trunc_ln74_reg_481 <= trunc_ln74_fu_282_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        C_0_ce0_local = 1'b1;
    end else begin
        C_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln74_3_fu_386_p2 == 1'd1))) begin
        C_0_we0_local = 1'b1;
    end else begin
        C_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln71_fu_227_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_104;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_108;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_load = 3'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_0_ce0_local = 1'b1;
    end else begin
        weights_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_1_ce0_local = 1'b1;
    end else begin
        weights_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_2_ce0_local = 1'b1;
    end else begin
        weights_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_3_ce0_local = 1'b1;
    end else begin
        weights_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln71_fu_227_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_0_address0 = C_0_addr_reg_491;

assign C_0_ce0 = C_0_ce0_local;

assign C_0_d0 = {{add_ln79_fu_364_p2[41:17]}};

assign C_0_we0 = C_0_we0_local;

assign add_ln71_fu_233_p2 = (ap_sig_allocacmp_indvar_flatten_load + 6'd1);

assign add_ln79_fu_364_p0 = {{select_ln71_6_fu_345_p3}, {17'd0}};

assign add_ln79_fu_364_p1 = mul_ln79_fu_200_p2[41:0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_22_fu_245_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign icmp_ln71_fu_227_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln74_3_fu_386_p2 = ((k_3_fu_381_p2 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_251_p2 = ((ap_sig_allocacmp_k_load == 3'd4) ? 1'b1 : 1'b0);

assign k_3_fu_381_p2 = (select_ln71_reg_451 + 3'd1);

assign select_ln71_5_fu_265_p3 = ((icmp_ln74_fu_251_p2[0:0] == 1'b1) ? i_22_fu_245_p2 : ap_sig_allocacmp_i_load);

assign select_ln71_6_fu_345_p3 = ((icmp_ln74_reg_446[0:0] == 1'b1) ? 25'd0 : temp_fu_96);

assign select_ln71_fu_257_p3 = ((icmp_ln74_fu_251_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_k_load);

assign tmp_8_fu_286_p10 = select_ln71_fu_257_p3[1:0];

assign tmp_8_fu_286_p9 = 'bx;

assign tmp_fu_313_p9 = 'bx;

assign trunc_ln74_fu_282_p1 = select_ln71_fu_257_p3[1:0];

assign weights_0_address0 = zext_ln71_fu_273_p1;

assign weights_0_ce0 = weights_0_ce0_local;

assign weights_1_address0 = zext_ln71_fu_273_p1;

assign weights_1_ce0 = weights_1_ce0_local;

assign weights_2_address0 = zext_ln71_fu_273_p1;

assign weights_2_ce0 = weights_2_ce0_local;

assign weights_3_address0 = zext_ln71_fu_273_p1;

assign weights_3_ce0 = weights_3_ce0_local;

assign zext_ln71_fu_273_p1 = select_ln71_5_fu_265_p3;

endmodule //top_forwardPropagation_4_10_Pipeline_VITIS_LOOP_71_1_VITIS_LOOP_74_3
