// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_accelerator_360_Pipeline_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln5674,
        empty,
        y_test_address0,
        y_test_ce0,
        y_test_q0,
        y_test_address1,
        y_test_ce1,
        y_test_q1,
        p_result_3_out,
        p_result_3_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] zext_ln5674;
input  [11:0] empty;
output  [11:0] y_test_address0;
output   y_test_ce0;
input  [0:0] y_test_q0;
output  [11:0] y_test_address1;
output   y_test_ce1;
input  [0:0] y_test_q1;
output  [31:0] p_result_3_out;
output   p_result_3_out_ap_vld;

reg ap_idle;
reg p_result_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln5658_fu_114_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] p_result_2_reg_187;
wire   [63:0] zext_ln5653_fu_135_p1;
reg   [63:0] zext_ln5653_reg_195;
wire    ap_block_pp0_stage0;
reg   [3:0] idx60_fu_36;
wire   [3:0] add_ln5658_fu_120_p2;
wire    ap_loop_init;
reg   [63:0] p_result_1_fu_40;
wire   [63:0] p_result_fu_157_p3;
wire   [63:0] zext_ln5674_cast_fu_88_p1;
reg   [63:0] ap_sig_allocacmp_p_result_2;
wire    ap_block_pp0_stage0_01001;
reg    y_test_ce1_local;
reg    y_test_ce0_local;
wire   [11:0] zext_ln5658_fu_126_p1;
wire   [11:0] add_ln5658_1_fu_130_p2;
wire   [0:0] xor_ln43_fu_145_p2;
wire   [0:0] and_ln43_fu_151_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 idx60_fu_36 = 4'd0;
#0 p_result_1_fu_40 = 64'd0;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            idx60_fu_36 <= 4'd0;
        end else if (((icmp_ln5658_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            idx60_fu_36 <= add_ln5658_fu_120_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            p_result_1_fu_40 <= zext_ln5674_cast_fu_88_p1;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            p_result_1_fu_40 <= p_result_fu_157_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_result_2_reg_187 <= ap_sig_allocacmp_p_result_2;
        zext_ln5653_reg_195[11 : 0] <= zext_ln5653_fu_135_p1[11 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln5658_fu_114_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_result_2 = p_result_fu_157_p3;
    end else begin
        ap_sig_allocacmp_p_result_2 = p_result_1_fu_40;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln5658_fu_114_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_result_3_out_ap_vld = 1'b1;
    end else begin
        p_result_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_test_ce0_local = 1'b1;
    end else begin
        y_test_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_test_ce1_local = 1'b1;
    end else begin
        y_test_ce1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln5658_1_fu_130_p2 = (zext_ln5658_fu_126_p1 + empty);

assign add_ln5658_fu_120_p2 = (idx60_fu_36 + 4'd1);

assign and_ln43_fu_151_p2 = (y_test_q0 & xor_ln43_fu_145_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln5658_fu_114_p2 = ((idx60_fu_36 == 4'd9) ? 1'b1 : 1'b0);

assign p_result_3_out = ap_sig_allocacmp_p_result_2[31:0];

assign p_result_fu_157_p3 = ((and_ln43_fu_151_p2[0:0] == 1'b1) ? zext_ln5653_reg_195 : p_result_2_reg_187);

assign xor_ln43_fu_145_p2 = (y_test_q1 ^ 1'd1);

assign y_test_address0 = zext_ln5653_fu_135_p1;

assign y_test_address1 = ap_sig_allocacmp_p_result_2;

assign y_test_ce0 = y_test_ce0_local;

assign y_test_ce1 = y_test_ce1_local;

assign zext_ln5653_fu_135_p1 = add_ln5658_1_fu_130_p2;

assign zext_ln5658_fu_126_p1 = add_ln5658_fu_120_p2;

assign zext_ln5674_cast_fu_88_p1 = zext_ln5674;

always @ (posedge ap_clk) begin
    zext_ln5653_reg_195[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //top_accelerator_360_Pipeline_3
