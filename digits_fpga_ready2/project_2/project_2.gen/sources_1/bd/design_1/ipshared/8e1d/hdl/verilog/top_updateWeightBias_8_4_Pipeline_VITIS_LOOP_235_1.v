// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_updateWeightBias_8_4_Pipeline_VITIS_LOOP_235_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        biases_0_i,
        biases_0_o,
        biases_0_o_ap_vld,
        biases_3_i,
        biases_3_o,
        biases_3_o_ap_vld,
        biases_2_i,
        biases_2_o,
        biases_2_o_ap_vld,
        biases_1_i,
        biases_1_o,
        biases_1_o_ap_vld,
        weights_7_address0,
        weights_7_ce0,
        weights_7_we0,
        weights_7_d0,
        weights_7_address1,
        weights_7_ce1,
        weights_7_q1,
        weights_6_address0,
        weights_6_ce0,
        weights_6_we0,
        weights_6_d0,
        weights_6_address1,
        weights_6_ce1,
        weights_6_q1,
        weights_5_address0,
        weights_5_ce0,
        weights_5_we0,
        weights_5_d0,
        weights_5_address1,
        weights_5_ce1,
        weights_5_q1,
        weights_4_address0,
        weights_4_ce0,
        weights_4_we0,
        weights_4_d0,
        weights_4_address1,
        weights_4_ce1,
        weights_4_q1,
        weights_3_address0,
        weights_3_ce0,
        weights_3_we0,
        weights_3_d0,
        weights_3_address1,
        weights_3_ce1,
        weights_3_q1,
        weights_2_address0,
        weights_2_ce0,
        weights_2_we0,
        weights_2_d0,
        weights_2_address1,
        weights_2_ce1,
        weights_2_q1,
        weights_1_address0,
        weights_1_ce0,
        weights_1_we0,
        weights_1_d0,
        weights_1_address1,
        weights_1_ce1,
        weights_1_q1,
        weights_0_address0,
        weights_0_ce0,
        weights_0_we0,
        weights_0_d0,
        weights_0_address1,
        weights_0_ce1,
        weights_0_q1,
        update_temp_mat_address0,
        update_temp_mat_ce0,
        update_temp_mat_q0,
        update_temp_mat_8_address0,
        update_temp_mat_8_ce0,
        update_temp_mat_8_q0,
        update_temp_mat_9_address0,
        update_temp_mat_9_ce0,
        update_temp_mat_9_q0,
        update_temp_mat_10_address0,
        update_temp_mat_10_ce0,
        update_temp_mat_10_q0,
        update_temp_mat_11_address0,
        update_temp_mat_11_ce0,
        update_temp_mat_11_q0,
        update_temp_mat_12_address0,
        update_temp_mat_12_ce0,
        update_temp_mat_12_q0,
        update_temp_mat_13_address0,
        update_temp_mat_13_ce0,
        update_temp_mat_13_q0,
        update_temp_mat_14_address0,
        update_temp_mat_14_ce0,
        update_temp_mat_14_q0,
        p_read,
        p_read1,
        p_read2,
        p_read3
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [24:0] biases_0_i;
output  [24:0] biases_0_o;
output   biases_0_o_ap_vld;
input  [24:0] biases_3_i;
output  [24:0] biases_3_o;
output   biases_3_o_ap_vld;
input  [24:0] biases_2_i;
output  [24:0] biases_2_o;
output   biases_2_o_ap_vld;
input  [24:0] biases_1_i;
output  [24:0] biases_1_o;
output   biases_1_o_ap_vld;
output  [1:0] weights_7_address0;
output   weights_7_ce0;
output   weights_7_we0;
output  [24:0] weights_7_d0;
output  [1:0] weights_7_address1;
output   weights_7_ce1;
input  [24:0] weights_7_q1;
output  [1:0] weights_6_address0;
output   weights_6_ce0;
output   weights_6_we0;
output  [24:0] weights_6_d0;
output  [1:0] weights_6_address1;
output   weights_6_ce1;
input  [24:0] weights_6_q1;
output  [1:0] weights_5_address0;
output   weights_5_ce0;
output   weights_5_we0;
output  [24:0] weights_5_d0;
output  [1:0] weights_5_address1;
output   weights_5_ce1;
input  [24:0] weights_5_q1;
output  [1:0] weights_4_address0;
output   weights_4_ce0;
output   weights_4_we0;
output  [24:0] weights_4_d0;
output  [1:0] weights_4_address1;
output   weights_4_ce1;
input  [24:0] weights_4_q1;
output  [1:0] weights_3_address0;
output   weights_3_ce0;
output   weights_3_we0;
output  [24:0] weights_3_d0;
output  [1:0] weights_3_address1;
output   weights_3_ce1;
input  [24:0] weights_3_q1;
output  [1:0] weights_2_address0;
output   weights_2_ce0;
output   weights_2_we0;
output  [24:0] weights_2_d0;
output  [1:0] weights_2_address1;
output   weights_2_ce1;
input  [24:0] weights_2_q1;
output  [1:0] weights_1_address0;
output   weights_1_ce0;
output   weights_1_we0;
output  [24:0] weights_1_d0;
output  [1:0] weights_1_address1;
output   weights_1_ce1;
input  [24:0] weights_1_q1;
output  [1:0] weights_0_address0;
output   weights_0_ce0;
output   weights_0_we0;
output  [24:0] weights_0_d0;
output  [1:0] weights_0_address1;
output   weights_0_ce1;
input  [24:0] weights_0_q1;
output  [1:0] update_temp_mat_address0;
output   update_temp_mat_ce0;
input  [24:0] update_temp_mat_q0;
output  [1:0] update_temp_mat_8_address0;
output   update_temp_mat_8_ce0;
input  [24:0] update_temp_mat_8_q0;
output  [1:0] update_temp_mat_9_address0;
output   update_temp_mat_9_ce0;
input  [24:0] update_temp_mat_9_q0;
output  [1:0] update_temp_mat_10_address0;
output   update_temp_mat_10_ce0;
input  [24:0] update_temp_mat_10_q0;
output  [1:0] update_temp_mat_11_address0;
output   update_temp_mat_11_ce0;
input  [24:0] update_temp_mat_11_q0;
output  [1:0] update_temp_mat_12_address0;
output   update_temp_mat_12_ce0;
input  [24:0] update_temp_mat_12_q0;
output  [1:0] update_temp_mat_13_address0;
output   update_temp_mat_13_ce0;
input  [24:0] update_temp_mat_13_q0;
output  [1:0] update_temp_mat_14_address0;
output   update_temp_mat_14_ce0;
input  [24:0] update_temp_mat_14_q0;
input  [24:0] p_read;
input  [24:0] p_read1;
input  [24:0] p_read2;
input  [24:0] p_read3;

reg ap_idle;
reg[24:0] biases_0_o;
reg biases_0_o_ap_vld;
reg[24:0] biases_3_o;
reg biases_3_o_ap_vld;
reg[24:0] biases_2_o;
reg biases_2_o_ap_vld;
reg[24:0] biases_1_o;
reg biases_1_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln235_fu_424_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln235_fu_456_p1;
reg   [1:0] trunc_ln235_reg_805;
reg   [1:0] trunc_ln235_reg_805_pp0_iter1_reg;
reg   [1:0] trunc_ln235_reg_805_pp0_iter2_reg;
reg   [1:0] weights_0_addr_reg_814;
reg   [1:0] weights_0_addr_reg_814_pp0_iter1_reg;
reg   [1:0] weights_0_addr_reg_814_pp0_iter2_reg;
reg   [1:0] weights_0_addr_reg_814_pp0_iter3_reg;
reg   [1:0] weights_1_addr_reg_825;
reg   [1:0] weights_1_addr_reg_825_pp0_iter1_reg;
reg   [1:0] weights_1_addr_reg_825_pp0_iter2_reg;
reg   [1:0] weights_1_addr_reg_825_pp0_iter3_reg;
reg   [1:0] weights_2_addr_reg_836;
reg   [1:0] weights_2_addr_reg_836_pp0_iter1_reg;
reg   [1:0] weights_2_addr_reg_836_pp0_iter2_reg;
reg   [1:0] weights_2_addr_reg_836_pp0_iter3_reg;
reg   [1:0] weights_3_addr_reg_847;
reg   [1:0] weights_3_addr_reg_847_pp0_iter1_reg;
reg   [1:0] weights_3_addr_reg_847_pp0_iter2_reg;
reg   [1:0] weights_3_addr_reg_847_pp0_iter3_reg;
reg   [1:0] weights_4_addr_reg_858;
reg   [1:0] weights_4_addr_reg_858_pp0_iter1_reg;
reg   [1:0] weights_4_addr_reg_858_pp0_iter2_reg;
reg   [1:0] weights_4_addr_reg_858_pp0_iter3_reg;
reg   [1:0] weights_5_addr_reg_869;
reg   [1:0] weights_5_addr_reg_869_pp0_iter1_reg;
reg   [1:0] weights_5_addr_reg_869_pp0_iter2_reg;
reg   [1:0] weights_5_addr_reg_869_pp0_iter3_reg;
reg   [1:0] weights_6_addr_reg_880;
reg   [1:0] weights_6_addr_reg_880_pp0_iter1_reg;
reg   [1:0] weights_6_addr_reg_880_pp0_iter2_reg;
reg   [1:0] weights_6_addr_reg_880_pp0_iter3_reg;
reg   [1:0] weights_7_addr_reg_891;
reg   [1:0] weights_7_addr_reg_891_pp0_iter1_reg;
reg   [1:0] weights_7_addr_reg_891_pp0_iter2_reg;
reg   [1:0] weights_7_addr_reg_891_pp0_iter3_reg;
wire   [24:0] tmp_2_fu_488_p11;
reg   [24:0] tmp_2_reg_902;
reg   [24:0] tmp_2_reg_902_pp0_iter1_reg;
wire   [63:0] zext_ln235_fu_436_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] i_4_fu_104;
wire   [2:0] add_ln235_fu_430_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
reg    update_temp_mat_ce0_local;
reg    update_temp_mat_8_ce0_local;
reg    update_temp_mat_9_ce0_local;
reg    update_temp_mat_10_ce0_local;
reg    update_temp_mat_11_ce0_local;
reg    update_temp_mat_12_ce0_local;
reg    update_temp_mat_13_ce0_local;
reg    update_temp_mat_14_ce0_local;
reg    weights_0_ce1_local;
reg    weights_0_we0_local;
reg    weights_0_ce0_local;
reg    weights_1_ce1_local;
reg    weights_1_we0_local;
reg    weights_1_ce0_local;
reg    weights_2_ce1_local;
reg    weights_2_we0_local;
reg    weights_2_ce0_local;
reg    weights_3_ce1_local;
reg    weights_3_we0_local;
reg    weights_3_ce0_local;
reg    weights_4_ce1_local;
reg    weights_4_we0_local;
reg    weights_4_ce0_local;
reg    weights_5_ce1_local;
reg    weights_5_we0_local;
reg    weights_5_ce0_local;
reg    weights_6_ce1_local;
reg    weights_6_we0_local;
reg    weights_6_ce0_local;
reg    weights_7_ce1_local;
reg    weights_7_we0_local;
reg    weights_7_ce0_local;
wire   [24:0] tmp_1_fu_460_p9;
wire  signed [24:0] tmp_1_fu_460_p11;
wire   [24:0] tmp_2_fu_488_p9;
wire  signed [41:0] grp_fu_713_p3;
wire  signed [41:0] grp_fu_722_p3;
wire  signed [41:0] grp_fu_731_p3;
wire  signed [41:0] grp_fu_740_p3;
wire  signed [41:0] grp_fu_749_p3;
wire  signed [41:0] grp_fu_758_p3;
wire  signed [41:0] grp_fu_767_p3;
wire  signed [41:0] grp_fu_776_p3;
wire  signed [41:0] grp_fu_785_p3;
wire   [7:0] grp_fu_713_p1;
wire  signed [41:0] grp_fu_713_p2;
wire   [7:0] grp_fu_722_p1;
wire  signed [41:0] grp_fu_722_p2;
wire   [7:0] grp_fu_731_p1;
wire  signed [41:0] grp_fu_731_p2;
wire   [7:0] grp_fu_740_p1;
wire  signed [41:0] grp_fu_740_p2;
wire   [7:0] grp_fu_749_p1;
wire  signed [41:0] grp_fu_749_p2;
wire   [7:0] grp_fu_758_p1;
wire  signed [41:0] grp_fu_758_p2;
wire   [7:0] grp_fu_767_p1;
wire  signed [41:0] grp_fu_767_p2;
wire   [7:0] grp_fu_776_p1;
wire  signed [41:0] grp_fu_776_p2;
wire   [7:0] grp_fu_785_p1;
wire  signed [41:0] grp_fu_785_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] tmp_1_fu_460_p1;
wire   [1:0] tmp_1_fu_460_p3;
wire  signed [1:0] tmp_1_fu_460_p5;
wire  signed [1:0] tmp_1_fu_460_p7;
wire   [1:0] tmp_2_fu_488_p1;
wire   [1:0] tmp_2_fu_488_p3;
wire  signed [1:0] tmp_2_fu_488_p5;
wire  signed [1:0] tmp_2_fu_488_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 i_4_fu_104 = 3'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) top_sparsemux_9_2_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 25 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 25 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 25 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 25 ),
    .def_WIDTH( 25 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 25 ))
sparsemux_9_2_25_1_1_U810(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .def(tmp_1_fu_460_p9),
    .sel(trunc_ln235_fu_456_p1),
    .dout(tmp_1_fu_460_p11)
);

(* dissolve_hierarchy = "yes" *) top_sparsemux_9_2_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 25 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 25 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 25 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 25 ),
    .def_WIDTH( 25 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 25 ))
sparsemux_9_2_25_1_1_U811(
    .din0(biases_0_i),
    .din1(biases_1_i),
    .din2(biases_2_i),
    .din3(biases_3_i),
    .def(tmp_2_fu_488_p9),
    .sel(trunc_ln235_fu_456_p1),
    .dout(tmp_2_fu_488_p11)
);

top_mac_mulsub_25s_8ns_42s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
mac_mulsub_25s_8ns_42s_42_4_1_U812(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_fu_460_p11),
    .din1(grp_fu_713_p1),
    .din2(grp_fu_713_p2),
    .ce(1'b1),
    .dout(grp_fu_713_p3)
);

top_mac_mulsub_25s_8ns_42s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
mac_mulsub_25s_8ns_42s_42_4_1_U813(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(update_temp_mat_q0),
    .din1(grp_fu_722_p1),
    .din2(grp_fu_722_p2),
    .ce(1'b1),
    .dout(grp_fu_722_p3)
);

top_mac_mulsub_25s_8ns_42s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
mac_mulsub_25s_8ns_42s_42_4_1_U814(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(update_temp_mat_8_q0),
    .din1(grp_fu_731_p1),
    .din2(grp_fu_731_p2),
    .ce(1'b1),
    .dout(grp_fu_731_p3)
);

top_mac_mulsub_25s_8ns_42s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
mac_mulsub_25s_8ns_42s_42_4_1_U815(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(update_temp_mat_9_q0),
    .din1(grp_fu_740_p1),
    .din2(grp_fu_740_p2),
    .ce(1'b1),
    .dout(grp_fu_740_p3)
);

top_mac_mulsub_25s_8ns_42s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
mac_mulsub_25s_8ns_42s_42_4_1_U816(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(update_temp_mat_10_q0),
    .din1(grp_fu_749_p1),
    .din2(grp_fu_749_p2),
    .ce(1'b1),
    .dout(grp_fu_749_p3)
);

top_mac_mulsub_25s_8ns_42s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
mac_mulsub_25s_8ns_42s_42_4_1_U817(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(update_temp_mat_11_q0),
    .din1(grp_fu_758_p1),
    .din2(grp_fu_758_p2),
    .ce(1'b1),
    .dout(grp_fu_758_p3)
);

top_mac_mulsub_25s_8ns_42s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
mac_mulsub_25s_8ns_42s_42_4_1_U818(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(update_temp_mat_12_q0),
    .din1(grp_fu_767_p1),
    .din2(grp_fu_767_p2),
    .ce(1'b1),
    .dout(grp_fu_767_p3)
);

top_mac_mulsub_25s_8ns_42s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
mac_mulsub_25s_8ns_42s_42_4_1_U819(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(update_temp_mat_13_q0),
    .din1(grp_fu_776_p1),
    .din2(grp_fu_776_p2),
    .ce(1'b1),
    .dout(grp_fu_776_p3)
);

top_mac_mulsub_25s_8ns_42s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 42 ),
    .dout_WIDTH( 42 ))
mac_mulsub_25s_8ns_42s_42_4_1_U820(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(update_temp_mat_14_q0),
    .din1(grp_fu_785_p1),
    .din2(grp_fu_785_p2),
    .ce(1'b1),
    .dout(grp_fu_785_p3)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln235_fu_424_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_4_fu_104 <= add_ln235_fu_430_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_4_fu_104 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        tmp_2_reg_902 <= tmp_2_fu_488_p11;
        tmp_2_reg_902_pp0_iter1_reg <= tmp_2_reg_902;
        trunc_ln235_reg_805 <= trunc_ln235_fu_456_p1;
        trunc_ln235_reg_805_pp0_iter1_reg <= trunc_ln235_reg_805;
        weights_0_addr_reg_814 <= zext_ln235_fu_436_p1;
        weights_0_addr_reg_814_pp0_iter1_reg <= weights_0_addr_reg_814;
        weights_1_addr_reg_825 <= zext_ln235_fu_436_p1;
        weights_1_addr_reg_825_pp0_iter1_reg <= weights_1_addr_reg_825;
        weights_2_addr_reg_836 <= zext_ln235_fu_436_p1;
        weights_2_addr_reg_836_pp0_iter1_reg <= weights_2_addr_reg_836;
        weights_3_addr_reg_847 <= zext_ln235_fu_436_p1;
        weights_3_addr_reg_847_pp0_iter1_reg <= weights_3_addr_reg_847;
        weights_4_addr_reg_858 <= zext_ln235_fu_436_p1;
        weights_4_addr_reg_858_pp0_iter1_reg <= weights_4_addr_reg_858;
        weights_5_addr_reg_869 <= zext_ln235_fu_436_p1;
        weights_5_addr_reg_869_pp0_iter1_reg <= weights_5_addr_reg_869;
        weights_6_addr_reg_880 <= zext_ln235_fu_436_p1;
        weights_6_addr_reg_880_pp0_iter1_reg <= weights_6_addr_reg_880;
        weights_7_addr_reg_891 <= zext_ln235_fu_436_p1;
        weights_7_addr_reg_891_pp0_iter1_reg <= weights_7_addr_reg_891;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        trunc_ln235_reg_805_pp0_iter2_reg <= trunc_ln235_reg_805_pp0_iter1_reg;
        weights_0_addr_reg_814_pp0_iter2_reg <= weights_0_addr_reg_814_pp0_iter1_reg;
        weights_0_addr_reg_814_pp0_iter3_reg <= weights_0_addr_reg_814_pp0_iter2_reg;
        weights_1_addr_reg_825_pp0_iter2_reg <= weights_1_addr_reg_825_pp0_iter1_reg;
        weights_1_addr_reg_825_pp0_iter3_reg <= weights_1_addr_reg_825_pp0_iter2_reg;
        weights_2_addr_reg_836_pp0_iter2_reg <= weights_2_addr_reg_836_pp0_iter1_reg;
        weights_2_addr_reg_836_pp0_iter3_reg <= weights_2_addr_reg_836_pp0_iter2_reg;
        weights_3_addr_reg_847_pp0_iter2_reg <= weights_3_addr_reg_847_pp0_iter1_reg;
        weights_3_addr_reg_847_pp0_iter3_reg <= weights_3_addr_reg_847_pp0_iter2_reg;
        weights_4_addr_reg_858_pp0_iter2_reg <= weights_4_addr_reg_858_pp0_iter1_reg;
        weights_4_addr_reg_858_pp0_iter3_reg <= weights_4_addr_reg_858_pp0_iter2_reg;
        weights_5_addr_reg_869_pp0_iter2_reg <= weights_5_addr_reg_869_pp0_iter1_reg;
        weights_5_addr_reg_869_pp0_iter3_reg <= weights_5_addr_reg_869_pp0_iter2_reg;
        weights_6_addr_reg_880_pp0_iter2_reg <= weights_6_addr_reg_880_pp0_iter1_reg;
        weights_6_addr_reg_880_pp0_iter3_reg <= weights_6_addr_reg_880_pp0_iter2_reg;
        weights_7_addr_reg_891_pp0_iter2_reg <= weights_7_addr_reg_891_pp0_iter1_reg;
        weights_7_addr_reg_891_pp0_iter3_reg <= weights_7_addr_reg_891_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((icmp_ln235_fu_424_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_4_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln235_reg_805_pp0_iter2_reg == 2'd0))) begin
        biases_0_o = {{grp_fu_713_p3[41:17]}};
    end else begin
        biases_0_o = biases_0_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln235_reg_805_pp0_iter2_reg == 2'd0))) begin
        biases_0_o_ap_vld = 1'b1;
    end else begin
        biases_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln235_reg_805_pp0_iter2_reg == 2'd1))) begin
        biases_1_o = {{grp_fu_713_p3[41:17]}};
    end else begin
        biases_1_o = biases_1_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln235_reg_805_pp0_iter2_reg == 2'd1))) begin
        biases_1_o_ap_vld = 1'b1;
    end else begin
        biases_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln235_reg_805_pp0_iter2_reg == 2'd2))) begin
        biases_2_o = {{grp_fu_713_p3[41:17]}};
    end else begin
        biases_2_o = biases_2_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln235_reg_805_pp0_iter2_reg == 2'd2))) begin
        biases_2_o_ap_vld = 1'b1;
    end else begin
        biases_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln235_reg_805_pp0_iter2_reg == 2'd3))) begin
        biases_3_o = {{grp_fu_713_p3[41:17]}};
    end else begin
        biases_3_o = biases_3_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln235_reg_805_pp0_iter2_reg == 2'd3))) begin
        biases_3_o_ap_vld = 1'b1;
    end else begin
        biases_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        update_temp_mat_10_ce0_local = 1'b1;
    end else begin
        update_temp_mat_10_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        update_temp_mat_11_ce0_local = 1'b1;
    end else begin
        update_temp_mat_11_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        update_temp_mat_12_ce0_local = 1'b1;
    end else begin
        update_temp_mat_12_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        update_temp_mat_13_ce0_local = 1'b1;
    end else begin
        update_temp_mat_13_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        update_temp_mat_14_ce0_local = 1'b1;
    end else begin
        update_temp_mat_14_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        update_temp_mat_8_ce0_local = 1'b1;
    end else begin
        update_temp_mat_8_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        update_temp_mat_9_ce0_local = 1'b1;
    end else begin
        update_temp_mat_9_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        update_temp_mat_ce0_local = 1'b1;
    end else begin
        update_temp_mat_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_0_ce0_local = 1'b1;
    end else begin
        weights_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weights_0_ce1_local = 1'b1;
    end else begin
        weights_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_0_we0_local = 1'b1;
    end else begin
        weights_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_1_ce0_local = 1'b1;
    end else begin
        weights_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weights_1_ce1_local = 1'b1;
    end else begin
        weights_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_1_we0_local = 1'b1;
    end else begin
        weights_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_2_ce0_local = 1'b1;
    end else begin
        weights_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weights_2_ce1_local = 1'b1;
    end else begin
        weights_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_2_we0_local = 1'b1;
    end else begin
        weights_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_3_ce0_local = 1'b1;
    end else begin
        weights_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weights_3_ce1_local = 1'b1;
    end else begin
        weights_3_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_3_we0_local = 1'b1;
    end else begin
        weights_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_4_ce0_local = 1'b1;
    end else begin
        weights_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weights_4_ce1_local = 1'b1;
    end else begin
        weights_4_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_4_we0_local = 1'b1;
    end else begin
        weights_4_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_5_ce0_local = 1'b1;
    end else begin
        weights_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weights_5_ce1_local = 1'b1;
    end else begin
        weights_5_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_5_we0_local = 1'b1;
    end else begin
        weights_5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_6_ce0_local = 1'b1;
    end else begin
        weights_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weights_6_ce1_local = 1'b1;
    end else begin
        weights_6_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_6_we0_local = 1'b1;
    end else begin
        weights_6_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_7_ce0_local = 1'b1;
    end else begin
        weights_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weights_7_ce1_local = 1'b1;
    end else begin
        weights_7_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_7_we0_local = 1'b1;
    end else begin
        weights_7_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln235_fu_430_p2 = (ap_sig_allocacmp_i + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign grp_fu_713_p1 = 34'd131;

assign grp_fu_713_p2 = {{tmp_2_reg_902_pp0_iter1_reg}, {17'd0}};

assign grp_fu_722_p1 = 34'd131;

assign grp_fu_722_p2 = {{weights_0_q1}, {17'd0}};

assign grp_fu_731_p1 = 34'd131;

assign grp_fu_731_p2 = {{weights_1_q1}, {17'd0}};

assign grp_fu_740_p1 = 34'd131;

assign grp_fu_740_p2 = {{weights_2_q1}, {17'd0}};

assign grp_fu_749_p1 = 34'd131;

assign grp_fu_749_p2 = {{weights_3_q1}, {17'd0}};

assign grp_fu_758_p1 = 34'd131;

assign grp_fu_758_p2 = {{weights_4_q1}, {17'd0}};

assign grp_fu_767_p1 = 34'd131;

assign grp_fu_767_p2 = {{weights_5_q1}, {17'd0}};

assign grp_fu_776_p1 = 34'd131;

assign grp_fu_776_p2 = {{weights_6_q1}, {17'd0}};

assign grp_fu_785_p1 = 34'd131;

assign grp_fu_785_p2 = {{weights_7_q1}, {17'd0}};

assign icmp_ln235_fu_424_p2 = ((ap_sig_allocacmp_i == 3'd4) ? 1'b1 : 1'b0);

assign tmp_1_fu_460_p9 = 'bx;

assign tmp_2_fu_488_p9 = 'bx;

assign trunc_ln235_fu_456_p1 = ap_sig_allocacmp_i[1:0];

assign update_temp_mat_10_address0 = zext_ln235_fu_436_p1;

assign update_temp_mat_10_ce0 = update_temp_mat_10_ce0_local;

assign update_temp_mat_11_address0 = zext_ln235_fu_436_p1;

assign update_temp_mat_11_ce0 = update_temp_mat_11_ce0_local;

assign update_temp_mat_12_address0 = zext_ln235_fu_436_p1;

assign update_temp_mat_12_ce0 = update_temp_mat_12_ce0_local;

assign update_temp_mat_13_address0 = zext_ln235_fu_436_p1;

assign update_temp_mat_13_ce0 = update_temp_mat_13_ce0_local;

assign update_temp_mat_14_address0 = zext_ln235_fu_436_p1;

assign update_temp_mat_14_ce0 = update_temp_mat_14_ce0_local;

assign update_temp_mat_8_address0 = zext_ln235_fu_436_p1;

assign update_temp_mat_8_ce0 = update_temp_mat_8_ce0_local;

assign update_temp_mat_9_address0 = zext_ln235_fu_436_p1;

assign update_temp_mat_9_ce0 = update_temp_mat_9_ce0_local;

assign update_temp_mat_address0 = zext_ln235_fu_436_p1;

assign update_temp_mat_ce0 = update_temp_mat_ce0_local;

assign weights_0_address0 = weights_0_addr_reg_814_pp0_iter3_reg;

assign weights_0_address1 = weights_0_addr_reg_814_pp0_iter1_reg;

assign weights_0_ce0 = weights_0_ce0_local;

assign weights_0_ce1 = weights_0_ce1_local;

assign weights_0_d0 = {{grp_fu_722_p3[41:17]}};

assign weights_0_we0 = weights_0_we0_local;

assign weights_1_address0 = weights_1_addr_reg_825_pp0_iter3_reg;

assign weights_1_address1 = weights_1_addr_reg_825_pp0_iter1_reg;

assign weights_1_ce0 = weights_1_ce0_local;

assign weights_1_ce1 = weights_1_ce1_local;

assign weights_1_d0 = {{grp_fu_731_p3[41:17]}};

assign weights_1_we0 = weights_1_we0_local;

assign weights_2_address0 = weights_2_addr_reg_836_pp0_iter3_reg;

assign weights_2_address1 = weights_2_addr_reg_836_pp0_iter1_reg;

assign weights_2_ce0 = weights_2_ce0_local;

assign weights_2_ce1 = weights_2_ce1_local;

assign weights_2_d0 = {{grp_fu_740_p3[41:17]}};

assign weights_2_we0 = weights_2_we0_local;

assign weights_3_address0 = weights_3_addr_reg_847_pp0_iter3_reg;

assign weights_3_address1 = weights_3_addr_reg_847_pp0_iter1_reg;

assign weights_3_ce0 = weights_3_ce0_local;

assign weights_3_ce1 = weights_3_ce1_local;

assign weights_3_d0 = {{grp_fu_749_p3[41:17]}};

assign weights_3_we0 = weights_3_we0_local;

assign weights_4_address0 = weights_4_addr_reg_858_pp0_iter3_reg;

assign weights_4_address1 = weights_4_addr_reg_858_pp0_iter1_reg;

assign weights_4_ce0 = weights_4_ce0_local;

assign weights_4_ce1 = weights_4_ce1_local;

assign weights_4_d0 = {{grp_fu_758_p3[41:17]}};

assign weights_4_we0 = weights_4_we0_local;

assign weights_5_address0 = weights_5_addr_reg_869_pp0_iter3_reg;

assign weights_5_address1 = weights_5_addr_reg_869_pp0_iter1_reg;

assign weights_5_ce0 = weights_5_ce0_local;

assign weights_5_ce1 = weights_5_ce1_local;

assign weights_5_d0 = {{grp_fu_767_p3[41:17]}};

assign weights_5_we0 = weights_5_we0_local;

assign weights_6_address0 = weights_6_addr_reg_880_pp0_iter3_reg;

assign weights_6_address1 = weights_6_addr_reg_880_pp0_iter1_reg;

assign weights_6_ce0 = weights_6_ce0_local;

assign weights_6_ce1 = weights_6_ce1_local;

assign weights_6_d0 = {{grp_fu_776_p3[41:17]}};

assign weights_6_we0 = weights_6_we0_local;

assign weights_7_address0 = weights_7_addr_reg_891_pp0_iter3_reg;

assign weights_7_address1 = weights_7_addr_reg_891_pp0_iter1_reg;

assign weights_7_ce0 = weights_7_ce0_local;

assign weights_7_ce1 = weights_7_ce1_local;

assign weights_7_d0 = {{grp_fu_785_p3[41:17]}};

assign weights_7_we0 = weights_7_we0_local;

assign zext_ln235_fu_436_p1 = ap_sig_allocacmp_i;

endmodule //top_updateWeightBias_8_4_Pipeline_VITIS_LOOP_235_1
